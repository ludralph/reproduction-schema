generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "multiSchema", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DB_URL")

  //schemas = [ "auth"]
}

model ab_email_domain {
  id     Int    @id(map: "pk_ab_email_domain") @default(autoincrement())
  domain String @unique
  props  Json   @default("{}")
  groups Json   @default("{}")
}

model admin_event_entity {
  id               String  @id(map: "constraint_admin_event_entity") @db.VarChar(36)
  admin_event_time BigInt?
  realm_id         String? @db.VarChar(255)
  operation_type   String? @db.VarChar(255)
  auth_realm_id    String? @db.VarChar(255)
  auth_client_id   String? @db.VarChar(255)
  auth_user_id     String? @db.VarChar(255)
  ip_address       String? @db.VarChar(255)
  resource_path    String? @db.VarChar(2550)
  representation   String?
  error            String? @db.VarChar(255)
  resource_type    String? @db.VarChar(64)
}

model associated_policy {
  policy_id                                                                             String                 @db.VarChar(36)
  associated_policy_id                                                                  String                 @db.VarChar(36)
  resource_server_policy_associated_policy_associated_policy_idToresource_server_policy resource_server_policy @relation("associated_policy_associated_policy_idToresource_server_policy", fields: [associated_policy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_frsr5s213xcx4wnkog82ssrfy")
  resource_server_policy_associated_policy_policy_idToresource_server_policy            resource_server_policy @relation("associated_policy_policy_idToresource_server_policy", fields: [policy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_frsrpas14xcx4wnkog82ssrfy")

  @@id([policy_id, associated_policy_id], map: "constraint_farsrpap")
  @@index([associated_policy_id], map: "idx_assoc_pol_assoc_pol_id")
}

model authentication_execution {
  id                  String               @id(map: "constraint_auth_exec_pk") @db.VarChar(36)
  alias               String?              @db.VarChar(255)
  authenticator       String?              @db.VarChar(36)
  realm_id            String?              @db.VarChar(36)
  flow_id             String?              @db.VarChar(36)
  requirement         Int?
  priority            Int?
  authenticator_flow  Boolean              @default(false)
  auth_flow_id        String?              @db.VarChar(36)
  auth_config         String?              @db.VarChar(36)
  authentication_flow authentication_flow? @relation(fields: [flow_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_auth_exec_flow")
  realm               realm?               @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_auth_exec_realm")

  @@index([flow_id], map: "idx_auth_exec_flow")
  @@index([realm_id, flow_id], map: "idx_auth_exec_realm_flow")
}

model authentication_flow {
  id                       String                     @id(map: "constraint_auth_flow_pk") @db.VarChar(36)
  alias                    String?                    @db.VarChar(255)
  description              String?                    @db.VarChar(255)
  realm_id                 String?                    @db.VarChar(36)
  provider_id              String                     @default("basic-flow") @db.VarChar(36)
  top_level                Boolean                    @default(false)
  built_in                 Boolean                    @default(false)
  realm                    realm?                     @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_auth_flow_realm")
  authentication_execution authentication_execution[]

  @@index([realm_id], map: "idx_auth_flow_realm")
}

model authenticator_config {
  id       String  @id(map: "constraint_auth_pk") @db.VarChar(36)
  alias    String? @db.VarChar(255)
  realm_id String? @db.VarChar(36)
  realm    realm?  @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_auth_realm")

  @@index([realm_id], map: "idx_auth_config_realm")
}

model authenticator_config_entry {
  authenticator_id String  @db.VarChar(36)
  value            String?
  name             String  @db.VarChar(255)

  @@id([authenticator_id, name], map: "constraint_auth_cfg_pk")
}

model broker_link {
  identity_provider   String  @db.VarChar(255)
  storage_provider_id String? @db.VarChar(255)
  realm_id            String  @db.VarChar(36)
  broker_user_id      String? @db.VarChar(255)
  broker_username     String? @db.VarChar(255)
  token               String?
  user_id             String  @db.VarChar(255)

  @@id([identity_provider, user_id], map: "constr_broker_link_pk")
}

model client {
  id                           String                      @id(map: "constraint_7") @db.VarChar(36)
  enabled                      Boolean                     @default(false)
  full_scope_allowed           Boolean                     @default(false)
  client_id                    String?                     @db.VarChar(255)
  not_before                   Int?
  public_client                Boolean                     @default(false)
  secret                       String?                     @db.VarChar(255)
  base_url                     String?                     @db.VarChar(255)
  bearer_only                  Boolean                     @default(false)
  management_url               String?                     @db.VarChar(255)
  surrogate_auth_required      Boolean                     @default(false)
  realm_id                     String?                     @db.VarChar(36)
  protocol                     String?                     @db.VarChar(255)
  node_rereg_timeout           Int?                        @default(0)
  frontchannel_logout          Boolean                     @default(false)
  consent_required             Boolean                     @default(false)
  name                         String?                     @db.VarChar(255)
  service_accounts_enabled     Boolean                     @default(false)
  client_authenticator_type    String?                     @db.VarChar(255)
  root_url                     String?                     @db.VarChar(255)
  description                  String?                     @db.VarChar(255)
  registration_token           String?                     @db.VarChar(255)
  standard_flow_enabled        Boolean                     @default(true)
  implicit_flow_enabled        Boolean                     @default(false)
  direct_access_grants_enabled Boolean                     @default(false)
  always_display_in_console    Boolean                     @default(false)
  realm                        realm?                      @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_p56ctinxxb9gsk57fo49f9tac")
  client_attributes            client_attributes[]
  client_default_roles         client_default_roles[]
  client_node_registrations    client_node_registrations[]
  client_scope_client          client_scope_client[]
  protocol_mapper              protocol_mapper[]
  redirect_uris                redirect_uris[]
  scope_mapping                scope_mapping[]
  web_origins                  web_origins[]

  @@unique([realm_id, client_id], map: "uk_b71cjlbenv945rb6gcon438at")
  @@index([client_id], map: "idx_client_id")
}

model client_attributes {
  client_id String  @db.VarChar(36)
  value     String? @db.VarChar(4000)
  name      String  @db.VarChar(255)
  client    client  @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk3c47c64beacca966")

  @@id([client_id, name], map: "constraint_3c")
}

model client_auth_flow_bindings {
  client_id    String  @db.VarChar(36)
  flow_id      String? @db.VarChar(36)
  binding_name String  @db.VarChar(255)

  @@id([client_id, binding_name], map: "c_cli_flow_bind")
}

model client_default_roles {
  client_id String @db.VarChar(36)
  role_id   String @unique(map: "uk_8aelwnibji49avxsrtuf6xjow") @db.VarChar(36)
  client    client @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_nuilts7klwqw2h8m2b5joytky")

  @@id([client_id, role_id], map: "constr_client_default_roles")
  @@index([client_id], map: "idx_client_def_roles_client")
}

model client_initial_access {
  id              String @id(map: "cnstr_client_init_acc_pk") @db.VarChar(36)
  realm_id        String @db.VarChar(36)
  timestamp       Int?
  expiration      Int?
  count           Int?
  remaining_count Int?
  realm           realm  @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_client_init_acc_realm")

  @@index([realm_id], map: "idx_client_init_acc_realm")
}

model client_node_registrations {
  client_id String @db.VarChar(36)
  value     Int?
  name      String @db.VarChar(255)
  client    client @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk4129723ba992f594")

  @@id([client_id, name], map: "constraint_84")
}

model client_scope {
  id                        String                      @id(map: "pk_cli_template") @db.VarChar(36)
  name                      String?                     @db.VarChar(255)
  realm_id                  String?                     @db.VarChar(36)
  description               String?                     @db.VarChar(255)
  protocol                  String?                     @db.VarChar(255)
  realm                     realm?                      @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_realm_cli_scope")
  client_scope_attributes   client_scope_attributes[]
  client_scope_client       client_scope_client[]
  client_scope_role_mapping client_scope_role_mapping[]
  default_client_scope      default_client_scope[]
  protocol_mapper           protocol_mapper[]

  @@unique([realm_id, name], map: "uk_cli_scope")
  @@index([realm_id], map: "idx_realm_clscope")
}

model client_scope_attributes {
  scope_id     String       @db.VarChar(36)
  value        String?      @db.VarChar(2048)
  name         String       @db.VarChar(255)
  client_scope client_scope @relation(fields: [scope_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cl_scope_attr_scope")

  @@id([scope_id, name], map: "pk_cl_tmpl_attr")
  @@index([scope_id], map: "idx_clscope_attrs")
}

model client_scope_client {
  client_id     String       @db.VarChar(36)
  scope_id      String       @db.VarChar(36)
  default_scope Boolean      @default(false)
  client        client       @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_c_cli_scope_client")
  client_scope  client_scope @relation(fields: [scope_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_c_cli_scope_scope")

  @@id([client_id, scope_id], map: "c_cli_scope_bind")
  @@index([scope_id], map: "idx_cl_clscope")
  @@index([client_id], map: "idx_clscope_cl")
}

model client_scope_role_mapping {
  scope_id     String       @db.VarChar(36)
  role_id      String       @db.VarChar(36)
  client_scope client_scope @relation(fields: [scope_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cl_scope_rm_scope")

  @@id([scope_id, role_id], map: "pk_template_scope")
  @@index([scope_id], map: "idx_clscope_role")
  @@index([role_id], map: "idx_role_clscope")
}

model client_session {
  id                         String                       @id(map: "constraint_8") @db.VarChar(36)
  client_id                  String?                      @db.VarChar(36)
  redirect_uri               String?                      @db.VarChar(255)
  state                      String?                      @db.VarChar(255)
  timestamp                  Int?
  session_id                 String?                      @db.VarChar(36)
  auth_method                String?                      @db.VarChar(255)
  realm_id                   String?                      @db.VarChar(255)
  auth_user_id               String?                      @db.VarChar(36)
  current_action             String?                      @db.VarChar(36)
  user_session               user_session?                @relation(fields: [session_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_b4ao2vcvat6ukau74wbwtfqo1")
  client_session_auth_status client_session_auth_status[]
  client_session_note        client_session_note[]
  client_session_prot_mapper client_session_prot_mapper[]
  client_session_role        client_session_role[]
  client_user_session_note   client_user_session_note[]

  @@index([session_id], map: "idx_client_session_session")
}

model client_session_auth_status {
  authenticator                                             String         @db.VarChar(36)
  status                                                    Int?
  client_session                                            String         @db.VarChar(36)
  client_session_client_sessionToclient_session_auth_status client_session @relation(fields: [client_session], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auth_status_constraint")

  @@id([client_session, authenticator], map: "constraint_auth_status_pk")
}

model client_session_note {
  name                                               String         @db.VarChar(255)
  value                                              String?        @db.VarChar(255)
  client_session                                     String         @db.VarChar(36)
  client_session_client_sessionToclient_session_note client_session @relation(fields: [client_session], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk5edfb00ff51c2736")

  @@id([client_session, name], map: "constraint_5e")
}

model client_session_prot_mapper {
  protocol_mapper_id                                        String         @db.VarChar(36)
  client_session                                            String         @db.VarChar(36)
  client_session_client_sessionToclient_session_prot_mapper client_session @relation(fields: [client_session], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_33a8sgqw18i532811v7o2dk89")

  @@id([client_session, protocol_mapper_id], map: "constraint_cs_pmp_pk")
}

model client_session_role {
  role_id                                            String         @db.VarChar(255)
  client_session                                     String         @db.VarChar(36)
  client_session_client_sessionToclient_session_role client_session @relation(fields: [client_session], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_11b7sgqw18i532811v7o2dv76")

  @@id([client_session, role_id], map: "constraint_5")
}

model client_user_session_note {
  name                                                    String         @db.VarChar(255)
  value                                                   String?        @db.VarChar(2048)
  client_session                                          String         @db.VarChar(36)
  client_session_client_sessionToclient_user_session_note client_session @relation(fields: [client_session], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cl_usr_ses_note")

  @@id([client_session, name], map: "constr_cl_usr_ses_note")
}

model component {
  id               String             @id(map: "constr_component_pk") @db.VarChar(36)
  name             String?            @db.VarChar(255)
  parent_id        String?            @db.VarChar(36)
  provider_id      String?            @db.VarChar(36)
  provider_type    String?            @db.VarChar(255)
  realm_id         String?            @db.VarChar(36)
  sub_type         String?            @db.VarChar(255)
  realm            realm?             @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_component_realm")
  component_config component_config[]

  @@index([provider_type], map: "idx_component_provider_type")
  @@index([realm_id], map: "idx_component_realm")
}

model component_config {
  id           String    @id(map: "constr_component_config_pk") @db.VarChar(36)
  component_id String    @db.VarChar(36)
  name         String    @db.VarChar(255)
  value        String?   @db.VarChar(4000)
  component    component @relation(fields: [component_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_component_config")

  @@index([component_id], map: "idx_compo_config_compo")
}

model composite_role {
  composite                                              String        @db.VarChar(36)
  child_role                                             String        @db.VarChar(36)
  keycloak_role_composite_role_compositeTokeycloak_role  keycloak_role @relation("composite_role_compositeTokeycloak_role", fields: [composite], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_a63wvekftu8jo1pnj81e7mce2")
  keycloak_role_composite_role_child_roleTokeycloak_role keycloak_role @relation("composite_role_child_roleTokeycloak_role", fields: [child_role], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_gr7thllb9lu8q4vqa4524jjy8")

  @@id([composite, child_role], map: "constraint_composite_role")
  @@index([composite], map: "idx_composite")
  @@index([child_role], map: "idx_composite_child")
}

model credential {
  id              String       @id(map: "constraint_f") @db.VarChar(36)
  salt            Bytes?
  type            String?      @db.VarChar(255)
  user_id         String?      @db.VarChar(36)
  created_date    BigInt?
  user_label      String?      @db.VarChar(255)
  secret_data     String?
  credential_data String?
  priority        Int?
  user_entity     user_entity? @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pfyr0glasqyl0dei3kl69r6v0")

  @@index([user_id], map: "idx_user_credential")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model databasechangelog {
  id            String   @db.VarChar(255)
  author        String   @db.VarChar(255)
  filename      String   @db.VarChar(255)
  dateexecuted  DateTime @db.Timestamp(6)
  orderexecuted Int
  exectype      String   @db.VarChar(10)
  md5sum        String?  @db.VarChar(35)
  description   String?  @db.VarChar(255)
  comments      String?  @db.VarChar(255)
  tag           String?  @db.VarChar(255)
  liquibase     String?  @db.VarChar(20)
  contexts      String?  @db.VarChar(255)
  labels        String?  @db.VarChar(255)
  deployment_id String?  @db.VarChar(10)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by the Prisma Client.
model databasechangelog_abinitio_e {
  id            String   @db.VarChar(255)
  author        String   @db.VarChar(255)
  filename      String   @db.VarChar(255)
  dateexecuted  DateTime @db.Timestamp(6)
  orderexecuted Int
  exectype      String   @db.VarChar(10)
  md5sum        String?  @db.VarChar(35)
  description   String?  @db.VarChar(255)
  comments      String?  @db.VarChar(255)
  tag           String?  @db.VarChar(255)
  liquibase     String?  @db.VarChar(20)
  contexts      String?  @db.VarChar(255)
  labels        String?  @db.VarChar(255)
  deployment_id String?  @db.VarChar(10)

  @@ignore
}

model databasechangeloglock {
  id          Int       @id(map: "pk_databasechangeloglock")
  locked      Boolean
  lockgranted DateTime? @db.Timestamp(6)
  lockedby    String?   @db.VarChar(255)
}

model default_client_scope {
  realm_id      String       @db.VarChar(36)
  scope_id      String       @db.VarChar(36)
  default_scope Boolean      @default(false)
  realm         realm        @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_r_def_cli_scope_realm")
  client_scope  client_scope @relation(fields: [scope_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_r_def_cli_scope_scope")

  @@id([realm_id, scope_id], map: "r_def_cli_scope_bind")
  @@index([realm_id], map: "idx_defcls_realm")
  @@index([scope_id], map: "idx_defcls_scope")
}

model event_entity {
  id           String  @id(map: "constraint_4") @db.VarChar(36)
  client_id    String? @db.VarChar(255)
  details_json String? @db.VarChar(2550)
  error        String? @db.VarChar(255)
  ip_address   String? @db.VarChar(255)
  realm_id     String? @db.VarChar(255)
  session_id   String? @db.VarChar(255)
  event_time   BigInt?
  type         String? @db.VarChar(255)
  user_id      String? @db.VarChar(255)

  @@index([realm_id, event_time], map: "idx_event_time")
}

model fed_user_attribute {
  id                  String  @id(map: "constr_fed_user_attr_pk") @db.VarChar(36)
  name                String  @db.VarChar(255)
  user_id             String  @db.VarChar(255)
  realm_id            String  @db.VarChar(36)
  storage_provider_id String? @db.VarChar(36)
  value               String? @db.VarChar(2024)

  @@index([user_id, realm_id, name], map: "idx_fu_attribute")
}

model fed_user_consent {
  id                      String  @id(map: "constr_fed_user_consent_pk") @db.VarChar(36)
  client_id               String? @db.VarChar(255)
  user_id                 String  @db.VarChar(255)
  realm_id                String  @db.VarChar(36)
  storage_provider_id     String? @db.VarChar(36)
  created_date            BigInt?
  last_updated_date       BigInt?
  client_storage_provider String? @db.VarChar(36)
  external_client_id      String? @db.VarChar(255)

  @@index([user_id, client_storage_provider, external_client_id], map: "idx_fu_cnsnt_ext")
  @@index([user_id, client_id], map: "idx_fu_consent")
  @@index([realm_id, user_id], map: "idx_fu_consent_ru")
}

model fed_user_consent_cl_scope {
  user_consent_id String @db.VarChar(36)
  scope_id        String @db.VarChar(36)

  @@id([user_consent_id, scope_id], map: "constraint_fgrntcsnt_clsc_pm")
}

model fed_user_credential {
  id                  String  @id(map: "constr_fed_user_cred_pk") @db.VarChar(36)
  salt                Bytes?
  type                String? @db.VarChar(255)
  created_date        BigInt?
  user_id             String  @db.VarChar(255)
  realm_id            String  @db.VarChar(36)
  storage_provider_id String? @db.VarChar(36)
  user_label          String? @db.VarChar(255)
  secret_data         String?
  credential_data     String?
  priority            Int?

  @@index([user_id, type], map: "idx_fu_credential")
  @@index([realm_id, user_id], map: "idx_fu_credential_ru")
}

model fed_user_group_membership {
  group_id            String  @db.VarChar(36)
  user_id             String  @db.VarChar(255)
  realm_id            String  @db.VarChar(36)
  storage_provider_id String? @db.VarChar(36)

  @@id([group_id, user_id], map: "constr_fed_user_group")
  @@index([user_id, group_id], map: "idx_fu_group_membership")
  @@index([realm_id, user_id], map: "idx_fu_group_membership_ru")
}

model fed_user_required_action {
  required_action     String  @default(" ") @db.VarChar(255)
  user_id             String  @db.VarChar(255)
  realm_id            String  @db.VarChar(36)
  storage_provider_id String? @db.VarChar(36)

  @@id([required_action, user_id], map: "constr_fed_required_action")
  @@index([user_id, required_action], map: "idx_fu_required_action")
  @@index([realm_id, user_id], map: "idx_fu_required_action_ru")
}

model fed_user_role_mapping {
  role_id             String  @db.VarChar(36)
  user_id             String  @db.VarChar(255)
  realm_id            String  @db.VarChar(36)
  storage_provider_id String? @db.VarChar(36)

  @@id([role_id, user_id], map: "constr_fed_user_role")
  @@index([user_id, role_id], map: "idx_fu_role_mapping")
  @@index([realm_id, user_id], map: "idx_fu_role_mapping_ru")
}

model federated_identity {
  identity_provider  String      @db.VarChar(255)
  realm_id           String?     @db.VarChar(36)
  federated_user_id  String?     @db.VarChar(255)
  federated_username String?     @db.VarChar(255)
  token              String?
  user_id            String      @db.VarChar(36)
  user_entity        user_entity @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk404288b92ef007a6")

  @@id([identity_provider, user_id], map: "constraint_40")
  @@index([federated_user_id], map: "idx_fedidentity_feduser")
  @@index([user_id], map: "idx_fedidentity_user")
}

model federated_user {
  id                  String  @id(map: "constr_federated_user") @db.VarChar(255)
  storage_provider_id String? @db.VarChar(255)
  realm_id            String  @db.VarChar(36)
}

model group_attribute {
  id             String         @id(map: "constraint_group_attribute_pk") @default("sybase-needs-something-here") @db.VarChar(36)
  name           String         @db.VarChar(255)
  value          String?        @db.VarChar(255)
  group_id       String         @db.VarChar(36)
  keycloak_group keycloak_group @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_group_attribute_group")

  @@index([group_id], map: "idx_group_attr_group")
}

model group_role_mapping {
  role_id        String         @db.VarChar(36)
  group_id       String         @db.VarChar(36)
  keycloak_group keycloak_group @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_group_role_group")

  @@id([role_id, group_id], map: "constraint_group_role")
  @@index([group_id], map: "idx_group_role_mapp_group")
}

model identity_provider {
  internal_id                String                     @id(map: "constraint_2b") @db.VarChar(36)
  enabled                    Boolean                    @default(false)
  provider_alias             String?                    @db.VarChar(255)
  provider_id                String?                    @db.VarChar(255)
  store_token                Boolean                    @default(false)
  authenticate_by_default    Boolean                    @default(false)
  realm_id                   String?                    @db.VarChar(36)
  add_token_role             Boolean                    @default(true)
  trust_email                Boolean                    @default(false)
  first_broker_login_flow_id String?                    @db.VarChar(36)
  post_broker_login_flow_id  String?                    @db.VarChar(36)
  provider_display_name      String?                    @db.VarChar(255)
  link_only                  Boolean                    @default(false)
  realm                      realm?                     @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk2b4ebc52ae5c3b34")
  identity_provider_config   identity_provider_config[]

  @@unique([provider_alias, realm_id], map: "uk_2daelwnibji49avxsrtuf6xj33")
  @@index([realm_id], map: "idx_ident_prov_realm")
}

model identity_provider_config {
  identity_provider_id String            @db.VarChar(36)
  value                String?
  name                 String            @db.VarChar(255)
  identity_provider    identity_provider @relation(fields: [identity_provider_id], references: [internal_id], onDelete: NoAction, onUpdate: NoAction, map: "fkdc4897cf864c4e43")

  @@id([identity_provider_id, name], map: "constraint_d")
}

model identity_provider_mapper {
  id                String              @id(map: "constraint_idpm") @db.VarChar(36)
  name              String              @db.VarChar(255)
  idp_alias         String              @db.VarChar(255)
  idp_mapper_name   String              @db.VarChar(255)
  realm_id          String              @db.VarChar(36)
  realm             realm               @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_idpm_realm")
  idp_mapper_config idp_mapper_config[]

  @@index([realm_id], map: "idx_id_prov_mapp_realm")
}

model idp_mapper_config {
  idp_mapper_id            String                   @db.VarChar(36)
  value                    String?
  name                     String                   @db.VarChar(255)
  identity_provider_mapper identity_provider_mapper @relation(fields: [idp_mapper_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_idpmconfig")

  @@id([idp_mapper_id, name], map: "constraint_idpmconfig")
}

model keycloak_group {
  id                 String               @id(map: "constraint_group") @db.VarChar(36)
  name               String?              @db.VarChar(255)
  parent_group       String               @db.VarChar(36)
  realm_id           String?              @db.VarChar(36)
  realm              realm?               @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_group_realm")
  ab_camp_user       ab_camp_user[]
  group_attribute    group_attribute[]
  group_role_mapping group_role_mapping[]

  @@unique([realm_id, parent_group, name], map: "sibling_names")
}

model keycloak_role {
  id                                                      String           @id(map: "constraint_a") @db.VarChar(36)
  client_realm_constraint                                 String?          @db.VarChar(255)
  client_role                                             Boolean          @default(false)
  description                                             String?          @db.VarChar(255)
  name                                                    String?          @db.VarChar(255)
  realm_id                                                String?          @db.VarChar(255)
  client                                                  String?          @db.VarChar(36)
  realm                                                   String?          @db.VarChar(36)
  realm_keycloak_roleTorealm                              realm?           @relation(fields: [realm], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_6vyqfe4cn4wlq8r6kt5vdsj5c")
  composite_role_composite_role_compositeTokeycloak_role  composite_role[] @relation("composite_role_compositeTokeycloak_role")
  composite_role_composite_role_child_roleTokeycloak_role composite_role[] @relation("composite_role_child_roleTokeycloak_role")
  role_attribute                                          role_attribute[]

  @@unique([name, client_realm_constraint], map: "UK_J3RWUVD56ONTGSUHOGM184WW2-2")
  @@index([client], map: "idx_keycloak_role_client")
  @@index([realm], map: "idx_keycloak_role_realm")
}

model migration_model {
  id          String  @id(map: "constraint_migmod") @db.VarChar(36)
  version     String? @db.VarChar(36)
  update_time BigInt  @default(0)

  @@index([update_time], map: "idx_update_time")
}

model offline_client_session {
  user_session_id         String  @db.VarChar(36)
  client_id               String  @db.VarChar(255)
  offline_flag            String  @db.VarChar(4)
  timestamp               Int?
  data                    String?
  client_storage_provider String  @default("local") @db.VarChar(36)
  external_client_id      String  @default("local") @db.VarChar(255)

  @@id([user_session_id, client_id, client_storage_provider, external_client_id, offline_flag], map: "constraint_offl_cl_ses_pk3")
  @@index([user_session_id], map: "idx_us_sess_id_on_cl_sess")
}

model offline_user_session {
  user_session_id      String  @db.VarChar(36)
  user_id              String  @db.VarChar(255)
  realm_id             String  @db.VarChar(36)
  created_on           Int
  offline_flag         String  @db.VarChar(4)
  data                 String?
  last_session_refresh Int     @default(0)

  @@id([user_session_id, offline_flag], map: "constraint_offl_us_ses_pk2")
  @@index([created_on], map: "idx_offline_uss_createdon")
}

model policy_config {
  policy_id              String                 @db.VarChar(36)
  name                   String                 @db.VarChar(255)
  value                  String?
  resource_server_policy resource_server_policy @relation(fields: [policy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkdc34197cf864c4e43")

  @@id([policy_id, name], map: "constraint_dpc")
}

model protocol_mapper {
  id                     String                   @id(map: "constraint_pcm") @db.VarChar(36)
  name                   String                   @db.VarChar(255)
  protocol               String                   @db.VarChar(255)
  protocol_mapper_name   String                   @db.VarChar(255)
  client_id              String?                  @db.VarChar(36)
  client_scope_id        String?                  @db.VarChar(36)
  client_scope           client_scope?            @relation(fields: [client_scope_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_cli_scope_mapper")
  client                 client?                  @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pcm_realm")
  protocol_mapper_config protocol_mapper_config[]

  @@index([client_scope_id], map: "idx_clscope_protmap")
  @@index([client_id], map: "idx_protocol_mapper_client")
}

model protocol_mapper_config {
  protocol_mapper_id String          @db.VarChar(36)
  value              String?
  name               String          @db.VarChar(255)
  protocol_mapper    protocol_mapper @relation(fields: [protocol_mapper_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_pmconfig")

  @@id([protocol_mapper_id, name], map: "constraint_pmconfig")
}

model realm {
  id                           String                      @id(map: "constraint_4a") @db.VarChar(36)
  access_code_lifespan         Int?
  user_action_lifespan         Int?
  access_token_lifespan        Int?
  account_theme                String?                     @db.VarChar(255)
  admin_theme                  String?                     @db.VarChar(255)
  email_theme                  String?                     @db.VarChar(255)
  enabled                      Boolean                     @default(false)
  events_enabled               Boolean                     @default(false)
  events_expiration            BigInt?
  login_theme                  String?                     @db.VarChar(255)
  name                         String?                     @unique(map: "uk_orvsdmla56612eaefiq6wl5oi") @db.VarChar(255)
  not_before                   Int?
  password_policy              String?                     @db.VarChar(2550)
  registration_allowed         Boolean                     @default(false)
  remember_me                  Boolean                     @default(false)
  reset_password_allowed       Boolean                     @default(false)
  social                       Boolean                     @default(false)
  ssl_required                 String?                     @db.VarChar(255)
  sso_idle_timeout             Int?
  sso_max_lifespan             Int?
  update_profile_on_soc_login  Boolean                     @default(false)
  verify_email                 Boolean                     @default(false)
  master_admin_client          String?                     @db.VarChar(36)
  login_lifespan               Int?
  internationalization_enabled Boolean                     @default(false)
  default_locale               String?                     @db.VarChar(255)
  reg_email_as_username        Boolean                     @default(false)
  admin_events_enabled         Boolean                     @default(false)
  admin_events_details_enabled Boolean                     @default(false)
  edit_username_allowed        Boolean                     @default(false)
  otp_policy_counter           Int?                        @default(0)
  otp_policy_window            Int?                        @default(1)
  otp_policy_period            Int?                        @default(30)
  otp_policy_digits            Int?                        @default(6)
  otp_policy_alg               String?                     @default("HmacSHA1") @db.VarChar(36)
  otp_policy_type              String?                     @default("totp") @db.VarChar(36)
  browser_flow                 String?                     @db.VarChar(36)
  registration_flow            String?                     @db.VarChar(36)
  direct_grant_flow            String?                     @db.VarChar(36)
  reset_credentials_flow       String?                     @db.VarChar(36)
  client_auth_flow             String?                     @db.VarChar(36)
  offline_session_idle_timeout Int?                        @default(0)
  revoke_refresh_token         Boolean                     @default(false)
  access_token_life_implicit   Int?                        @default(0)
  login_with_email_allowed     Boolean                     @default(true)
  duplicate_emails_allowed     Boolean                     @default(false)
  docker_auth_flow             String?                     @db.VarChar(36)
  refresh_token_max_reuse      Int?                        @default(0)
  allow_user_managed_access    Boolean                     @default(false)
  sso_max_lifespan_remember_me Int                         @default(0)
  sso_idle_timeout_remember_me Int                         @default(0)
  authentication_execution     authentication_execution[]
  authentication_flow          authentication_flow[]
  authenticator_config         authenticator_config[]
  client                       client[]
  client_initial_access        client_initial_access[]
  client_scope                 client_scope[]
  component                    component[]
  default_client_scope         default_client_scope[]
  identity_provider            identity_provider[]
  identity_provider_mapper     identity_provider_mapper[]
  keycloak_group               keycloak_group[]
  keycloak_role                keycloak_role[]
  realm_attribute              realm_attribute[]
  realm_default_groups         realm_default_groups[]
  realm_default_roles          realm_default_roles[]
  realm_enabled_event_types    realm_enabled_event_types[]
  realm_events_listeners       realm_events_listeners[]
  realm_required_credential    realm_required_credential[]
  realm_smtp_config            realm_smtp_config[]
  realm_supported_locales      realm_supported_locales[]
  required_action_provider     required_action_provider[]
  user_federation_mapper       user_federation_mapper[]
  user_federation_provider     user_federation_provider[]

  @@index([master_admin_client], map: "idx_realm_master_adm_cli")
}

model realm_attribute {
  name     String  @db.VarChar(255)
  value    String? @db.VarChar(255)
  realm_id String  @db.VarChar(36)
  realm    realm   @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_8shxd6l3e9atqukacxgpffptw")

  @@id([name, realm_id], map: "constraint_9")
  @@index([realm_id], map: "idx_realm_attr_realm")
}

model realm_default_groups {
  realm_id String @db.VarChar(36)
  group_id String @unique(map: "con_group_id_def_groups") @db.VarChar(36)
  realm    realm  @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_def_groups_realm")

  @@id([realm_id, group_id], map: "constr_realm_default_groups")
  @@index([realm_id], map: "idx_realm_def_grp_realm")
}

model realm_default_roles {
  realm_id String @db.VarChar(36)
  role_id  String @unique(map: "uk_h4wpd7w4hsoolni3h0sw7btje") @db.VarChar(36)
  realm    realm  @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_evudb1ppw84oxfax2drs03icc")

  @@id([realm_id, role_id], map: "constraint_realm_default_roles")
  @@index([realm_id], map: "idx_realm_def_roles_realm")
}

model realm_enabled_event_types {
  realm_id String @db.VarChar(36)
  value    String @db.VarChar(255)
  realm    realm  @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_h846o4h0w8epx5nwedrf5y69j")

  @@id([realm_id, value], map: "constr_realm_enabl_event_types")
  @@index([realm_id], map: "idx_realm_evt_types_realm")
}

model realm_events_listeners {
  realm_id String @db.VarChar(36)
  value    String @db.VarChar(255)
  realm    realm  @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_h846o4h0w8epx5nxev9f5y69j")

  @@id([realm_id, value], map: "constr_realm_events_listeners")
  @@index([realm_id], map: "idx_realm_evt_list_realm")
}

model realm_localizations {
  realm_id String @db.VarChar(255)
  locale   String @db.VarChar(255)
  texts    String

  @@id([realm_id, locale])
}

model realm_required_credential {
  type       String  @db.VarChar(255)
  form_label String? @db.VarChar(255)
  input      Boolean @default(false)
  secret     Boolean @default(false)
  realm_id   String  @db.VarChar(36)
  realm      realm   @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_5hg65lybevavkqfki3kponh9v")

  @@id([realm_id, type], map: "constraint_92")
}

model realm_smtp_config {
  realm_id String  @db.VarChar(36)
  value    String? @db.VarChar(255)
  name     String  @db.VarChar(255)
  realm    realm   @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_70ej8xdxgxd0b9hh6180irr0o")

  @@id([realm_id, name], map: "constraint_e")
}

model realm_supported_locales {
  realm_id String @db.VarChar(36)
  value    String @db.VarChar(255)
  realm    realm  @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_supported_locales_realm")

  @@id([realm_id, value], map: "constr_realm_supported_locales")
  @@index([realm_id], map: "idx_realm_supp_local_realm")
}

model redirect_uris {
  client_id String @db.VarChar(36)
  value     String @db.VarChar(255)
  client    client @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_1burs8pb4ouj97h5wuppahv9f")

  @@id([client_id, value], map: "constraint_redirect_uris")
  @@index([client_id], map: "idx_redir_uri_client")
}

model required_action_config {
  required_action_id String  @db.VarChar(36)
  value              String?
  name               String  @db.VarChar(255)

  @@id([required_action_id, name], map: "constraint_req_act_cfg_pk")
}

model required_action_provider {
  id             String  @id(map: "constraint_req_act_prv_pk") @db.VarChar(36)
  alias          String? @db.VarChar(255)
  name           String? @db.VarChar(255)
  realm_id       String? @db.VarChar(36)
  enabled        Boolean @default(false)
  default_action Boolean @default(false)
  provider_id    String? @db.VarChar(255)
  priority       Int?
  realm          realm?  @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_req_act_realm")

  @@index([realm_id], map: "idx_req_act_prov_realm")
}

model resource_attribute {
  id                       String                   @id(map: "res_attr_pk") @default("sybase-needs-something-here") @db.VarChar(36)
  name                     String                   @db.VarChar(255)
  value                    String?                  @db.VarChar(255)
  resource_id              String                   @db.VarChar(36)
  resource_server_resource resource_server_resource @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_5hrm2vlf9ql5fu022kqepovbr")
}

model resource_policy {
  resource_id              String                   @db.VarChar(36)
  policy_id                String                   @db.VarChar(36)
  resource_server_resource resource_server_resource @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_frsrpos53xcx4wnkog82ssrfy")
  resource_server_policy   resource_server_policy   @relation(fields: [policy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_frsrpp213xcx4wnkog82ssrfy")

  @@id([resource_id, policy_id], map: "constraint_farsrpp")
  @@index([policy_id], map: "idx_res_policy_policy")
}

model resource_scope {
  resource_id              String                   @db.VarChar(36)
  scope_id                 String                   @db.VarChar(36)
  resource_server_resource resource_server_resource @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_frsrpos13xcx4wnkog82ssrfy")
  resource_server_scope    resource_server_scope    @relation(fields: [scope_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_frsrps213xcx4wnkog82ssrfy")

  @@id([resource_id, scope_id], map: "constraint_farsrsp")
  @@index([scope_id], map: "idx_res_scope_scope")
}

model resource_server {
  id                          String                        @id(map: "pk_resource_server") @db.VarChar(36)
  allow_rs_remote_mgmt        Boolean                       @default(false)
  policy_enforce_mode         String                        @db.VarChar(15)
  decision_strategy           Int                           @default(1) @db.SmallInt
  resource_server_perm_ticket resource_server_perm_ticket[]
  resource_server_policy      resource_server_policy[]
  resource_server_resource    resource_server_resource[]
  resource_server_scope       resource_server_scope[]
}

model resource_server_perm_ticket {
  id                       String                   @id(map: "constraint_fapmt") @db.VarChar(36)
  owner                    String                   @db.VarChar(255)
  requester                String                   @db.VarChar(255)
  created_timestamp        BigInt
  granted_timestamp        BigInt?
  resource_id              String                   @db.VarChar(36)
  scope_id                 String?                  @db.VarChar(36)
  resource_server_id       String                   @db.VarChar(36)
  policy_id                String?                  @db.VarChar(36)
  resource_server          resource_server          @relation(fields: [resource_server_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_frsrho213xcx4wnkog82sspmt")
  resource_server_resource resource_server_resource @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_frsrho213xcx4wnkog83sspmt")
  resource_server_scope    resource_server_scope?   @relation(fields: [scope_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_frsrho213xcx4wnkog84sspmt")
  resource_server_policy   resource_server_policy?  @relation(fields: [policy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_frsrpo2128cx4wnkog82ssrfy")

  @@unique([owner, requester, resource_server_id, resource_id, scope_id], map: "uk_frsr6t700s9v50bu18ws5pmt")
}

model resource_server_policy {
  id                                                                               String                        @id(map: "constraint_farsrp") @db.VarChar(36)
  name                                                                             String                        @db.VarChar(255)
  description                                                                      String?                       @db.VarChar(255)
  type                                                                             String                        @db.VarChar(255)
  decision_strategy                                                                String?                       @db.VarChar(20)
  logic                                                                            String?                       @db.VarChar(20)
  resource_server_id                                                               String                        @db.VarChar(36)
  owner                                                                            String?                       @db.VarChar(255)
  resource_server                                                                  resource_server               @relation(fields: [resource_server_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_frsrpo213xcx4wnkog82ssrfy")
  associated_policy_associated_policy_associated_policy_idToresource_server_policy associated_policy[]           @relation("associated_policy_associated_policy_idToresource_server_policy")
  associated_policy_associated_policy_policy_idToresource_server_policy            associated_policy[]           @relation("associated_policy_policy_idToresource_server_policy")
  policy_config                                                                    policy_config[]
  resource_policy                                                                  resource_policy[]
  resource_server_perm_ticket                                                      resource_server_perm_ticket[]
  scope_policy                                                                     scope_policy[]

  @@unique([name, resource_server_id], map: "uk_frsrpt700s9v50bu18ws5ha6")
  @@index([resource_server_id], map: "idx_res_serv_pol_res_serv")
}

model resource_server_resource {
  id                          String                        @id(map: "constraint_farsr") @db.VarChar(36)
  name                        String                        @db.VarChar(255)
  type                        String?                       @db.VarChar(255)
  icon_uri                    String?                       @db.VarChar(255)
  owner                       String                        @db.VarChar(255)
  resource_server_id          String                        @db.VarChar(36)
  owner_managed_access        Boolean                       @default(false)
  display_name                String?                       @db.VarChar(255)
  resource_server             resource_server               @relation(fields: [resource_server_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_frsrho213xcx4wnkog82ssrfy")
  resource_attribute          resource_attribute[]
  resource_policy             resource_policy[]
  resource_scope              resource_scope[]
  resource_server_perm_ticket resource_server_perm_ticket[]
  resource_uris               resource_uris[]

  @@unique([name, owner, resource_server_id], map: "uk_frsr6t700s9v50bu18ws5ha6")
  @@index([resource_server_id], map: "idx_res_srv_res_res_srv")
}

model resource_server_scope {
  id                          String                        @id(map: "constraint_farsrs") @db.VarChar(36)
  name                        String                        @db.VarChar(255)
  icon_uri                    String?                       @db.VarChar(255)
  resource_server_id          String                        @db.VarChar(36)
  display_name                String?                       @db.VarChar(255)
  resource_server             resource_server               @relation(fields: [resource_server_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_frsrso213xcx4wnkog82ssrfy")
  resource_scope              resource_scope[]
  resource_server_perm_ticket resource_server_perm_ticket[]
  scope_policy                scope_policy[]

  @@unique([name, resource_server_id], map: "uk_frsrst700s9v50bu18ws5ha6")
  @@index([resource_server_id], map: "idx_res_srv_scope_res_srv")
}

model resource_uris {
  resource_id              String                   @db.VarChar(36)
  value                    String                   @db.VarChar(255)
  resource_server_resource resource_server_resource @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_resource_server_uris")

  @@id([resource_id, value], map: "constraint_resour_uris_pk")
}

model role_attribute {
  id            String        @id(map: "constraint_role_attribute_pk") @db.VarChar(36)
  role_id       String        @db.VarChar(36)
  name          String        @db.VarChar(255)
  value         String?       @db.VarChar(255)
  keycloak_role keycloak_role @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_role_attribute_id")

  @@index([role_id], map: "idx_role_attribute")
}

model scope_mapping {
  client_id String @db.VarChar(36)
  role_id   String @db.VarChar(36)
  client    client @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_ouse064plmlr732lxjcn1q5f1")

  @@id([client_id, role_id], map: "constraint_81")
  @@index([role_id], map: "idx_scope_mapping_role")
}

model scope_policy {
  scope_id               String                 @db.VarChar(36)
  policy_id              String                 @db.VarChar(36)
  resource_server_policy resource_server_policy @relation(fields: [policy_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_frsrasp13xcx4wnkog82ssrfy")
  resource_server_scope  resource_server_scope  @relation(fields: [scope_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_frsrpass3xcx4wnkog82ssrfy")

  @@id([scope_id, policy_id], map: "constraint_farsrsps")
  @@index([policy_id], map: "idx_scope_policy_policy")
}

model user_attribute {
  name        String      @db.VarChar(255)
  value       String?     @db.VarChar(255)
  user_id     String      @db.VarChar(36)
  id          String      @id(map: "constraint_user_attribute_pk") @default("sybase-needs-something-here") @db.VarChar(36)
  user_entity user_entity @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_5hrm2vlf9ql5fu043kqepovbr")

  @@index([user_id], map: "idx_user_attribute")
}

model user_consent {
  id                        String                      @id(map: "constraint_grntcsnt_pm") @db.VarChar(36)
  client_id                 String?                     @db.VarChar(255)
  user_id                   String                      @db.VarChar(36)
  created_date              BigInt?
  last_updated_date         BigInt?
  client_storage_provider   String?                     @db.VarChar(36)
  external_client_id        String?                     @db.VarChar(255)
  user_entity               user_entity                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_grntcsnt_user")
  user_consent_client_scope user_consent_client_scope[]

  @@unique([client_id, client_storage_provider, external_client_id, user_id], map: "uk_jkuwuvd56ontgsuhogm8uewrt")
  @@index([user_id], map: "idx_user_consent")
}

model user_consent_client_scope {
  user_consent_id String       @db.VarChar(36)
  scope_id        String       @db.VarChar(36)
  user_consent    user_consent @relation(fields: [user_consent_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_grntcsnt_clsc_usc")

  @@id([user_consent_id, scope_id], map: "constraint_grntcsnt_clsc_pm")
  @@index([user_consent_id], map: "idx_usconsent_clscope")
}

model user_entity {
  id                          String                  @id(map: "constraint_fb") @db.VarChar(36)
  email                       String?                 @db.VarChar(255)
  email_constraint            String?                 @db.VarChar(255)
  email_verified              Boolean                 @default(false)
  enabled                     Boolean                 @default(false)
  federation_link             String?                 @db.VarChar(255)
  first_name                  String?                 @db.VarChar(255)
  last_name                   String?                 @db.VarChar(255)
  realm_id                    String?                 @db.VarChar(255)
  username                    String?                 @db.VarChar(255)
  created_timestamp           BigInt?
  service_account_client_link String?                 @db.VarChar(255)
  not_before                  Int                     @default(0)
  ab_camp_user                ab_camp_user?
  credential                  credential[]
  federated_identity          federated_identity[]
  user_attribute              user_attribute[]
  user_consent                user_consent[]
  user_group_membership       user_group_membership[]
  user_required_action        user_required_action[]
  user_role_mapping           user_role_mapping[]

  @@unique([realm_id, email_constraint], map: "uk_dykn684sl8up1crfei6eckhd7")
  @@unique([realm_id, username], map: "uk_ru8tt6t700s9v50bu18ws5ha6")
  @@index([email], map: "idx_user_email")
}

model user_federation_config {
  user_federation_provider_id String                   @db.VarChar(36)
  value                       String?                  @db.VarChar(255)
  name                        String                   @db.VarChar(255)
  user_federation_provider    user_federation_provider @relation(fields: [user_federation_provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_t13hpu1j94r2ebpekr39x5eu5")

  @@id([user_federation_provider_id, name], map: "constraint_f9")
}

model user_federation_mapper {
  id                            String                          @id(map: "constraint_fedmapperpm") @db.VarChar(36)
  name                          String                          @db.VarChar(255)
  federation_provider_id        String                          @db.VarChar(36)
  federation_mapper_type        String                          @db.VarChar(255)
  realm_id                      String                          @db.VarChar(36)
  user_federation_provider      user_federation_provider        @relation(fields: [federation_provider_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fedmapperpm_fedprv")
  realm                         realm                           @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fedmapperpm_realm")
  user_federation_mapper_config user_federation_mapper_config[]

  @@index([federation_provider_id], map: "idx_usr_fed_map_fed_prv")
  @@index([realm_id], map: "idx_usr_fed_map_realm")
}

model user_federation_mapper_config {
  user_federation_mapper_id String                 @db.VarChar(36)
  value                     String?                @db.VarChar(255)
  name                      String                 @db.VarChar(255)
  user_federation_mapper    user_federation_mapper @relation(fields: [user_federation_mapper_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fedmapper_cfg")

  @@id([user_federation_mapper_id, name], map: "constraint_fedmapper_cfg_pm")
}

model user_federation_provider {
  id                     String                   @id(map: "constraint_5c") @db.VarChar(36)
  changed_sync_period    Int?
  display_name           String?                  @db.VarChar(255)
  full_sync_period       Int?
  last_sync              Int?
  priority               Int?
  provider_name          String?                  @db.VarChar(255)
  realm_id               String?                  @db.VarChar(36)
  realm                  realm?                   @relation(fields: [realm_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_1fj32f6ptolw2qy60cd8n01e8")
  user_federation_config user_federation_config[]
  user_federation_mapper user_federation_mapper[]

  @@index([realm_id], map: "idx_usr_fed_prv_realm")
}

model user_group_membership {
  group_id    String      @db.VarChar(36)
  user_id     String      @db.VarChar(36)
  user_entity user_entity @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_group_user")

  @@id([group_id, user_id], map: "constraint_user_group")
  @@index([user_id], map: "idx_user_group_mapping")
}

model user_required_action {
  user_id         String      @db.VarChar(36)
  required_action String      @default(" ") @db.VarChar(255)
  user_entity     user_entity @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_6qj3w1jw9cvafhe19bwsiuvmd")

  @@id([required_action, user_id], map: "constraint_required_action")
  @@index([user_id], map: "idx_user_reqactions")
}

model user_role_mapping {
  role_id     String      @db.VarChar(255)
  user_id     String      @db.VarChar(36)
  user_entity user_entity @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_c4fqv34p1mbylloxang7b1q3l")

  @@id([role_id, user_id], map: "constraint_c")
  @@index([user_id], map: "idx_user_role_mapping")
}

model user_session {
  id                   String              @id(map: "constraint_57") @db.VarChar(36)
  auth_method          String?             @db.VarChar(255)
  ip_address           String?             @db.VarChar(255)
  last_session_refresh Int?
  login_username       String?             @db.VarChar(255)
  realm_id             String?             @db.VarChar(255)
  remember_me          Boolean             @default(false)
  started              Int?
  user_id              String?             @db.VarChar(255)
  user_session_state   Int?
  broker_session_id    String?             @db.VarChar(255)
  broker_user_id       String?             @db.VarChar(255)
  client_session       client_session[]
  user_session_note    user_session_note[]
}

model user_session_note {
  user_session                                 String       @db.VarChar(36)
  name                                         String       @db.VarChar(255)
  value                                        String?      @db.VarChar(2048)
  user_session_user_sessionTouser_session_note user_session @relation(fields: [user_session], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk5edfb00ff51d3472")

  @@id([user_session, name], map: "constraint_usn_pk")
}

model username_login_failure {
  realm_id                String  @db.VarChar(36)
  username                String  @db.VarChar(255)
  failed_login_not_before Int?
  last_failure            BigInt?
  last_ip_failure         String? @db.VarChar(255)
  num_failures            Int?

  @@id([realm_id, username], map: "CONSTRAINT_17-2")
}

model web_origins {
  client_id String @db.VarChar(36)
  value     String @db.VarChar(255)
  client    client @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_lojpho213xcx4wnkog82ssrfy")

  @@id([client_id, value], map: "constraint_web_origins")
  @@index([client_id], map: "idx_web_orig_client")
}

model ab_camp_user {
  id             String          @id @default(cuid()) @db.Uuid
  user_id        String          @unique(map: "ab_camp_user_user_id_unique") @db.VarChar(36)
  tokens         Int?            @default(0)
  gatekeeper_for String?         @db.VarChar(36)
  created_at     DateTime        @default(now()) @db.Timestamptz(6)
  updated_at     DateTime        @default(now()) @db.Timestamptz(6)
  keycloak_group keycloak_group? @relation(fields: [gatekeeper_for], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ab_camp_user_gatekeeper_for_foreign")
  user_entity    user_entity     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ab_camp_user_user_id_foreign")

  @@unique([id, user_id], map: "ab_camp_user_id_user_id_unique")
}

model ab_training_env {
  id             String       @id @default(cuid()) @db.Uuid
  created_at     DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?    @default(now()) @db.Timestamptz(6)
  course_name    String       @db.VarChar(255)
  user_id        String       @db.VarChar(36)
  job_id         String?      @unique(map: "ab_training_env_job_id_unique") @db.VarChar(255)
  product_id     String?      @db.VarChar(255)
  status         status_type1?
  status_message String?
  started_at     DateTime?    @db.Timestamptz(6)
  completed_at   DateTime?    @db.Timestamptz(6)
  deleted        Boolean?     @default(false)
  customer_id    String?      @db.VarChar(36)
  instance_id    String?      @unique(map: "ab_training_env_instance_id_unique") @db.VarChar(255)
  instance_url   String?      @db.VarChar(255)
  region         String?      @db.VarChar(255)
  expires_in     Int?         @default(7)
  password       String?      @db.VarChar(255)
  log_stream     String?      @db.VarChar(255)
  term           String?      @db.VarChar(255)
  urls           Json?
}

model knex_migrations {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)
}

model knex_migrations_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?
}

model ab_camp_audit {
  id           String   @id @default(cuid()) @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @db.Timestamptz(6)
  user_id      String?  @db.VarChar(36)
  operation_id String   @db.VarChar(255)
  auditable_id String?  @db.VarChar(36)
  details      Json?
}

enum status_type1 {
  CONFIGURING
  READY
  REQUESTED
  PENDING
  IN_PROGRESS
  STOPPING
  TERMINATED
  ERROR
  ERROR_DURING_DELETE
}

model ab_camp_audit_operation {
  id         String   @id @default(cuid()) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  name       String   @db.VarChar(255)
}

model ab_camp_audit_operation_type {
  id         String   @id @default(cuid()) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  name       String   @db.VarChar(255)
}

model base_url {
  id         String   @id @default(cuid()) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)
  url        String   @db.VarChar(255)
}

model base_url_ab_camp_user {
  base_url_id     String   @id @db.VarChar(36)
  ab_camp_user_id String
  created_at      DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_camp_user {
  ab_camp_user_id  String   @id @db.VarChar(36)
  ab_camp_user_id2 String   @db.VarChar(36)
  created_at       DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_camp_user2 {
  ab_camp_user_id  String   @id @db.VarChar(36)
  ab_camp_user_id2 String   @db.VarChar(36)
  created_at       DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_camp_user3 {
  ab_camp_user_id  String   @id @db.VarChar(36)
  ab_camp_user_id2 String   @db.VarChar(36)
  created_at       DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_camp_user4 {
  ab_camp_user_id  String   @id @db.VarChar(36)
  ab_camp_user_id2 String   @db.VarChar(36)
  created_at       DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_camp_user5 {
  ab_camp_user_id  String   @id @db.VarChar(36)
  ab_camp_user_id2 String   @db.VarChar(36)
  created_at       DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_camp_user6 {
  ab_camp_user_id  String   @id @db.VarChar(36)
  ab_camp_user_id2 String   @db.VarChar(36)
  created_at       DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_camp_user7 {
  ab_camp_user_id  String   @id @db.VarChar(36)
  ab_camp_user_id2 String   @db.VarChar(36)
  created_at       DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_camp_user8 {
  ab_camp_user_id  String   @id @db.VarChar(36)
  ab_camp_user_id2 String   @db.VarChar(36)
  created_at       DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_camp_user9 {
  ab_camp_user_id  String   @id @db.VarChar(36)
  ab_camp_user_id2 String   @db.VarChar(36)
  created_at       DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user2 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user3 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user4 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user5 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user6 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user7 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user8 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user9 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user10 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user11 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user12 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user13 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user14 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user15 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user16 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user17 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user18 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user19 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user20 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user21 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user22 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user23 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user24 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user25 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user26 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user27 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user28 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user29 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user30 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user31 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user32 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user33 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user34 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user35 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user36 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user37 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user38 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user39 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user40 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user41 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user42 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user43 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user44 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user45 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user46 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user47 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_camp_user48 {
  ab_training_env_id String   @id @db.VarChar(36)
  ab_camp_user_id    String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env2 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env3 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env4 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env5 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env6 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env7 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env8 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env9 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env10 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env11 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env12 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env13 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env14 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_training_env {
  ab_training_env_id  String   @id @db.VarChar(36)
  ab_training_env_id2 String   @db.VarChar(36)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_training_env2 {
  ab_training_env_id  String   @id @db.VarChar(36)
  ab_training_env_id2 String   @db.VarChar(36)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_training_env3 {
  ab_training_env_id  String   @id @db.VarChar(36)
  ab_training_env_id2 String   @db.VarChar(36)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_training_env4 {
  ab_training_env_id  String   @id @db.VarChar(36)
  ab_training_env_id2 String   @db.VarChar(36)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_training_env5 {
  ab_training_env_id  String   @id @db.VarChar(36)
  ab_training_env_id2 String   @db.VarChar(36)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_training_env6 {
  ab_training_env_id  String   @id @db.VarChar(36)
  ab_training_env_id2 String   @db.VarChar(36)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_training_env7 {
  ab_training_env_id  String   @id @db.VarChar(36)
  ab_training_env_id2 String   @db.VarChar(36)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_training_env8 {
  ab_training_env_id  String   @id @db.VarChar(36)
  ab_training_env_id2 String   @db.VarChar(36)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_training_env9 {
  ab_training_env_id  String   @id @db.VarChar(36)
  ab_training_env_id2 String   @db.VarChar(36)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_training_env10 {
  ab_training_env_id  String   @id @db.VarChar(36)
  ab_training_env_id2 String   @db.VarChar(36)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_training_env11 {
  ab_training_env_id  String   @id @db.VarChar(36)
  ab_training_env_id2 String   @db.VarChar(36)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_training_env12 {
  ab_training_env_id  String   @id @db.VarChar(36)
  ab_training_env_id2 String   @db.VarChar(36)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_training_env13 {
  ab_training_env_id  String   @id @db.VarChar(36)
  ab_training_env_id2 String   @db.VarChar(36)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
}

model ab_training_env_ab_training_env14 {
  ab_training_env_id  String   @id @db.VarChar(36)
  ab_training_env_id2 String   @db.VarChar(36)
  created_at          DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env1 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env33 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env34 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env35 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env36 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env37 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env38 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env39 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env40 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env41 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env42 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env43 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env44 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env45 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env46 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env47 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env48 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env49 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env50 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env51 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env52 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env53 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env54 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env55 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env56 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env57 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env58 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env59 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

model ab_camp_user_ab_training_env60 {
  ab_camp_user_id    String   @id @db.VarChar(36)
  ab_training_env_id String   @db.VarChar(36)
  created_at         DateTime @default(now()) @db.Timestamptz(6)
}

enum SchedulingType1 {
  ROUND_ROBIN @map("roundRobin")
  COLLECTIVE  @map("collective")
  MANAGED     @map("managed")
}

enum PeriodType {
  UNLIMITED @map("unlimited")
  ROLLING   @map("rolling")
  RANGE     @map("range")
}

model Host {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  eventType   EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  eventTypeId Int
  isFixed     Boolean   @default(false)

  @@id([userId, eventTypeId])
  @@index([userId])
  @@index([eventTypeId])
}

model EventType {
  id                              Int                     @id @default(autoincrement())
  /// @zod.min(1)
  title                           String
  /// @zod.custom(imports.eventTypeSlug)
  slug                            String
  description                     String?
  position                        Int                     @default(0)
  /// @zod.custom(imports.eventTypeLocations)
  locations                       Json?
  /// @zod.min(1)
  length                          Int
  offsetStart                     Int                     @default(0)
  hidden                          Boolean                 @default(false)
  hosts                           Host[]
  users                           User[]                  @relation("user_eventtype")
  owner                           User?                   @relation("owner", fields: [userId], references: [id], onDelete: Cascade)
  userId                          Int?
  team                            Team?                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId                          Int?
  hashedLink                      HashedLink?
  bookings                        Booking[]
  availability                    Availability[]
  webhooks                        Webhook[]
  destinationCalendar             DestinationCalendar?
  eventName                       String?
  customInputs                    EventTypeCustomInput[]
  parentId                        Int?
  parent                          EventType?              @relation("managed_eventtype", fields: [parentId], references: [id], onDelete: Cascade)
  children                        EventType[]             @relation("managed_eventtype")
  /// @zod.custom(imports.eventTypeBookingFields)
  bookingFields                   Json?
  timeZone                        String?
  periodType                      PeriodType              @default(UNLIMITED)
  /// @zod.custom(imports.coerceToDate)
  periodStartDate                 DateTime?
  /// @zod.custom(imports.coerceToDate)
  periodEndDate                   DateTime?
  periodDays                      Int?
  periodCountCalendarDays         Boolean?
  requiresConfirmation            Boolean                 @default(false)
  requiresBookerEmailVerification Boolean                 @default(false)
  /// @zod.custom(imports.recurringEventType)
  recurringEvent                  Json?
  disableGuests                   Boolean                 @default(false)
  hideCalendarNotes               Boolean                 @default(false)
  /// @zod.min(0)
  minimumBookingNotice            Int                     @default(120)
  beforeEventBuffer               Int                     @default(0)
  afterEventBuffer                Int                     @default(0)
  seatsPerTimeSlot                Int?
  seatsShowAttendees              Boolean?                @default(false)
  seatsShowAvailabilityCount      Boolean?                @default(true)
  schedulingType                  SchedulingType1?
  schedule                        Schedule?               @relation(fields: [scheduleId], references: [id])
  scheduleId                      Int?
  // price is deprecated. It has now moved to metadata.apps.stripe.price. Plan to drop this column.
  price                           Int                     @default(0)
  // currency is deprecated. It has now moved to metadata.apps.stripe.currency. Plan to drop this column.
  currency                        String                  @default("usd")
  slotInterval                    Int?
  /// @zod.custom(imports.EventTypeMetaDataSchema)
  metadata                        Json?
  /// @zod.custom(imports.successRedirectUrl)
  successRedirectUrl              String?
  workflows                       WorkflowsOnEventTypes[]
  /// @zod.custom(imports.intervalLimitsType)
  bookingLimits                   Json?
  /// @zod.custom(imports.intervalLimitsType)
  durationLimits                  Json?

  @@unique([userId, slug])
  @@unique([teamId, slug])
  @@unique([userId, parentId])
  @@index([userId])
  @@index([teamId])
}

model Credential {
  id                   Int                   @id @default(autoincrement())
  // @@type is deprecated
  type                 String
  key                  Json
  user                 User?                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               Int?
  team                 Team?                 @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId               Int?
  app                  App?                  @relation(fields: [appId], references: [slug], onDelete: Cascade)
  // How to make it a required column?
  appId                String?
  destinationCalendars DestinationCalendar[]
  selectedCalendars    SelectedCalendar[]
  invalid              Boolean?              @default(false)
  CalendarCache        CalendarCache[]

  @@index([userId])
  @@index([appId])
}

enum IdentityProvider {
  CAL
  GOOGLE
  SAML
}

model DestinationCalendar {
  id           Int         @id @default(autoincrement())
  integration  String
  externalId   String
  user         User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int?        @unique
  booking      Booking[]
  eventType    EventType?  @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  eventTypeId  Int?        @unique
  credentialId Int?
  credential   Credential? @relation(fields: [credentialId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventTypeId])
  @@index([credentialId])
}

enum UserPermissionRole {
  USER
  ADMIN
}

model User {
  id                  Int                  @id @default(autoincrement())
  username            String?
  name                String?
  /// @zod.email()
  email               String
  emailVerified       DateTime?
  password            String?
  bio                 String?
  avatar              String?
  timeZone            String               @default("Europe/London")
  weekStart           String               @default("Sunday")
  // DEPRECATED - TO BE REMOVED
  startTime           Int                  @default(0)
  endTime             Int                  @default(1440)
  // </DEPRECATED>
  bufferTime          Int                  @default(0)
  hideBranding        Boolean              @default(false)
  theme               String?
  createdDate         DateTime             @default(now()) @map(name: "created")
  trialEndsAt         DateTime?
  eventTypes          EventType[]          @relation("user_eventtype")
  credentials         Credential[]
  teams               Membership[]
  bookings            Booking[]
  schedules           Schedule[]
  defaultScheduleId   Int?
  selectedCalendars   SelectedCalendar[]
  completedOnboarding Boolean              @default(false)
  locale              String?
  timeFormat          Int?                 @default(12)
  twoFactorSecret     String?
  twoFactorEnabled    Boolean              @default(false)
  backupCodes         String?
  identityProvider    IdentityProvider     @default(CAL)
  identityProviderId  String?
  availability        Availability[]
  invitedTo           Int?
  webhooks            Webhook[]
  brandColor          String               @default("#292929")
  darkBrandColor      String               @default("#fafafa")
  // the location where the events will end up
  destinationCalendar DestinationCalendar?
  away                Boolean              @default(false)
  // participate in dynamic group booking or not
  allowDynamicBooking Boolean?             @default(true)

  // participate in SEO indexing or not
  allowSEOIndexing Boolean? @default(true)

  // receive monthly digest email for teams or not
  receiveMonthlyDigestEmail Boolean? @default(true)

  /// @zod.custom(imports.userMetadata)
  metadata             Json?
  verified             Boolean?                @default(false)
  role                 UserPermissionRole      @default(USER)
  disableImpersonation Boolean                 @default(false)
  impersonatedUsers    Impersonations[]        @relation("impersonated_user")
  impersonatedBy       Impersonations[]        @relation("impersonated_by_user")
  apiKeys              ApiKey[]
  accounts             Account[]
  sessions             Session[]
  Feedback             Feedback[]
  ownedEventTypes      EventType[]             @relation("owner")
  workflows            Workflow[]
  routingForms         App_RoutingForms_Form[] @relation("routing-form")
  verifiedNumbers      VerifiedNumber[]
  hosts                Host[]
  organizationId       Int?
  organization         Team?                   @relation("scope", fields: [organizationId], references: [id], onDelete: SetNull)
  accessCodes          AccessCode[]
  // Linking account code for orgs v2
  //linkedByUserId       Int?
  //linkedBy             User?                   @relation("linked_account", fields: [linkedByUserId], references: [id], onDelete: Cascade)
  //linkedUsers          User[]                  @relation("linked_account")*/

  @@unique([email])
  @@unique([email, username])
  @@unique([username, organizationId])
  @@index([emailVerified])
  @@index([identityProvider])
  @@index([identityProviderId])
  @@map(name: "users1")
}

model Team {
  id                  Int                     @id @default(autoincrement())
  /// @zod.min(1)
  name                String
  /// @zod.min(1)
  slug                String?
  logo                String?
  appLogo             String?
  appIconLogo         String?
  bio                 String?
  hideBranding        Boolean                 @default(false)
  isPrivate           Boolean                 @default(false)
  hideBookATeamMember Boolean                 @default(false)
  members             Membership[]
  eventTypes          EventType[]
  workflows           Workflow[]
  createdAt           DateTime                @default(now())
  /// @zod.custom(imports.teamMetadataSchema)
  metadata            Json?
  theme               String?
  brandColor          String                  @default("#292929")
  darkBrandColor      String                  @default("#fafafa")
  verifiedNumbers     VerifiedNumber[]
  parentId            Int?
  parent              Team?                   @relation("organization", fields: [parentId], references: [id], onDelete: Cascade)
  children            Team[]                  @relation("organization")
  orgUsers            User[]                  @relation("scope")
  inviteTokens        VerificationToken[]
  webhooks            Webhook[]
  timeFormat          Int?
  timeZone            String                  @default("Europe/London")
  weekStart           String                  @default("Sunday")
  routingForms        App_RoutingForms_Form[]
  apiKeys             ApiKey[]
  credentials         Credential[]
  accessCodes         AccessCode[]

  @@unique([slug, parentId])
}

enum MembershipRole {
  MEMBER
  ADMIN
  OWNER
}

model Membership {
  id                   Int            @id @default(autoincrement())
  teamId               Int
  userId               Int
  accepted             Boolean        @default(false)
  role                 MembershipRole
  team                 Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user                 User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  disableImpersonation Boolean        @default(false)

  @@unique([userId, teamId])
  @@index([teamId])
  @@index([userId])
}

model VerificationToken {
  id            Int      @id @default(autoincrement())
  identifier    String
  token         String   @unique
  expires       DateTime
  expiresInDays Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  teamId        Int?
  team          Team?    @relation(fields: [teamId], references: [id])

  @@unique([identifier, token])
  @@index([token])
}

model BookingReference {
  id                 Int      @id @default(autoincrement())
  /// @zod.min(1)
  type               String
  /// @zod.min(1)
  uid                String
  meetingId          String?
  meetingPassword    String?
  meetingUrl         String?
  booking            Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId          Int?
  externalCalendarId String?
  deleted            Boolean?
  credentialId       Int?

  @@index([bookingId])
  @@index([credentialId])
  @@index([type])
  @@index([uid])
}

model Attendee {
  id          Int          @id @default(autoincrement())
  email       String
  name        String
  timeZone    String
  locale      String?      @default("en")
  booking     Booking?     @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId   Int?
  bookingSeat BookingSeat?

  @@index([email])
  @@index([bookingId])
}

enum BookingStatus {
  CANCELLED @map("cancelled")
  ACCEPTED  @map("accepted")
  REJECTED  @map("rejected")
  PENDING   @map("pending")
}

model Booking {
  id                    Int                  @id @default(autoincrement())
  uid                   String               @unique
  user                  User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                Int?
  references            BookingReference[]
  eventType             EventType?           @relation(fields: [eventTypeId], references: [id])
  eventTypeId           Int?
  title                 String
  description           String?
  customInputs          Json?
  /// @zod.custom(imports.bookingResponses)
  responses             Json?
  startTime             DateTime
  endTime               DateTime
  attendees             Attendee[]
  location              String?
  createdAt             DateTime             @default(now())
  updatedAt             DateTime?
  status                BookingStatus        @default(ACCEPTED)
  paid                  Boolean              @default(false)
  payment               Payment[]
  destinationCalendar   DestinationCalendar? @relation(fields: [destinationCalendarId], references: [id])
  destinationCalendarId Int?
  cancellationReason    String?
  rejectionReason       String?
  dynamicEventSlugRef   String?
  dynamicGroupSlugRef   String?
  rescheduled           Boolean?
  fromReschedule        String?
  recurringEventId      String?
  smsReminderNumber     String?
  workflowReminders     WorkflowReminder[]
  scheduledJobs         String[]
  seatsReferences       BookingSeat[]
  /// @zod.custom(imports.bookingMetadataSchema)
  metadata              Json?
  isRecorded            Boolean              @default(false)

  @@index([eventTypeId])
  @@index([userId])
  @@index([destinationCalendarId])
  @@index([recurringEventId])
  @@index([uid])
  @@index([status])
}

model Schedule {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  eventType    EventType[]
  name         String
  timeZone     String?
  availability Availability[]

  @@index([userId])
}

model Availability {
  id          Int        @id @default(autoincrement())
  user        User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int?
  eventType   EventType? @relation(fields: [eventTypeId], references: [id])
  eventTypeId Int?
  days        Int[]
  startTime   DateTime   @db.Time
  endTime     DateTime   @db.Time
  date        DateTime?  @db.Date
  Schedule    Schedule?  @relation(fields: [scheduleId], references: [id])
  scheduleId  Int?

  @@index([userId])
  @@index([eventTypeId])
  @@index([scheduleId])
}

model SelectedCalendar {
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  integration  String
  externalId   String
  credential   Credential? @relation(fields: [credentialId], references: [id], onDelete: Cascade)
  credentialId Int?

  @@id([userId, integration, externalId])
  @@index([userId])
  @@index([integration])
  @@index([externalId])
}

enum EventTypeCustomInputType {
  TEXT     @map("text")
  TEXTLONG @map("textLong")
  NUMBER   @map("number")
  BOOL     @map("bool")
  RADIO    @map("radio")
  PHONE    @map("phone")
}

model EventTypeCustomInput {
  id          Int                      @id @default(autoincrement())
  eventTypeId Int
  eventType   EventType                @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  label       String
  type        EventTypeCustomInputType
  /// @zod.custom(imports.customInputOptionSchema)
  options     Json?
  required    Boolean
  placeholder String                   @default("")

  @@index([eventTypeId])
}

model ResetPasswordRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String
  expires   DateTime
}

enum ReminderType {
  PENDING_BOOKING_CONFIRMATION
}

model ReminderMail {
  id             Int          @id @default(autoincrement())
  referenceId    Int
  reminderType   ReminderType
  elapsedMinutes Int
  createdAt      DateTime     @default(now())

  @@index([referenceId])
  @@index([reminderType])
}

model Payment {
  id            Int            @id @default(autoincrement())
  uid           String         @unique
  app           App?           @relation(fields: [appId], references: [slug], onDelete: Cascade)
  appId         String?
  bookingId     Int
  booking       Booking?       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  amount        Int
  fee           Int
  currency      String
  success       Boolean
  refunded      Boolean
  data          Json
  externalId    String         @unique
  paymentOption PaymentOption? @default(ON_BOOKING)

  @@index([bookingId])
  @@index([externalId])
}

enum PaymentOption {
  ON_BOOKING
  HOLD
}

enum WebhookTriggerEvents {
  BOOKING_CREATED
  BOOKING_PAID
  BOOKING_RESCHEDULED
  BOOKING_REQUESTED
  BOOKING_CANCELLED
  BOOKING_REJECTED
  FORM_SUBMITTED
  MEETING_ENDED
  RECORDING_READY
}

model Webhook {
  id              String                 @id @unique
  userId          Int?
  teamId          Int?
  eventTypeId     Int?
  /// @zod.url()
  subscriberUrl   String
  payloadTemplate String?
  createdAt       DateTime               @default(now())
  active          Boolean                @default(true)
  eventTriggers   WebhookTriggerEvents[]
  user            User?                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  team            Team?                  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  eventType       EventType?             @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  app             App?                   @relation(fields: [appId], references: [slug], onDelete: Cascade)
  appId           String?
  secret          String?

  @@unique([userId, subscriberUrl], name: "courseIdentifier")
}

model Impersonations {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime @default(now())
  impersonatedUser   User     @relation("impersonated_user", fields: [impersonatedUserId], references: [id], onDelete: Cascade)
  impersonatedBy     User     @relation("impersonated_by_user", fields: [impersonatedById], references: [id], onDelete: Cascade)
  impersonatedUserId Int
  impersonatedById   Int
}

model ApiKey {
  id         String    @id @unique @default(cuid())
  userId     Int
  teamId     Int?
  note       String?
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?
  hashedKey  String    @unique()
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team       Team?     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  app        App?      @relation(fields: [appId], references: [slug], onDelete: Cascade)
  appId      String?

  @@index([userId])
}

model HashedLink {
  id          Int       @id @default(autoincrement())
  link        String    @unique()
  eventType   EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  eventTypeId Int       @unique
}

model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([type])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum AppCategories {
  calendar
  messaging
  other
  payment
  video // deprecated, please use 'conferencing' instead
  web3 // deprecated, we should no longer have any web3 apps
  automation
  analytics
  // Wherever video is in use, conferencing should also be used for legacy apps can have it.
  conferencing
  crm
}

model App {
  // The slug for the app store public page inside `/apps/[slug]`
  slug        String          @id @unique
  // The directory name for `/packages/app-store/[dirName]`
  dirName     String          @unique
  // Needed API Keys
  keys        Json?
  // One or multiple categories to which this app belongs
  categories  AppCategories[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  credentials Credential[]
  payments    Payment[]
  Webhook     Webhook[]
  ApiKey      ApiKey[]
  enabled     Boolean         @default(false)

  @@index([enabled])
}

model App_RoutingForms_Form {
  id          String                          @id @default(cuid())
  description String?
  position    Int                             @default(0)
  routes      Json?
  createdAt   DateTime                        @default(now())
  updatedAt   DateTime                        @updatedAt
  name        String
  fields      Json?
  user        User                            @relation("routing-form", fields: [userId], references: [id], onDelete: Cascade)
  // This is the user who created the form and also the user who has read-write access to the form
  // If teamId is set, the members of the team would also have access to form readOnly or read-write depending on their permission level as team member.
  userId      Int
  team        Team?                           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId      Int?
  responses   App_RoutingForms_FormResponse[]
  disabled    Boolean                         @default(false)
  /// @zod.custom(imports.RoutingFormSettings)
  settings    Json?

  @@index([userId])
  @@index([disabled])
}

model App_RoutingForms_FormResponse {
  id           Int                   @id @default(autoincrement())
  formFillerId String                @default(cuid())
  form         App_RoutingForms_Form @relation(fields: [formId], references: [id], onDelete: Cascade)
  formId       String
  response     Json
  createdAt    DateTime              @default(now())

  @@unique([formFillerId, formId])
  @@index([formFillerId])
  @@index([formId])
}

model Feedback {
  id      Int      @id @default(autoincrement())
  date    DateTime @default(now())
  userId  Int
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating  String
  comment String?

  @@index([userId])
  @@index([rating])
}

enum WorkflowTriggerEvents {
  BEFORE_EVENT
  EVENT_CANCELLED
  NEW_EVENT
  AFTER_EVENT
  RESCHEDULE_EVENT
}

enum WorkflowActions {
  EMAIL_HOST
  EMAIL_ATTENDEE
  SMS_ATTENDEE
  SMS_NUMBER
  EMAIL_ADDRESS
  WHATSAPP_ATTENDEE
  WHATSAPP_NUMBER
}

model WorkflowStep {
  id                        Int                @id @default(autoincrement())
  stepNumber                Int
  action                    WorkflowActions
  workflowId                Int
  workflow                  Workflow           @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  sendTo                    String?
  reminderBody              String?
  emailSubject              String?
  template                  WorkflowTemplates  @default(REMINDER)
  workflowReminders         WorkflowReminder[]
  numberRequired            Boolean?
  sender                    String?
  numberVerificationPending Boolean            @default(true)
  includeCalendarEvent      Boolean            @default(false)

  @@index([workflowId])
}

model Workflow {
  id       Int                     @id @default(autoincrement())
  position Int                     @default(0)
  name     String
  userId   Int?
  user     User?                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team     Team?                   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   Int?
  activeOn WorkflowsOnEventTypes[]
  trigger  WorkflowTriggerEvents
  time     Int?
  timeUnit TimeUnit?
  steps    WorkflowStep[]

  @@index([userId])
  @@index([teamId])
}

model WorkflowsOnEventTypes {
  id          Int       @id @default(autoincrement())
  workflow    Workflow  @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId  Int
  eventType   EventType @relation(fields: [eventTypeId], references: [id], onDelete: Cascade)
  eventTypeId Int

  @@unique([workflowId, eventTypeId])
  @@index([workflowId])
  @@index([eventTypeId])
}

model Deployment {
  /// This is a single row table, so we use a fixed id
  id              Int       @id @default(1)
  logo            String?
  /// @zod.custom(imports.DeploymentTheme)
  theme           Json?
  licenseKey      String?
  agreedLicenseAt DateTime?
}

enum TimeUnit {
  DAY    @map("day")
  HOUR   @map("hour")
  MINUTE @map("minute")
}

model WorkflowReminder {
  id              Int             @id @default(autoincrement())
  bookingUid      String?
  booking         Booking?        @relation(fields: [bookingUid], references: [uid])
  method          WorkflowMethods
  scheduledDate   DateTime
  referenceId     String?         @unique
  scheduled       Boolean
  workflowStepId  Int?
  workflowStep    WorkflowStep?   @relation(fields: [workflowStepId], references: [id])
  cancelled       Boolean?
  seatReferenceId String?

  @@index([bookingUid])
  @@index([workflowStepId])
  @@index([seatReferenceId])
}

model WebhookScheduledTriggers {
  id            Int       @id @default(autoincrement())
  jobName       String
  subscriberUrl String
  payload       String
  startAfter    DateTime
  retryCount    Int       @default(0)
  createdAt     DateTime? @default(now())
}

enum WorkflowTemplates {
  REMINDER
  CUSTOM
  CANCELLED
  RESCHEDULED
  COMPLETED
}

enum WorkflowMethods {
  EMAIL
  SMS
  WHATSAPP
}

model BookingSeat {
  id           Int      @id @default(autoincrement())
  referenceUid String   @unique
  bookingId    Int
  booking      Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  attendeeId   Int      @unique
  attendee     Attendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)
  data         Json?

  @@index([bookingId])
  @@index([attendeeId])
}

model VerifiedNumber {
  id          Int    @id @default(autoincrement())
  userId      Int?
  user        User?  @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId      Int?
  team        Team?  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  phoneNumber String

  @@index([userId])
  @@index([teamId])
}

model Feature {
  // The feature slug, ex: 'v2-workflows'
  slug        String       @id @unique
  // If the feature is currently enabled
  enabled     Boolean      @default(false)
  // A short description of the feature
  description String?
  // The type of feature flag
  type        FeatureType? @default(RELEASE)
  // If the flag is considered stale
  stale       Boolean?     @default(false)
  lastUsedAt  DateTime?
  createdAt   DateTime?    @default(now())
  updatedAt   DateTime?    @default(now()) @updatedAt
  updatedBy   Int?

  @@index([enabled])
  @@index([stale])
}

enum FeatureType {
  RELEASE
  EXPERIMENT
  OPERATIONAL
  KILL_SWITCH
  PERMISSION
}

model SelectedSlots {
  id               Int      @id @default(autoincrement())
  eventTypeId      Int
  userId           Int
  slotUtcStartDate DateTime
  slotUtcEndDate   DateTime
  uid              String
  releaseAt        DateTime
  isSeat           Boolean  @default(false)

  @@unique(fields: [userId, slotUtcStartDate, slotUtcEndDate, uid], name: "selectedSlotUnique")
}

model OAuthClient {
  clientId     String       @id @unique
  redirectUri  String
  clientSecret String
  name         String
  logo         String?
  accessCodes  AccessCode[]
}

model AccessCode {
  id        Int           @id @default(autoincrement())
  code      String
  clientId  String?
  client    OAuthClient?  @relation(fields: [clientId], references: [clientId], onDelete: Cascade)
  expiresAt DateTime
  scopes    AccessScope[]
  userId    Int?
  user      User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamId    Int?
  team      Team?         @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

enum AccessScope {
  READ_BOOKING
  READ_PROFILE
}

view BookingTimeStatus {
  id            Int            @unique
  uid           String?
  eventTypeId   Int?
  title         String?
  description   String?
  startTime     DateTime?
  endTime       DateTime?
  createdAt     DateTime?
  location      String?
  paid          Boolean?
  status        BookingStatus?
  rescheduled   Boolean?
  userId        Int?
  teamId        Int?
  eventLength   Int?
  timeStatus    String?
  eventParentId Int?
}

model CalendarCache {
  key          String
  value        Json
  expiresAt    DateTime
  credentialId Int
  credential   Credential? @relation(fields: [credentialId], references: [id], onDelete: Cascade)

  @@id([credentialId, key])
  @@unique([credentialId, key])
}

enum PipelineTriggers {
  responseCreated
  responseUpdated
  responseFinished
}

enum WehbhookSource {
  user
  zapier
}

model Webhooks {
  id            String             @id @default(cuid())
  name          String?
  createdAt     DateTime           @default(now()) @map(name: "created_at")
  updatedAt     DateTime           @updatedAt @map(name: "updated_at")
  url           String
  source        WehbhookSource     @default(user)
  environment   Environment        @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String
  triggers      PipelineTriggers[]
  surveyIds     String[]
}

model Attribute {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now()) @map(name: "created_at")
  updatedAt        DateTime       @updatedAt @map(name: "updated_at")
  attributeClass   AttributeClass @relation(fields: [attributeClassId], references: [id], onDelete: Cascade)
  attributeClassId String
  person           Person         @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId         String
  value            String

  @@unique([attributeClassId, personId])
}

enum AttributeType {
  code
  noCode
  automatic
}

model AttributeClass {
  id               String                  @id @default(cuid())
  createdAt        DateTime                @default(now()) @map(name: "created_at")
  updatedAt        DateTime                @updatedAt @map(name: "updated_at")
  name             String
  description      String?
  archived         Boolean                 @default(false)
  type             AttributeType
  environment      Environment             @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId    String
  attributes       Attribute[]
  attributeFilters SurveyAttributeFilter[]

  @@unique([name, environmentId])
}

model Person {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String
  responses     Response[]
  sessions      Sessions[]
  attributes    Attribute[]
  displays      Display[]
}

model Response {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now()) @map(name: "created_at")
  updatedAt        DateTime          @updatedAt @map(name: "updated_at")
  finished         Boolean           @default(false)
  survey           Survey            @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId         String
  person           Person?           @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId         String?
  notes            ResponseNote[]
  /// @zod.custom(imports.ZResponseData)
  /// [ResponseData]
  data             Json              @default("{}")
  /// @zod.custom(imports.ZResponseMeta)
  /// [ResponseMeta]
  meta             Json              @default("{}")
  tags             TagsOnResponses[]
  /// @zod.custom(imports.ZResponsePersonAttributes)
  /// [ResponsePersonAttributes]
  personAttributes Json?
}

model ResponseNote {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId String
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  text       String
  isResolved Boolean  @default(false)
  isEdited   Boolean  @default(false)
}

model Tag {
  id            String            @id @default(cuid())
  createdAt     DateTime          @default(now()) @map(name: "created_at")
  updatedAt     DateTime          @updatedAt @map(name: "updated_at")
  name          String
  responses     TagsOnResponses[]
  environmentId String
  environment   Environment       @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  Post2         Post2?            @relation(fields: [post2Id], references: [id])
  post2Id       Int?

  @@unique([environmentId, name])
}

model TagsOnResponses {
  responseId String
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  tagId      String
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([responseId, tagId])
}

enum SurveyStatus {
  draft
  inProgress
  paused
  completed
}

enum DisplayStatus {
  seen
  responded
}

model Display {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now()) @map(name: "created_at")
  updatedAt DateTime      @updatedAt @map(name: "updated_at")
  survey    Survey        @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId  String
  person    Person?       @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId  String?
  status    DisplayStatus @default(seen)
}

model SurveyTrigger {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime   @updatedAt @map(name: "updated_at")
  survey       Survey     @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId     String
  eventClass   EventClass @relation(fields: [eventClassId], references: [id], onDelete: Cascade)
  eventClassId String

  @@unique([surveyId, eventClassId])
}

enum SurveyAttributeFilterCondition {
  equals
  notEquals
}

model SurveyAttributeFilter {
  id               String                         @id @default(cuid())
  createdAt        DateTime                       @default(now()) @map(name: "created_at")
  updatedAt        DateTime                       @updatedAt @map(name: "updated_at")
  attributeClass   AttributeClass                 @relation(fields: [attributeClassId], references: [id], onDelete: Cascade)
  attributeClassId String
  survey           Survey                         @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId         String
  condition        SurveyAttributeFilterCondition
  value            String

  @@unique([surveyId, attributeClassId])
}

enum SurveyType {
  email
  link
  mobile
  web
}

enum displayOptions {
  displayOnce
  displayMultiple
  respondMultiple
}

model Survey {
  id                  String                  @id @default(cuid())
  createdAt           DateTime                @default(now()) @map(name: "created_at")
  updatedAt           DateTime                @updatedAt @map(name: "updated_at")
  name                String
  redirectUrl         String?
  type                SurveyType              @default(web)
  environment         Environment             @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId       String
  status              SurveyStatus            @default(draft)
  /// @zod.custom(imports.ZSurveyQuestions)
  /// [SurveyQuestions]
  questions           Json                    @default("[]")
  /// @zod.custom(imports.ZSurveyThankYouCard)
  /// [SurveyThankYouCard]
  thankYouCard        Json                    @default("{\"enabled\": false}")
  responses           Response[]
  displayOption       displayOptions          @default(displayOnce)
  recontactDays       Int?
  triggers            SurveyTrigger[]
  attributeFilters    SurveyAttributeFilter[]
  displays            Display[]
  autoClose           Int?
  delay               Int                     @default(0)
  autoComplete        Int?
  closeOnDate         DateTime?
  /// @zod.custom(imports.ZSurveyClosedMessage)
  /// [SurveyClosedMessage]
  surveyClosedMessage Json?
  /// @zod.custom(imports.ZSurveyVerifyEmail)
  /// [SurveyVerifyEmail]
  verifyEmail         Json?
}

model Event {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now()) @map(name: "created_at")
  eventClass   EventClass? @relation(fields: [eventClassId], references: [id])
  eventClassId String?
  session      Sessions    @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId    String
  /// @zod.custom(imports.ZEventProperties)
  /// @zod.custom(imports.ZEventProperties)
  /// [EventProperties]
  properties   Json        @default("{}")
}

enum EventTypes {
  code
  noCode
  automatic
}

model EventClass {
  id            String          @id @default(cuid())
  createdAt     DateTime        @default(now()) @map(name: "created_at")
  updatedAt     DateTime        @updatedAt @map(name: "updated_at")
  name          String
  description   String?
  type          EventTypes
  events        Event[]
  /// @zod.custom(imports.ZActionClassNoCodeConfig)
  /// [EventClassNoCodeConfig]
  noCodeConfig  Json?
  environment   Environment     @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String
  surveys       SurveyTrigger[]

  @@unique([name, environmentId])
}

model Sessions {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  expiresAt DateTime @default(now())
  person    Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId  String
  events    Event[]
}

enum EnvironmentType {
  production
  development
}

enum IntegrationType {
  googleSheets
}

model Integration {
  id            String          @id @default(cuid())
  type          IntegrationType
  environmentId String
  /// @zod.custom(imports.ZIntegrationConfig)
  /// [IntegrationConfig]
  config        Json
  environment   Environment     @relation(fields: [environmentId], references: [id])

  @@unique([type, environmentId])
}

model Environment {
  id                   String           @id @default(cuid())
  createdAt            DateTime         @default(now()) @map(name: "created_at")
  updatedAt            DateTime         @updatedAt @map(name: "updated_at")
  type                 EnvironmentType
  product              Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId            String
  widgetSetupCompleted Boolean          @default(false)
  surveys              Survey[]
  people               Person[]
  eventClasses         EventClass[]
  attributeClasses     AttributeClass[]
  apiKeys              ApiKeys[]
  webhooks             Webhooks[]
  tags                 Tag[]
  integration          Integration[]
}

enum WidgetPlacement {
  bottomLeft
  bottomRight
  topLeft
  topRight
  center
}

model Product {
  id                   String          @id @default(cuid())
  createdAt            DateTime        @default(now()) @map(name: "created_at")
  updatedAt            DateTime        @updatedAt @map(name: "updated_at")
  name                 String
  team                 Teams           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId               String
  environments         Environment[]
  brandColor           String          @default("#64748b")
  highlightBorderColor String?
  recontactDays        Int             @default(7)
  formbricksSignature  Boolean         @default(true)
  placement            WidgetPlacement @default(bottomRight)
  clickOutsideClose    Boolean         @default(true)
  darkOverlay          Boolean         @default(false)
}

enum Plan {
  free
  pro
}

model Teams {
  id               String        @id @default(cuid())
  createdAt        DateTime      @default(now()) @map(name: "created_at")
  updatedAt        DateTime      @updatedAt @map(name: "updated_at")
  name             String
  memberships      Memberships[]
  products         Product[]
  plan             Plan          @default(free)
  stripeCustomerId String?
  invites          Invite[]
}

enum MembershipRoles {
  owner
  admin
  editor
  developer
  viewer
}

model Memberships {
  team     Teams          @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String
  user     Users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  accepted Boolean        @default(false)
  role     MembershipRole

  @@id([userId, teamId])
}

model Invite {
  id         String          @id @default(uuid())
  email      String
  name       String?
  team       Teams           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId     String
  creator    Users           @relation("inviteCreatedBy", fields: [creatorId], references: [id])
  creatorId  String
  acceptor   Users?          @relation("inviteAcceptedBy", fields: [acceptorId], references: [id], onDelete: Cascade)
  acceptorId String?
  accepted   Boolean         @default(false)
  createdAt  DateTime        @default(now())
  expiresAt  DateTime
  role       MembershipRoles @default(admin)

  @@index([email, teamId], name: "email_teamId_unique")
}

model ApiKeys {
  id            String      @id @unique @default(cuid())
  createdAt     DateTime    @default(now())
  lastUsedAt    DateTime?
  label         String?
  hashedKey     String      @unique()
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String
}

enum IdentityProviders {
  email
  github
  google
}

model Accounts {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")
  user              Users?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?  @db.Text
  refresh_token     String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}

enum Role {
  project_manager
  engineer
  founder
  marketing_specialist
  other
}

enum Objective {
  increase_conversion
  improve_user_retention
  increase_user_adoption
  sharpen_marketing_messaging
  support_sales
  other
}

enum Intention {
  survey_user_segments
  survey_at_specific_point_in_user_journey
  enrich_customer_profiles
  collect_all_user_feedback_on_one_platform
  other
}

model Users {
  id                        String            @id @default(cuid())
  createdAt                 DateTime          @default(now()) @map(name: "created_at")
  updatedAt                 DateTime          @updatedAt @map(name: "updated_at")
  name                      String?
  email                     String            @unique
  emailVerified             DateTime?         @map(name: "email_verified")
  password                  String?
  onboardingCompleted       Boolean           @default(false)
  identityProvider          IdentityProviders @default(email)
  identityProviderAccountId String?
  memberships               Memberships[]
  accounts                  Accounts[]
  responseNotes             ResponseNote[]
  groupId                   String?
  invitesCreated            Invite[]          @relation("inviteCreatedBy")
  invitesAccepted           Invite[]          @relation("inviteAcceptedBy")
  role                      Role?
  objective                 Objective?
  /// @zod.custom(imports.ZUserNotificationSettings)
  /// @zod.custom(imports.ZUserNotificationSettings)
  /// [UserNotificationSettings]
  notificationSettings      Json              @default("{}")
  workouts                  Workout[]
  fitnessData               FitnessData?
}

model FitnessData {
  id     String @id @default(uuid())
  ftp    Int
  user   Users  @relation(fields: [userId], references: [id])
  userId String @unique
}

model Workout {
  id     String              @id @default(uuid())
  name   String
  parts  SteadyWorkoutPart[]
  user   Users               @relation(fields: [userId], references: [id])
  userId String
}

model SteadyWorkoutPart {
  index     Int
  duration  Int
  power     Int
  workout   Workout @relation(fields: [workoutId], references: [id])
  workoutId String

  @@unique([index, workoutId])
}

model ClaimableCustomPlan {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  claimedAt    DateTime?
  name         String
  description  String?
  price        Int
  currency     String
  workspaceId  String    @unique
  //workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  chatsLimit   Int
  storageLimit Int
  seatsLimit   Int
  isYearly     Boolean   @default(false)
  companyName  String?
  vatType      String?
  vatValue     String?
}

model ChatSession {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  state     Json
}

model ThemeTemplate {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  name        String
  theme       Json
  //workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String
}

enum WorkspaceRole {
  ADMIN
  MEMBER
  GUEST
}

enum GraphNavigation {
  MOUSE
  TRACKPAD
}

enum Plans {
  FREE
  STARTER
  PRO
  LIFETIME
  OFFERED
  CUSTOM
  UNLIMITED
}

enum CollaborationType {
  READ
  WRITE
  FULL_ACCESS
}

model DashboardFolder {
  id             String            @id @default(cuid())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now()) @updatedAt
  name           String
  parentFolderId String?
  workspaceId    String
  parentFolder   DashboardFolder?  @relation("ParentChild", fields: [parentFolderId], references: [id])
  //workspace      Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  childrenFolder DashboardFolder[] @relation("ParentChild")
  typebots       Typebot[]
}

model Typebot {
  id                      String                    @id @default(cuid())
  version                 String?
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @default(now()) @updatedAt
  icon                    String?
  name                    String
  folderId                String?
  groups                  Json
  variables               Json
  edges                   Json
  theme                   Json
  selectedThemeTemplateId String?
  settings                Json
  publicId                String?                   @unique
  customDomain            String?                   @unique
  workspaceId             String
  resultsTablePreferences Json?
  folder                  DashboardFolder?          @relation(fields: [folderId], references: [id])
  //workspace               Workspace                 @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  collaborators           CollaboratorsOnTypebots[]
  invitations             Invitation[]
  publishedTypebot        PublicTypebot?
  results                 Result[]
  //webhooks                Webhook[]
  isArchived              Boolean                   @default(false)
  isClosed                Boolean                   @default(false)
  whatsAppCredentialsId   String?

  @@index([workspaceId])
  @@index([isArchived, createdAt(sort: Desc)])
}

model Invitation {
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt
  email     String
  typebotId String
  type      CollaborationType
  typebot   Typebot           @relation(fields: [typebotId], references: [id], onDelete: Cascade)

  @@unique([email, typebotId])
}

model CollaboratorsOnTypebots {
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now()) @updatedAt
  userId    String
  typebotId String
  type      CollaborationType
  typebot   Typebot           @relation(fields: [typebotId], references: [id], onDelete: Cascade)
  //user      Users              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, typebotId])
}

model PublicTypebot {
  id        String   @id @default(cuid())
  version   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  typebotId String   @unique
  groups    Json
  variables Json
  edges     Json
  theme     Json
  settings  Json
  typebot   Typebot  @relation(fields: [typebotId], references: [id], onDelete: Cascade)
}

model Result {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  typebotId   String
  variables   Json
  isCompleted Boolean
  hasStarted  Boolean?
  isArchived  Boolean? @default(false)
  typebot     Typebot  @relation(fields: [typebotId], references: [id], onDelete: Cascade)
  answers     Answer[]
  logs        Log[]

  @@index([typebotId, hasStarted, createdAt(sort: Desc)])
  @@index([typebotId, isCompleted])
}

model Log {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  resultId    String
  status      String
  description String
  details     String?
  result      Result   @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@index([resultId])
}

model Answer {
  createdAt   DateTime @default(now()) @updatedAt
  resultId    String
  blockId     String
  itemId      String?
  groupId     String
  variableId  String?
  content     String
  storageUsed Int?
  result      Result   @relation(fields: [resultId], references: [id], onDelete: Cascade)

  @@unique([resultId, blockId, groupId])
  @@index([blockId, itemId])
  @@index([storageUsed])
}

model Coupon {
  userPropertiesToUpdate Json
  code                   String    @id @unique
  dateRedeemed           DateTime?
}

model Coupon1 {
  userPropertiesToUpdate Json
  code                   String    @id @unique
  dateRedeemed           DateTime?
}

model Coupon2 {
  userPropertiesToUpdate Json
  code                   String    @id @unique
  dateRedeemed           DateTime?
}

model Coupon3 {
  userPropertiesToUpdate Json
  code                   String    @id @unique
  dateRedeemed           DateTime?
}

model Coupon4 {
  userPropertiesToUpdate Json
  code                   String    @id @unique
  dateRedeemed           DateTime?
}

model Coupon5 {
  userPropertiesToUpdate Json
  code                   String    @id @unique
  dateRedeemed           DateTime?
}

model Author {
  id                     Int           @id @default(autoincrement())
  name                   String
  username               String        @unique
  email                  String        @unique
  password               String
  bio                    String        @db.Text
  occupation             String        @db.VarChar(100)
  company_name           String        @db.VarChar(100)
  avatar                 String        @db.VarChar(300)
  social                 String        @default("{}") @db.VarChar(500)
  verified               Boolean       @default(false)
  createdAt              DateTime?     @default(now())
  updatedAt              DateTime?     @updatedAt
  verify_attempt_left    Int?          @default(3)
  analytics_id           Int?
  analytics_uuid         String?
  role_id                Int
  login_type             String        @default("credentials")
  last_seen              DateTime?
  register_step          String?       @default("") @db.VarChar(50)
  role                   Role2         @relation(fields: [role_id], references: [id])
  domain                 Domain?
  posts                  Post[]
  setting                Setting?
  subscribers            Subscriber[]
  uploads                Upload[]
  first_post_published   Boolean       @default(false)
  settings_updated       Boolean       @default(false)
  profile_updated        Boolean       @default(false)
  stripe_customer_id     String?
  stripe_subscription_id String?
  Post2                  Post2[]
  Role3                  Role3?        @relation(fields: [role3Id], references: [id])
  role3Id                Int?
  Setting2               Setting2?
  Subscriber2            Subscriber2[]
  Upload2                Upload2[]
  Domain2                Domain2?

  @@index([role_id])
}

model EmailDelivery {
  id                    Int       @id @default(autoincrement())
  template_id           String?
  author_id             Int?
  post_id               Int?
  subscriber_id         Int?
  delivered             Int?
  last_delivery_attempt DateTime?
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @updatedAt
}

model Email {
  template_id String    @id @unique
  subject     String
  body        String    @db.VarChar(4000)
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Permission {
  id               Int                @id @default(autoincrement())
  name             String?            @unique
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  roles            RolePermissions[]
  RolePermissions2 RolePermissions2[]
}

model RolePermissions {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime?    @default(now())
  updatedAt     DateTime?    @updatedAt
  role_id       Int
  permission_id Int
  permission    Permission   @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          Role2        @relation(fields: [role_id], references: [id], onDelete: Cascade)
  Permission2   Permission2? @relation(fields: [permission2Id], references: [id])
  permission2Id Int?
  Role3         Role3?       @relation(fields: [role3Id], references: [id])
  role3Id       Int?

  @@index([permission_id])
  @@index([role_id])
}

model Role2 {
  id               Int                @id @default(autoincrement())
  name             String?            @unique
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  author           Author[]
  permissions      RolePermissions[]
  RolePermissions2 RolePermissions2[]
}

model Setting {
  id                  Int       @id @default(autoincrement())
  site_title          String
  site_tagline        String
  site_email          String
  site_url            String
  site_footer         String
  site_description    String
  subscribe_embed     String
  display_author_info Boolean   @default(false)
  cloudinary_key      String
  cloudinary_name     String
  cloudinary_secret   String
  menu                String    @default("[]") @db.VarChar(500)
  css                 String    @db.VarChar(500)
  theme               String
  client_token        String
  banner              String    @default("{}") @db.VarChar(300)
  site_logo           String    @default("{}") @db.VarChar(300)
  site_favicon        String    @default("{}") @db.VarChar(300)
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @updatedAt
  graphcomment_id     String    @default("")
  intro_dismissed     Boolean
  show_about_page     Boolean   @default(true)
  show_tags_page      Boolean   @default(false)
  design              String    @default("{}") @db.VarChar(300)
  scripts             String?   @db.Text
  author_id           Int       @unique
  author              Author    @relation(fields: [author_id], references: [id], onDelete: Cascade)
  Author2             Author2[]

  @@index([author_id])
}

model Subscriber {
  id                  Int       @id @default(autoincrement())
  email               String
  author_id           Int
  verified            Boolean   @default(false)
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @updatedAt
  verify_attempt_left Int?      @default(3)
  author              Author?   @relation(fields: [author_id], references: [id], onDelete: Cascade)
  Author2             Author2?  @relation(fields: [author2Id], references: [id])
  author2Id           Int?

  @@unique([email, author_id])
  @@index([author_id])
}

model Tag2 {
  name      String    @id @unique
  desc      String?   @default("")
  slug      String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  posts     Post[]
}

model Upload {
  id          Int       @id @default(autoincrement())
  name        String
  url         String
  width       Int
  height      Int
  description String    @default("")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  author_id   Int
  author      Author?   @relation(fields: [author_id], references: [id], onDelete: Cascade)
  Author2     Author2?  @relation(fields: [author2Id], references: [id])
  author2Id   Int?

  @@index([author_id])
}

model Domain {
  id        Int       @id @default(autoincrement())
  name      String
  mapped    Boolean   @default(false)
  ssl       Boolean
  updatedAt DateTime? @updatedAt
  createdAt DateTime? @default(now())
  author_id Int       @unique
  author    Author?   @relation(fields: [author_id], references: [id], onDelete: Cascade)
  Author2   Author2[]
}

model SubscribersDelivery {
  id            Int       @id @default(autoincrement())
  subscriber_id String?
  post_id       Int
  delivered     Boolean
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}

model Post {
  id                 Int       @id @default(autoincrement())
  title              String    @default("")
  sub_title          String    @default("") @db.VarChar(190)
  html               String    @db.Text
  html_draft         String?   @db.Text
  excerpt            String    @default("")
  cover_image        String    @default("") @db.VarChar(255)
  cover_image_width  Int       @default(0)
  cover_image_height Int       @default(0)
  type               String    @default("post")
  featured           Boolean   @default(false)
  status             String    @default("draft")
  slug               String    @default("")
  reading_time       String    @default("")
  publishedAt        DateTime?
  scheduledAt        DateTime?
  updatedAt          DateTime? @updatedAt
  createdAt          DateTime? @default(now())
  author_id          Int
  author             Author?   @relation(fields: [author_id], references: [id], onDelete: Cascade)
  tags               Tag2[]
  page_type          String    @default("default")
  page_data          String    @db.Text
  stats              String    @default("{}")
  Author2            Author2?  @relation(fields: [author2Id], references: [id])
  author2Id          Int?
  Tag3               Tag3?     @relation(fields: [tag3Name], references: [name])
  tag3Name           String?

  @@index([author_id])
}

model Author2 {
  id                     Int          @id @default(autoincrement())
  name                   String
  username               String       @unique
  email                  String       @unique
  password               String
  bio                    String
  occupation             String
  company_name           String
  avatar                 String
  social                 String       @default("{}")
  verified               Boolean      @default(false)
  createdAt              DateTime?    @default(now())
  updatedAt              DateTime?    @updatedAt
  verify_attempt_left    Int?         @default(3)
  posts                  Post[]
  uploads                Upload[]
  analytics_id           Int?
  analytics_uuid         String?
  setting                Setting?     @relation(fields: [settingId], references: [id])
  register_step          String?      @default("")
  role_id                Int
  role                   Role3        @relation(fields: [role_id], references: [id])
  subscribers            Subscriber[]
  login_type             String       @default("credentials")
  domain                 Domain?      @relation(fields: [domainId], references: [id])
  last_seen              DateTime?
  first_post_published   Boolean      @default(false)
  settings_updated       Boolean      @default(false)
  profile_updated        Boolean      @default(false)
  stripe_customer_id     String?
  stripe_subscription_id String?
  settingId              Int?
  domainId               Int?

  @@index([role_id])
}

model EmailDelivery2 {
  id                    Int       @id @default(autoincrement())
  template_id           String?
  author_id             Int?
  post_id               Int?
  subscriber_id         Int?
  delivered             Int?
  last_delivery_attempt DateTime?
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @updatedAt
}

model Email2 {
  template_id String    @id @unique
  subject     String
  body        String
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
}

model Permission2 {
  id        Int               @id @default(autoincrement())
  name      String?           @unique
  createdAt DateTime?         @default(now())
  updatedAt DateTime?         @updatedAt
  roles     RolePermissions[]
}

model Post2 {
  id                 Int       @id @default(autoincrement())
  title              String    @default("")
  sub_title          String    @default("")
  html               String    @default("")
  html_draft         String    @default("")
  excerpt            String    @default("")
  cover_image        String    @default("")
  cover_image_width  Int       @default(0)
  cover_image_height Int       @default(0)
  type               String    @default("post")
  featured           Boolean   @default(false)
  status             String    @default("draft")
  slug               String    @default("")
  reading_time       String    @default("")
  publishedAt        DateTime?
  scheduledAt        DateTime?
  updatedAt          DateTime? @updatedAt
  createdAt          DateTime? @default(now())
  author_id          Int
  author             Author?   @relation(fields: [author_id], references: [id], onDelete: Cascade)
  tags               Tag[]
  page_type          String    @default("default")
  page_data          String    @default("")
  stats              String    @default("{}")

  @@index([author_id])
}

model RolePermissions2 {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime?  @default(now())
  updatedAt     DateTime?  @updatedAt
  role_id       Int
  permission_id Int
  permission    Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  role          Role2      @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@index([role_id])
  @@index([permission_id])
}

model Role3 {
  id          Int               @id @default(autoincrement())
  name        String?           @unique
  createdAt   DateTime?         @default(now())
  updatedAt   DateTime?         @updatedAt
  permissions RolePermissions[]
  author      Author[]
  Author2     Author2[]
}

model Setting2 {
  id                  Int       @id @default(autoincrement())
  site_title          String
  site_tagline        String
  site_email          String
  site_url            String
  site_footer         String
  site_description    String
  subscribe_embed     String
  display_author_info Boolean   @default(false)
  cloudinary_key      String
  cloudinary_name     String
  cloudinary_secret   String
  menu                String    @default("[]")
  css                 String
  theme               String
  client_token        String
  banner              String    @default("{}")
  site_logo           String    @default("{}")
  site_favicon        String    @default("{}")
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @updatedAt
  graphcomment_id     String    @default("")
  intro_dismissed     Boolean
  show_about_page     Boolean   @default(true)
  show_tags_page      Boolean   @default(false)
  design              String    @default("{}")
  scripts             String    @default("")
  author_id           Int       @unique
  author              Author    @relation(fields: [author_id], references: [id], onDelete: Cascade)
}

model Subscriber2 {
  id                  Int       @id @default(autoincrement())
  email               String
  author_id           Int
  verified            Boolean   @default(false)
  createdAt           DateTime? @default(now())
  updatedAt           DateTime? @updatedAt
  verify_attempt_left Int?      @default(3)

  author Author? @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@unique([email, author_id])
  @@index([author_id])
}

model Tag3 {
  name      String    @id @unique
  desc      String?   @default("")
  slug      String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  posts     Post[]
}

model Upload2 {
  id          Int       @id @default(autoincrement())
  name        String
  url         String
  width       Int
  height      Int
  description String    @default("")
  updatedAt   DateTime? @updatedAt
  createdAt   DateTime? @default(now())
  author_id   Int
  author      Author?   @relation(fields: [author_id], references: [id], onDelete: Cascade)

  @@index([author_id])
}

model Domain2 {
  id        Int       @id @default(autoincrement())
  name      String
  mapped    Boolean   @default(false)
  ssl       Boolean
  updatedAt DateTime? @updatedAt
  createdAt DateTime? @default(now())
  author_id Int       @unique
  author    Author?   @relation(fields: [author_id], references: [id], onDelete: Cascade)
}

model SubscribersDelivery2 {
  id            Int       @id @default(autoincrement())
  subscriber_id String?
  post_id       Int
  delivered     Boolean
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt
}

model User2 {
  id          String        @id @default(uuid())
  username    String        @unique
  mail        String        @unique
  workouts    Workout2[]
  fitnessData FitnessData2?
}

model FitnessData2 {
  id     String @id @default(uuid())
  ftp    Int
  user   User2  @relation(fields: [userId], references: [id])
  userId String @unique
}

model Workout2 {
  id     String               @id @default(uuid())
  name   String
  parts  SteadyWorkoutPart2[]
  user   User2                @relation(fields: [userId], references: [id])
  userId String
}

model SteadyWorkoutPart2 {
  index     Int
  duration  Int
  power     Int
  workout   Workout2 @relation(fields: [workoutId], references: [id])
  workoutId String

  @@unique([index, workoutId])
}

enum TimeFormat {
  hours12
  hours24

  @@map("time_format")
}

model User3 {
  id             String        @id @default(cuid())
  name           String
  email          String        @unique() @db.Text
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime?     @updatedAt @map("updated_at")
  comments       Comment[]
  polls          Poll[]
  watcher        Watcher[]
  events         Event2[]
  customerId     String?       @map("customer_id")
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?       @unique @map("subscription_id")

  @@map("users3")
}

enum SubscriptionStatus {
  active
  paused
  deleted
  trialing
  past_due

  @@map("subscription_status")
}

model UserPaymentData {
  userId         String             @id @map("user_id")
  subscriptionId String             @map("subscription_id")
  planId         String             @map("plan_id")
  endDate        DateTime           @map("end_date")
  status         SubscriptionStatus
  updateUrl      String             @map("update_url")
  cancelUrl      String             @map("cancel_url")

  @@map("user_payment_data")
}

model Subscription {
  id            String   @id
  priceId       String   @map("price_id")
  active        Boolean
  currency      String?
  interval      String?
  intervalCount Int?     @map("interval_count")
  createdAt     DateTime @default(now()) @map("created_at")
  periodStart   DateTime @map("period_start")
  periodEnd     DateTime @map("period_end")
  user          User3?

  @@map("subscriptions")
}

model UserPreferences {
  userId     String      @id @map("user_id")
  timeZone   String?     @map("time_zone")
  weekStart  Int?        @map("week_start")
  timeFormat TimeFormat? @map("time_format")
  createdAt  DateTime    @default(now()) @map("created_at")

  @@map("user_preferences")
}

enum ParticipantVisibility {
  full
  scoresOnly
  limited

  @@map("participant_visibility")
}

model Poll {
  id                      String        @id @unique @map("id")
  createdAt               DateTime      @default(now()) @map("created_at")
  updatedAt               DateTime      @updatedAt @map("updated_at")
  deadline                DateTime?
  title                   String
  description             String?
  location                String?
  user                    User3?        @relation(fields: [userId], references: [id])
  userId                  String        @map("user_id")
  votes                   Vote[]
  timeZone                String?       @map("time_zone")
  options                 Option[]
  participants            Participant[]
  watchers                Watcher[]
  demo                    Boolean       @default(false)
  comments                Comment[]
  legacy                  Boolean       @default(false) // @deprecated
  closed                  Boolean       @default(false) // we use this to indicate whether a poll is paused
  deleted                 Boolean       @default(false)
  deletedAt               DateTime?     @map("deleted_at")
  touchedAt               DateTime      @default(now()) @map("touched_at")
  participantUrlId        String        @unique @map("participant_url_id")
  adminUrlId              String        @unique @map("admin_url_id")
  eventId                 String?       @map("event_id")
  event                   Event2?
  hideParticipants        Boolean       @default(false) @map("hide_participants")
  hideScores              Boolean       @default(false) @map("hide_scores")
  disableComments         Boolean       @default(false) @map("disable_comments")
  requireParticipantEmail Boolean       @default(false) @map("require_participant_email")

  @@index([userId], type: Hash)
  @@map("polls")
}

model Event2 {
  id        String   @id @default(cuid())
  pollId    String   @unique @map("poll_id")
  userId    String   @map("user_id")
  user      User3    @relation(fields: [userId], references: [id])
  poll      Poll     @relation(fields: [pollId], references: [id])
  optionId  String   @map("option_id")
  title     String
  start     DateTime @db.Timestamp(0)
  duration  Int      @default(0) @map("duration_minutes")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([pollId], type: Hash)
  @@index([userId], type: Hash)
  @@map("events")
}

model Watcher {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  user      User3    @relation(fields: [userId], references: [id])
  pollId    String   @map("poll_id")
  createdAt DateTime @default(now()) @map("created_at")
  poll      Poll     @relation(fields: [pollId], references: [id])

  @@index([userId], type: Hash)
  @@index([pollId], type: Hash)
  @@map("watchers")
}

model Participant {
  id        String    @id @default(cuid())
  name      String
  email     String?
  userId    String?   @map("user_id")
  poll      Poll      @relation(fields: [pollId], references: [id])
  pollId    String    @map("poll_id")
  votes     Vote[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@index([pollId], type: Hash)
  @@map("participants")
}

model Option {
  id        String   @id @default(cuid())
  start     DateTime @db.Timestamp(0)
  duration  Int      @default(0) @map("duration_minutes")
  pollId    String   @map("poll_id")
  poll      Poll     @relation(fields: [pollId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@index([pollId], type: Hash)
  @@map("options")
}

enum VoteType {
  yes
  no
  ifNeedBe

  @@map("vote_type")
}

model Vote {
  id            String      @id @default(cuid())
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId String      @map("participant_id")
  optionId      String      @map("option_id")
  poll          Poll        @relation(fields: [pollId], references: [id])
  pollId        String      @map("poll_id")
  type          VoteType    @default(yes)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime?   @updatedAt @map("updated_at")

  @@index([participantId], type: Hash)
  @@index([pollId], type: Hash)
  @@map("votes")
}

model Comment {
  id         String    @id @default(cuid())
  content    String
  poll       Poll      @relation(fields: [pollId], references: [id])
  pollId     String    @map("poll_id")
  authorName String    @map("author_name")
  user       User3?    @relation(fields: [userId], references: [id])
  userId     String?   @map("user_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  @@index([userId], type: Hash)
  @@index([pollId], type: Hash)
  @@map("comments")
}

model Application {
  id                  String                         @id @default(cuid())
  name                String
  fqdn                String?
  repository          String?
  configHash          String?
  branch              String?
  buildPack           String?
  projectId           Int?
  port                Int?
  exposePort          Int?
  installCommand      String?
  buildCommand        String?
  startCommand        String?
  baseDirectory       String?
  publishDirectory    String?
  deploymentType      String?
  phpModules          String?
  pythonWSGI          String?
  pythonModule        String?
  pythonVariable      String?
  dockerFileLocation  String?
  denoMainFile        String?
  denoOptions         String?
  createdAt           DateTime                       @default(now())
  updatedAt           DateTime                       @updatedAt
  destinationDockerId String?
  gitSourceId         String?
  baseImage           String?
  baseBuildImage      String?
  gitSource           GitSource?                     @relation(fields: [gitSourceId], references: [id])
  destinationDocker   DestinationDocker?             @relation(fields: [destinationDockerId], references: [id])
  persistentStorage   ApplicationPersistentStorage[]
  settings            ApplicationSettings?
  secrets             Secret[]
  teams               Team1[]
  connectedDatabase   ApplicationConnectedDatabase?
}

model ApplicationConnectedDatabase {
  id                     String      @id @default(cuid())
  applicationId          String      @unique
  databaseId             String?
  hostedDatabaseType     String?
  hostedDatabaseHost     String?
  hostedDatabasePort     Int?
  hostedDatabaseName     String?
  hostedDatabaseUser     String?
  hostedDatabasePassword String?
  hostedDatabaseDBName   String?
  createdAt              DateTime    @default(now())
  updatedAt              DateTime    @updatedAt
  database               Database?   @relation(fields: [databaseId], references: [id])
  application            Application @relation(fields: [applicationId], references: [id])
}

model ApplicationSettings {
  id                 String      @id @default(cuid())
  applicationId      String      @unique
  dualCerts          Boolean     @default(false)
  debug              Boolean     @default(false)
  previews           Boolean     @default(false)
  autodeploy         Boolean     @default(true)
  isBot              Boolean     @default(false)
  isPublicRepository Boolean     @default(false)
  isDBBranching      Boolean     @default(false)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  application        Application @relation(fields: [applicationId], references: [id])
}

model ApplicationPersistentStorage {
  id            String      @id @default(cuid())
  applicationId String
  path          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  application   Application @relation(fields: [applicationId], references: [id])

  @@unique([applicationId, path])
}

model ServicePersistentStorage {
  id        String   @id @default(cuid())
  serviceId String
  path      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id])

  @@unique([serviceId, path])
}

model Secret {
  id            String      @id @default(cuid())
  name          String
  value         String
  isPRMRSecret  Boolean     @default(false)
  isBuildSecret Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])

  @@unique([name, applicationId, isPRMRSecret])
}

model ServiceSecret {
  id        String   @id @default(cuid())
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])

  @@unique([name, serviceId])
}

model BuildLog {
  id            String  @id @default(cuid())
  applicationId String?
  buildId       String
  line          String
  time          BigInt
}

model Build {
  id                  String   @id @default(cuid())
  type                String
  applicationId       String?
  destinationDockerId String?
  gitSourceId         String?
  githubAppId         String?
  gitlabAppId         String?
  commit              String?
  pullmergeRequestId  String?
  forceRebuild        Boolean  @default(false)
  sourceBranch        String?
  branch              String?
  status              String?  @default("queued")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model DestinationDocker {
  id                 String        @id @default(cuid())
  network            String        @unique
  name               String
  engine             String?
  remoteEngine       Boolean       @default(false)
  remoteIpAddress    String?
  remoteUser         String?
  remotePort         Int?
  remoteVerified     Boolean       @default(false)
  isCoolifyProxyUsed Boolean?      @default(false)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  sshKeyId           String?
  sshKey             SshKey?       @relation(fields: [sshKeyId], references: [id])
  sshLocalPort       Int?
  application        Application[]
  database           Database[]
  service            Service[]
  teams              Team1[]
}

model SshKey {
  id                String              @id @default(cuid())
  name              String
  privateKey        String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  teamId            String?
  team              Team1?              @relation(fields: [teamId], references: [id])
  destinationDocker DestinationDocker[]
}

model GitSource {
  id           String        @id @default(cuid())
  name         String
  forPublic    Boolean       @default(false)
  type         String?
  apiUrl       String?
  htmlUrl      String?
  customPort   Int           @default(22)
  organization String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  githubAppId  String?       @unique
  gitlabAppId  String?       @unique
  gitlabApp    GitlabApp?    @relation(fields: [gitlabAppId], references: [id])
  githubApp    GithubApp?    @relation(fields: [githubAppId], references: [id])
  application  Application[]
  teams        Team1[]
}

model GithubApp {
  id             String     @id @default(cuid())
  name           String?    @unique
  appId          Int?
  installationId Int?
  clientId       String?
  clientSecret   String?
  webhookSecret  String?
  privateKey     String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  gitSource      GitSource?
  teams          Team1[]
}

model GitlabApp {
  id            String     @id @default(cuid())
  oauthId       Int        @unique
  groupName     String?    @unique
  deployKeyId   Int?
  privateSshKey String?
  publicSshKey  String?
  webhookToken  String?
  appId         String?
  appSecret     String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  gitSource     GitSource?
  teams         Team1[]
}

model Database {
  id                           String                         @id @default(cuid())
  name                         String
  publicPort                   Int?
  defaultDatabase              String?
  type                         String?
  version                      String?
  dbUser                       String?
  dbUserPassword               String?
  rootUser                     String?
  rootUserPassword             String?
  destinationDockerId          String?
  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  destinationDocker            DestinationDocker?             @relation(fields: [destinationDockerId], references: [id])
  settings                     DatabaseSettings?
  teams                        Team1[]
  applicationConnectedDatabase ApplicationConnectedDatabase[]
}

model DatabaseSettings {
  id         String   @id @default(cuid())
  databaseId String   @unique
  isPublic   Boolean  @default(false)
  appendOnly Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  database   Database @relation(fields: [databaseId], references: [id])
}

model Service {
  id                  String                     @id @default(cuid())
  name                String
  fqdn                String?
  exposePort          Int?
  dualCerts           Boolean                    @default(false)
  type                String?
  version             String?
  destinationDockerId String?
  createdAt           DateTime                   @default(now())
  updatedAt           DateTime                   @updatedAt
  destinationDocker   DestinationDocker?         @relation(fields: [destinationDockerId], references: [id])
  persistentStorage   ServicePersistentStorage[]
  serviceSecret       ServiceSecret[]
  teams               Team1[]

  fider              Fider?
  ghost              Ghost?
  glitchTip          GlitchTip?
  hasura             Hasura?
  meiliSearch        MeiliSearch?
  minio              Minio?
  moodle             Moodle?
  plausibleAnalytics PlausibleAnalytics?
  umami              Umami?
  vscodeserver       Vscodeserver?
  wordpress          Wordpress?
  appwrite           Appwrite?
  searxng            Searxng?
  weblate            Weblate?
  taiga              Taiga?
}

model PlausibleAnalytics {
  id                   String   @id @default(cuid())
  email                String?
  username             String?
  password             String
  postgresqlUser       String
  postgresqlPassword   String
  postgresqlDatabase   String
  postgresqlPublicPort Int?
  secretKeyBase        String?
  scriptName           String   @default("plausible.js")
  serviceId            String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  service              Service  @relation(fields: [serviceId], references: [id])
}

model Minio {
  id               String   @id @default(cuid())
  rootUser         String
  rootUserPassword String
  publicPort       Int?
  apiFqdn          String?
  serviceId        String   @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  service          Service  @relation(fields: [serviceId], references: [id])
}

model Vscodeserver {
  id        String   @id @default(cuid())
  password  String
  serviceId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id])
}

model Wordpress {
  id                    String   @id @default(cuid())
  extraConfig           String?
  tablePrefix           String?
  ownMysql              Boolean  @default(false)
  mysqlHost             String?
  mysqlPort             Int?
  mysqlUser             String
  mysqlPassword         String
  mysqlRootUser         String
  mysqlRootUserPassword String
  mysqlDatabase         String?
  mysqlPublicPort       Int?
  ftpEnabled            Boolean  @default(false)
  ftpUser               String?
  ftpPassword           String?
  ftpPublicPort         Int?
  ftpHostKey            String?
  ftpHostKeyPrivate     String?
  serviceId             String   @unique
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  service               Service  @relation(fields: [serviceId], references: [id])
}

model Ghost {
  id                      String   @id @default(cuid())
  defaultEmail            String
  defaultPassword         String
  mariadbUser             String
  mariadbPassword         String
  mariadbRootUser         String
  mariadbRootUserPassword String
  mariadbDatabase         String?
  mariadbPublicPort       Int?
  serviceId               String   @unique
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  service                 Service  @relation(fields: [serviceId], references: [id])
}

model MeiliSearch {
  id        String   @id @default(cuid())
  masterKey String
  serviceId String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id])
}

model Umami {
  id                   String   @id @default(cuid())
  serviceId            String   @unique
  postgresqlUser       String
  postgresqlPassword   String
  postgresqlDatabase   String
  postgresqlPublicPort Int?
  umamiAdminPassword   String
  hashSalt             String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  service              Service  @relation(fields: [serviceId], references: [id])
}

model Hasura {
  id                   String   @id @default(cuid())
  serviceId            String   @unique
  postgresqlUser       String
  postgresqlPassword   String
  postgresqlDatabase   String
  postgresqlPublicPort Int?
  graphQLAdminPassword String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  service              Service  @relation(fields: [serviceId], references: [id])
}

model Fider {
  id                      String   @id @default(cuid())
  serviceId               String   @unique
  postgresqlUser          String
  postgresqlPassword      String
  postgresqlDatabase      String
  postgresqlPublicPort    Int?
  jwtSecret               String
  emailNoreply            String?
  emailMailgunApiKey      String?
  emailMailgunDomain      String?
  emailMailgunRegion      String   @default("EU")
  emailSmtpHost           String?
  emailSmtpPort           Int?
  emailSmtpUser           String?
  emailSmtpPassword       String?
  emailSmtpEnableStartTls Boolean  @default(false)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  service                 Service  @relation(fields: [serviceId], references: [id])
}

model Moodle {
  id                      String   @id @default(cuid())
  serviceId               String   @unique
  defaultUsername         String
  defaultPassword         String
  defaultEmail            String
  mariadbUser             String
  mariadbPassword         String
  mariadbRootUser         String
  mariadbRootUserPassword String
  mariadbDatabase         String
  mariadbPublicPort       Int?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  service                 Service  @relation(fields: [serviceId], references: [id])
}

model Appwrite {
  id                      String   @id @default(cuid())
  serviceId               String   @unique
  opensslKeyV1            String
  executorSecret          String
  redisPassword           String
  mariadbHost             String?
  mariadbPort             Int      @default(3306)
  mariadbUser             String
  mariadbPassword         String
  mariadbRootUser         String
  mariadbRootUserPassword String
  mariadbDatabase         String
  mariadbPublicPort       Int?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  service                 Service  @relation(fields: [serviceId], references: [id])
}

model GlitchTip {
  id                         String   @id @default(cuid())
  postgresqlUser             String
  postgresqlPassword         String
  postgresqlDatabase         String
  postgresqlPublicPort       Int?
  secretKeyBase              String?
  defaultEmail               String
  defaultUsername            String
  defaultPassword            String
  defaultEmailFrom           String   @default("glitchtip@domain.tdl")
  emailSmtpHost              String?  @default("domain.tdl")
  emailSmtpPort              Int?     @default(25)
  emailSmtpUser              String?
  emailSmtpPassword          String?
  emailSmtpUseTls            Boolean? @default(false)
  emailSmtpUseSsl            Boolean? @default(false)
  emailBackend               String?
  mailgunApiKey              String?
  sendgridApiKey             String?
  enableOpenUserRegistration Boolean  @default(true)
  serviceId                  String   @unique
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
  service                    Service  @relation(fields: [serviceId], references: [id])
}

model Searxng {
  id            String   @id @default(cuid())
  secretKey     String
  redisPassword String
  serviceId     String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  service       Service  @relation(fields: [serviceId], references: [id])
}

model Weblate {
  id                   String   @id @default(cuid())
  adminPassword        String
  postgresqlHost       String
  postgresqlPort       Int
  postgresqlUser       String
  postgresqlPassword   String
  postgresqlDatabase   String
  postgresqlPublicPort Int?
  serviceId            String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  service              Service  @relation(fields: [serviceId], references: [id])
}

model Taiga {
  id                   String   @id @default(cuid())
  secretKey            String
  erlangSecret         String
  djangoAdminPassword  String
  djangoAdminUser      String
  rabbitMQUser         String
  rabbitMQPassword     String
  postgresqlHost       String
  postgresqlPort       Int
  postgresqlUser       String
  postgresqlPassword   String
  postgresqlDatabase   String
  postgresqlPublicPort Int?
  serviceId            String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  service              Service  @relation(fields: [serviceId], references: [id])
}

model TeamInvitation {
  id         String   @id @default(cuid())
  uid        String
  email      String
  teamId     String
  teamName   String
  permission String
  createdAt  DateTime @default(now())
}

model Team1 {
  id                String              @id @default(cuid())
  name              String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  databaseId        String?
  serviceId         String?
  permissions       Permission3[]
  sshKey            SshKey[]
  applications      Application[]
  database          Database[]
  destinationDocker DestinationDocker[]
  gitSources        GitSource[]
  gitHubApps        GithubApp[]
  gitLabApps        GitlabApp[]
  service           Service[]
  users             User4[]
}

model Setting3 {
  id                    String   @id @default(cuid())
  fqdn                  String?  @unique
  isRegistrationEnabled Boolean  @default(false)
  dualCerts             Boolean  @default(false)
  minPort               Int      @default(9000)
  maxPort               Int      @default(9100)
  proxyPassword         String
  proxyUser             String
  proxyHash             String?
  isAutoUpdateEnabled   Boolean  @default(false)
  isDNSCheckEnabled     Boolean  @default(true)
  DNSServers            String?
  isTraefikUsed         Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  ipv4                  String?
  ipv6                  String?
  arch                  String?
  concurrentBuilds      Int      @default(1)
}

model User4 {
  id         String        @id @unique @default(cuid())
  email      String        @unique
  type       String
  password   String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  permission Permission3[]
  teams      Team1[]
}

model Permission3 {
  id         String   @id @default(cuid())
  userId     String
  teamId     String
  permission String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  team       Team1    @relation(fields: [teamId], references: [id])
  user       User4    @relation(fields: [userId], references: [id])
}

model User5 {
  id    String @id @default(uuid())
  email String @unique

  groups UsersGroups[]

  @@map("user")
}

model Group {
  id   String @id @default(uuid())
  name String

  users UsersGroups[]

  @@map("group")
}

model UsersGroups {
  user    User5  @relation(fields: [userId], references: [id])
  userId  String @map(name: "user_id")
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @map(name: "group_id")

  @@id([userId, groupId])
  @@map("users_groups")
}

model User6 {
  id                String  @id @default(uuid())
  name              String
  email             String  @unique
  password          String
  role              Role4   @default(USER)
  verified          Boolean @default(false) // Is the mail verification
  verificationToken String? // Verification token of the mail
  refreshToken      String?
  urls              Url[]
}

model Url {
  id             String    @id @default(uuid())
  shortenedUrl   String    @unique
  originalUrl    String
  user           User6?    @relation(fields: [userId], references: [id])
  userId         String
  description    String?
  expirationTime DateTime?
  createdAt      DateTime  @default(now())
}

enum Role4 {
  USER
  ADMIN
}

enum TP_ID {
  hubspot
  zohocrm
  sfdc
  pipedrive
}

enum ENV {
  development
  production
}

model accounts {
  id                        String                     @id
  tenant_count              Int?                       @default(0)
  private_token             String                     @unique
  public_token              String                     @unique
  domain                    String                     @unique @default("")
  skipWaitlist              Boolean                    @default(true)
  workspaceName             String?
  users                     users7[]
  environments              environments[]
  accountFieldMappingConfig accountFieldMappingConfig?
}

model environments {
  id            String    @id
  env           ENV
  private_token String    @unique
  public_token  String    @unique
  accounts      accounts? @relation(fields: [accountId], references: [id])
  accountId     String
  apps          apps[]
}

model apps {
  id                         String        @id
  tp_id                      TP_ID
  scope                      String[]
  app_client_id              String?
  app_client_secret          String?
  owner_account_public_token String?
  environmentId              String
  env                        environments  @relation(fields: [environmentId], references: [id])
  connections                connections[]
  is_revert_app              Boolean       @default(false)
}

model users7 {
  id        String   @id
  domain    String
  email     String
  accountId String
  account   accounts @relation(fields: [accountId], references: [id])
}

model connections {
  id                         String          @id @default(uuid())
  tp_id                      TP_ID
  tp_access_token            String
  tp_refresh_token           String?
  tp_customer_id             String
  t_id                       String
  tp_account_url             String?
  owner_account_public_token String
  app_client_id              String?
  app_client_secret          String?
  app                        apps?           @relation(fields: [appId], references: [id])
  appId                      String?
  schema_mapping_id          String?
  schema_mapping             schema_mapping? @relation(fields: [schema_mapping_id], references: [id])

  @@unique([tp_customer_id, t_id], name: "uniqueCustomerPerTenant")
  @@unique([tp_id, t_id], name: "uniqueThirdPartyPerTenant")
  @@unique([tp_customer_id, t_id, tp_id], name: "uniqueCustomerPerTenantPerThirdParty")
}

model schema_mapping {
  id                String        @id
  object_schema_ids String[]
  object_schemas    schemas[]
  connections       connections[] // TODO: can make this single to enforce one-on-one relationship (set schema_mapping_id on connections unique)
}

model schemas {
  id                 String          @id
  fields             String[]
  object             String
  schema_mapping_id  String
  schema_mapping     schema_mapping  @relation(fields: [schema_mapping_id], references: [id])
  fields_mapping_ids String[]
  fieldMappings      fieldMappings[]
}

model fieldMappings {
  id                String  @id
  source_tp_id      TP_ID
  source_field_name String?
  target_field_name String
  is_standard_field Boolean
  schema_id         String
  schema            schemas @relation(fields: [schema_id], references: [id])
}

model waitlist {
  email String @id
}

model accountFieldMappingConfig {
  id                                      String   @id
  account_id                              String   @unique
  account                                 accounts @relation(fields: [account_id], references: [id])
  allow_connection_override_custom_fields Boolean  @default(true)
  mappable_by_connection_field_list       Json? // [{ objectName, fieldName }]
}

model Company {
  id   String @id @default(cuid()) @db.Uuid
  name String

  users    Person2[]
  projects Project[]
  tasks    Task[]
}

model Person2 {
  id        String @id @default(cuid()) @db.Uuid
  companyId String @default(cuid()) @db.Uuid
  email     String @unique

  company       Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  ownedProjects Project[]
  assignedTasks Task[]
}

model Project {
  id        String  @id @default(cuid()) @db.Uuid
  companyId String  @default(cuid()) @db.Uuid
  userId    String? @db.Uuid
  title     String

  company Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  owner   Person2? @relation(fields: [userId], references: [id], onDelete: SetNull)
  tasks   Task[]
}

enum TaskStatus {
  Pending
  InProgress
  Complete
  WontDo
}

model Task {
  id        String     @id @default(cuid()) @db.Uuid
  companyId String     @default(cuid()) @db.Uuid
  projectId String     @db.Uuid
  userId    String?    @db.Uuid
  title     String
  status    TaskStatus

  company  Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee Person2? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model audit_log_entries {
  instance_id String?   @db.Uuid
  id          String    @id @db.Uuid
  payload     Json?     @db.Json
  created_at  DateTime? @db.Timestamptz(6)
  ip_address  String    @default("") @db.VarChar(64)

  @@index([instance_id], map: "audit_logs_instance_id_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model flow_state {
  id                     String                @id @db.Uuid
  user_id                String?               @db.Uuid
  auth_code              String
  code_challenge_method  code_challenge_method
  code_challenge         String
  provider_type          String
  provider_access_token  String?
  provider_refresh_token String?
  created_at             DateTime?             @db.Timestamptz(6)
  updated_at             DateTime?             @db.Timestamptz(6)
  authentication_method  String

  @@index([auth_code], map: "idx_auth_code")
  @@index([user_id, authentication_method], map: "idx_user_id_auth_method")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model identities {
  id              String
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?   @db.VarChar(255)
  users           users5    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([provider, id])
  @@index([email])
  @@index([user_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model instances {
  id              String    @id @db.Uuid
  uuid            String?   @db.Uuid
  raw_base_config String?
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_amr_claims {
  session_id            String   @db.Uuid
  created_at            DateTime @db.Timestamptz(6)
  updated_at            DateTime @db.Timestamptz(6)
  authentication_method String
  id                    String   @id(map: "amr_id_pk") @db.Uuid
  sessions              sessions @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([session_id, authentication_method], map: "mfa_amr_claims_session_id_authentication_method_pkey")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_challenges {
  id          String      @id @db.Uuid
  factor_id   String      @db.Uuid
  created_at  DateTime    @db.Timestamptz(6)
  verified_at DateTime?   @db.Timestamptz(6)
  ip_address  String      @db.Inet
  mfa_factors mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "mfa_challenges_auth_factor_id_fkey")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model mfa_factors {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  friendly_name  String?
  factor_type    factor_type
  status         factor_status
  created_at     DateTime         @db.Timestamptz(6)
  updated_at     DateTime         @db.Timestamptz(6)
  secret         String?
  mfa_challenges mfa_challenges[]
  users          users5           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, created_at], map: "factor_id_created_at_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model refresh_tokens {
  instance_id String?   @db.Uuid
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique(map: "refresh_tokens_token_unique") @db.VarChar(255)
  user_id     String?   @db.VarChar(255)
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @db.VarChar(255)
  session_id  String?   @db.Uuid
  sessions    sessions? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([instance_id])
  @@index([instance_id, user_id])
  @@index([parent])
  @@index([session_id, revoked])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model saml_providers {
  id                String        @id @db.Uuid
  sso_provider_id   String        @db.Uuid
  entity_id         String        @unique
  metadata_xml      String
  metadata_url      String?
  attribute_mapping Json?
  created_at        DateTime?     @db.Timestamptz(6)
  updated_at        DateTime?     @db.Timestamptz(6)
  sso_providers     sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model saml_relay_states {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  request_id      String
  for_email       String?
  redirect_to     String?
  from_ip_address String?       @db.Inet
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([for_email])
  @@index([sso_provider_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
// model schema_migrations {
//   version String @id @db.VarChar(255)
// }

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sessions {
  id             String           @id @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime?        @db.Timestamptz(6)
  updated_at     DateTime?        @db.Timestamptz(6)
  factor_id      String?          @db.Uuid
  aal            aal_level?
  not_after      DateTime?        @db.Timestamptz(6)
  mfa_amr_claims mfa_amr_claims[]
  refresh_tokens refresh_tokens[]
  users          users5           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id])
  @@index([user_id, created_at], map: "user_id_created_at_idx")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sso_domains {
  id              String        @id @db.Uuid
  sso_provider_id String        @db.Uuid
  domain          String
  created_at      DateTime?     @db.Timestamptz(6)
  updated_at      DateTime?     @db.Timestamptz(6)
  sso_providers   sso_providers @relation(fields: [sso_provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([sso_provider_id])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sso_providers {
  id                String              @id @db.Uuid
  resource_id       String?
  created_at        DateTime?           @db.Timestamptz(6)
  updated_at        DateTime?           @db.Timestamptz(6)
  saml_providers    saml_providers[]
  saml_relay_states saml_relay_states[]
  sso_domains       sso_domains[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users5 {
  instance_id                 String?       @db.Uuid
  id                          String        @id @db.Uuid
  aud                         String?       @db.VarChar(255)
  role                        String?       @db.VarChar(255)
  email                       String?       @db.VarChar(255)
  encrypted_password          String?       @db.VarChar(255)
  email_confirmed_at          DateTime?     @db.Timestamptz(6)
  invited_at                  DateTime?     @db.Timestamptz(6)
  confirmation_token          String?       @db.VarChar(255)
  confirmation_sent_at        DateTime?     @db.Timestamptz(6)
  recovery_token              String?       @db.VarChar(255)
  recovery_sent_at            DateTime?     @db.Timestamptz(6)
  email_change_token_new      String?       @db.VarChar(255)
  email_change                String?       @db.VarChar(255)
  email_change_sent_at        DateTime?     @db.Timestamptz(6)
  last_sign_in_at             DateTime?     @db.Timestamptz(6)
  raw_app_meta_data           Json?
  raw_user_meta_data          Json?
  is_super_admin              Boolean?
  created_at                  DateTime?     @db.Timestamptz(6)
  updated_at                  DateTime?     @db.Timestamptz(6)
  phone                       String?       @unique
  phone_confirmed_at          DateTime?     @db.Timestamptz(6)
  phone_change                String?       @default("")
  phone_change_token          String?       @default("") @db.VarChar(255)
  phone_change_sent_at        DateTime?     @db.Timestamptz(6)
  confirmed_at                DateTime?     @default(now()) @db.Timestamptz(6)
  email_change_token_current  String?       @default("") @db.VarChar(255)
  email_change_confirm_status Int?          @default(0) @db.SmallInt
  banned_until                DateTime?     @db.Timestamptz(6)
  reauthentication_token      String?       @default("") @db.VarChar(255)
  reauthentication_sent_at    DateTime?     @db.Timestamptz(6)
  is_sso_user                 Boolean       @default(false)
  deleted_at                  DateTime?     @db.Timestamptz(6)
  identities                  identities[]
  mfa_factors                 mfa_factors[]
  sessions                    sessions[]

  @@index([instance_id])
}

enum aal_level {
  aal1
  aal2
  aal3
}

enum code_challenge_method {
  s256
  plain
}

enum factor_status {
  unverified
  verified
}

enum factor_type {
  totp
  webauthn
}

enum IdentityProvider2 {
  DOCUMENSO
  GOOGLE
}

enum Role5 {
  ADMIN
  USER
}

model User7 {
  id                 Int                  @id @default(autoincrement())
  name               String?
  email              String               @unique
  emailVerified      DateTime?
  password           String?
  source             String?
  signature          String?
  roles              Role5[]              @default([USER])
  identityProvider   IdentityProvider2    @default(DOCUMENSO)
  accounts           Account2[]
  sessions           Session2[]
  Document           Document[]
  Subscription       Subscription2[]
  PasswordResetToken PasswordResetToken[]
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  expiry    DateTime
  userId    Int
  User      User7    @relation(fields: [userId], references: [id])
}

enum SubscriptionStatus2 {
  ACTIVE
  PAST_DUE
  INACTIVE
}

model Subscription2 {
  id         Int                 @id @default(autoincrement())
  status     SubscriptionStatus2 @default(INACTIVE)
  planId     String?
  priceId    String?
  customerId String?
  periodEnd  DateTime?
  userId     Int
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt

  User User7 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([customerId])
  @@index([userId])
}

model Account2 {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User7? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session2 {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User7?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum DocumentStatus {
  DRAFT
  PENDING
  COMPLETED
}

model Document {
  id             Int                 @id @default(autoincrement())
  userId         Int
  User           User7               @relation(fields: [userId], references: [id], onDelete: Cascade)
  title          String
  status         DocumentStatus      @default(DRAFT)
  Recipient      Recipient[]
  Field          Field[]
  ShareLink      DocumentShareLink[]
  documentDataId String
  documentData   DocumentData        @relation(fields: [documentDataId], references: [id], onDelete: Cascade)
  documentMeta   DocumentMeta?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @default(now()) @updatedAt

  @@unique([documentDataId])
}

enum DocumentDataType {
  S3_PATH
  BYTES
  BYTES_64
}

model DocumentData {
  id          String           @id @default(cuid())
  type        DocumentDataType
  data        String
  initialData String
  Document    Document?
}

model DocumentMeta {
  id         String   @id @default(cuid())
  subject    String?
  message    String?
  documentId Int      @unique
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
}

enum ReadStatus {
  NOT_OPENED
  OPENED
}

enum SendStatus {
  NOT_SENT
  SENT
}

enum SigningStatus {
  NOT_SIGNED
  SIGNED
}

model Recipient {
  id            Int           @id @default(autoincrement())
  documentId    Int
  email         String        @db.VarChar(255)
  name          String        @default("") @db.VarChar(255)
  token         String
  expired       DateTime?
  signedAt      DateTime?
  readStatus    ReadStatus    @default(NOT_OPENED)
  signingStatus SigningStatus @default(NOT_SIGNED)
  sendStatus    SendStatus    @default(NOT_SENT)
  Document      Document      @relation(fields: [documentId], references: [id], onDelete: Cascade)
  Field         Field[]
  Signature     Signature[]

  @@unique([documentId, email])
}

enum FieldType {
  SIGNATURE
  FREE_SIGNATURE
  NAME
  EMAIL
  DATE
  TEXT
}

model Field {
  id          Int        @id @default(autoincrement())
  documentId  Int
  recipientId Int?
  type        FieldType
  page        Int
  positionX   Decimal    @default(0)
  positionY   Decimal    @default(0)
  width       Decimal    @default(-1)
  height      Decimal    @default(-1)
  customText  String
  inserted    Boolean
  Document    Document   @relation(fields: [documentId], references: [id], onDelete: Cascade)
  Recipient   Recipient? @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  Signature   Signature?
}

model Signature {
  id                     Int      @id @default(autoincrement())
  created                DateTime @default(now())
  recipientId            Int
  fieldId                Int      @unique
  signatureImageAsBase64 String?
  typedSignature         String?

  Recipient Recipient @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  Field     Field     @relation(fields: [fieldId], references: [id], onDelete: Restrict)
}

model DocumentShareLink {
  id         Int      @id @default(autoincrement())
  email      String
  slug       String   @unique
  documentId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  document Document @relation(fields: [documentId], references: [id])

  @@unique([documentId, email])
}

enum TimeFormat2 {
  hours12
  hours24

  @@map("time_format2")
}

model User8 {
  id             String         @id @default(cuid())
  name           String
  email          String         @unique() @db.Text
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime?      @updatedAt @map("updated_at")
  comments       Comment2[]
  polls          Poll2[]
  watcher        Watcher2[]
  events         Event3[]
  customerId     String?        @map("customer_id")
  subscription   Subscription3? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?        @unique @map("subscription_id")

  @@map("users2")
}

enum SubscriptionStatus3 {
  active
  paused
  deleted
  trialing
  past_due

  @@map("subscription_status2")
}

model UserPaymentData2 {
  userId         String             @id @map("user_id")
  subscriptionId String             @map("subscription_id")
  planId         String             @map("plan_id")
  endDate        DateTime           @map("end_date")
  status         SubscriptionStatus
  updateUrl      String             @map("update_url")
  cancelUrl      String             @map("cancel_url")

  @@map("user_payment_data2")
}

model Subscription3 {
  id            String   @id
  priceId       String   @map("price_id")
  active        Boolean
  currency      String?
  interval      String?
  intervalCount Int?     @map("interval_count")
  createdAt     DateTime @default(now()) @map("created_at")
  periodStart   DateTime @map("period_start")
  periodEnd     DateTime @map("period_end")
  user          User8?

  @@map("subscriptions2")
}

model UserPreferences2 {
  userId     String      @id @map("user_id")
  timeZone   String?     @map("time_zone")
  weekStart  Int?        @map("week_start")
  timeFormat TimeFormat? @map("time_format")
  createdAt  DateTime    @default(now()) @map("created_at")

  @@map("user_preferences2")
}

enum ParticipantVisibility2 {
  full
  scoresOnly
  limited

  @@map("participant_visibility2")
}

model Poll2 {
  id                      String         @id @unique @map("id")
  createdAt               DateTime       @default(now()) @map("created_at")
  updatedAt               DateTime       @updatedAt @map("updated_at")
  deadline                DateTime?
  title                   String
  description             String?
  location                String?
  user                    User8?         @relation(fields: [userId], references: [id])
  userId                  String         @map("user_id")
  votes                   Vote2[]
  timeZone                String?        @map("time_zone")
  options                 Option2[]
  participants            Participant2[]
  watchers                Watcher2[]
  demo                    Boolean        @default(false)
  comments                Comment2[]
  legacy                  Boolean        @default(false) // @deprecated
  closed                  Boolean        @default(false) // we use this to indicate whether a poll is paused
  deleted                 Boolean        @default(false)
  deletedAt               DateTime?      @map("deleted_at")
  touchedAt               DateTime       @default(now()) @map("touched_at")
  participantUrlId        String         @unique @map("participant_url_id")
  adminUrlId              String         @unique @map("admin_url_id")
  eventId                 String?        @map("event_id")
  event                   Event3?
  hideParticipants        Boolean        @default(false) @map("hide_participants")
  hideScores              Boolean        @default(false) @map("hide_scores")
  disableComments         Boolean        @default(false) @map("disable_comments")
  requireParticipantEmail Boolean        @default(false) @map("require_participant_email")

  @@index([userId], type: Hash)
  @@map("polls2")
}

model Event3 {
  id        String   @id @default(cuid())
  pollId    String   @unique @map("poll_id")
  userId    String   @map("user_id")
  user      User8    @relation(fields: [userId], references: [id])
  poll      Poll2    @relation(fields: [pollId], references: [id])
  optionId  String   @map("option_id")
  title     String
  start     DateTime @db.Timestamp(0)
  duration  Int      @default(0) @map("duration_minutes")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([pollId], type: Hash)
  @@index([userId], type: Hash)
  @@map("events2")
}

model Watcher2 {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  user      User8    @relation(fields: [userId], references: [id])
  pollId    String   @map("poll_id")
  createdAt DateTime @default(now()) @map("created_at")
  poll      Poll2    @relation(fields: [pollId], references: [id])

  @@index([userId], type: Hash)
  @@index([pollId], type: Hash)
  @@map("watchers2")
}

model Participant2 {
  id        String    @id @default(cuid())
  name      String
  email     String?
  userId    String?   @map("user_id")
  poll      Poll2     @relation(fields: [pollId], references: [id])
  pollId    String    @map("poll_id")
  votes     Vote2[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@index([pollId], type: Hash)
  @@map("participants2")
}

model Option2 {
  id        String   @id @default(cuid())
  start     DateTime @db.Timestamp(0)
  duration  Int      @default(0) @map("duration_minutes")
  pollId    String   @map("poll_id")
  poll      Poll2    @relation(fields: [pollId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")

  @@index([pollId], type: Hash)
  @@map("options2")
}

enum VoteType2 {
  yes
  no
  ifNeedBe

  @@map("vote_type2")
}

model Vote2 {
  id            String       @id @default(cuid())
  participant   Participant2 @relation(fields: [participantId], references: [id], onDelete: Cascade)
  participantId String       @map("participant_id")
  optionId      String       @map("option_id")
  poll          Poll2        @relation(fields: [pollId], references: [id])
  pollId        String       @map("poll_id")
  type          VoteType     @default(yes)
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime?    @updatedAt @map("updated_at")

  @@index([participantId], type: Hash)
  @@index([pollId], type: Hash)
  @@map("votes2")
}

model Comment2 {
  id         String    @id @default(cuid())
  content    String
  poll       Poll2     @relation(fields: [pollId], references: [id])
  pollId     String    @map("poll_id")
  authorName String    @map("author_name")
  user       User8?    @relation(fields: [userId], references: [id])
  userId     String?   @map("user_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @updatedAt @map("updated_at")

  @@index([userId], type: Hash)
  @@index([pollId], type: Hash)
  @@map("comments2")
}

model User9 {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sets      Set[]
}

model Set {
  id          String   @id @default(uuid())
  authorId    String
  title       String
  description String?  @db.Text
  author      User9    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  private     Boolean
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cards       Card[]

  @@index([authorId])
}

model CardMedia {
  id        String   @id @default(uuid())
  cardId    String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  card      Card     @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([cardId])
}

model Card {
  id         String      @id @default(uuid())
  setId      String
  index      Int
  term       String      @db.Text
  definition String      @db.Text
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  set        Set         @relation(fields: [setId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  media      CardMedia[]

  @@index([setId])
}

model messages {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()
  body      String
  sentAt    DateTime

  channel           channels @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId         String
  externalMessageId String?

  threads threads? @relation(fields: [threadId], references: [id])

  threadId String?

  mentions                 mentions[]
  attachments              messageAttachments[]
  reactions                messageReactions[]
  author                   users9?                  @relation(fields: [usersId], references: [id])
  usersId                  String?
  textsearchable_index_col String                   @map("textsearchable_index_col")
  messageFormat            MessageFormat?
  notifications            notifications[]

  @@unique([channelId, externalMessageId])
  // @@index([textsearchable_index_col], type: Gin)
  @@index([threadId])
  @@index([usersId])
  @@index([channelId, sentAt(sort: Desc)])
}

enum MessageFormat {
  DISCORD
  SLACK
  LINEN
  MATRIX
}

model threads {
  id               String      @id @default(uuid())
  incrementId      Int         @default(autoincrement())
  channel          channels    @relation(fields: [channelId], references: [id], onDelete: Cascade)
  externalThreadId String?
  viewCount        Int         @default(0)
  slug             String?
  messageCount     Int         @default(1)
  sentAt           BigInt
  hidden           Boolean     @default(false)
  title            String?
  question         String?
  answer           String?
  state            ThreadState @default(OPEN)
  pinned           Boolean     @default(false)
  messages         messages[]
  //resolution points to a message
  resolutionId     String?

  channelId           String
  lastReplyAt         BigInt?
  closeAt             BigInt?
  firstUserReplyAt    BigInt?
  firstManagerReplyAt BigInt?
  userThreadStatus    userThreadStatus[]
  feed                Boolean            @default(false)

  notifications     notifications[]
  page              Int?
  userStarredThread userStarredThread[]
  robotsMetaTag     String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime?           @updatedAt()
  embeddings        embeddings[]

  @@unique([channelId, externalThreadId])
  @@unique([incrementId])
  @@index([channelId, sentAt])
  @@index([channelId, sentAt, hidden])
  @@index([channelId, hidden, state, lastReplyAt])
  @@index([channelId, page])
  @@index([sentAt])
  @@index([feed, lastReplyAt])
}

enum ThreadState {
  OPEN
  CLOSE
}

model channels {
  id                String     @id @default(uuid())
  channelName       String
  messages          messages[]
  externalChannelId String?

  threads            threads[]
  //We should make channel required for channel
  account            accounts3?    @relation(fields: [accountId], references: [id])
  accountId          String?
  hidden             Boolean       @default(false)
  default            Boolean       @default(false)
  landing            Boolean       @default(false)
  readonly           Boolean       @default(false)
  externalPageCursor String?
  memberships        memberships[]
  readStatus         readStatus[]

  notifications       notifications[]
  pages               Int?
  lastPageBuildAt     BigInt?
  channelsIntegration channelsIntegration[]
  createdByUserId     String?
  createdBy           users9?               @relation(fields: [createdByUserId], references: [id])
  type                ChannelType?          @default(PUBLIC)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?             @updatedAt
  archived            Boolean               @default(false)
  displayOrder        Int?
  viewType            ChannelViewType       @default(CHAT)
  orderBy             ChannelOrderBy        @default(THREAD_SENT_AT)

  @@unique([externalChannelId])
  @@index([accountId])
}

enum ChannelViewType {
  CHAT
  FORUM
  TOPIC
}

enum ChannelType {
  PUBLIC
  PRIVATE
  DM
}

enum ChannelOrderBy {
  THREAD_SENT_AT
  THREAD_LAST_REPLY_AT
}

model channelsIntegration {
  id              String                  @id @default(uuid())
  createdAt       DateTime                @default(now())
  updatedAt       DateTime?               @updatedAt
  channel         channels                @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId       String
  type            channelsIntegrationType
  externalId      String
  data            Json?
  createdBy       users9                  @relation("createdBy", fields: [createdByUserId], references: [id])
  createdByUserId String
  updatedBy       users9?                 @relation("updatedBy", fields: [updatedByUserId], references: [id])
  updatedByUserId String?

  @@index([externalId])
}

enum channelsIntegrationType {
  GITHUB
  EMAIL
  LINEAR
  LLM
}

enum AnonymizeType {
  NONE
  MEMBERS
  ALL
}

model accounts3 {
  id                      String        @id @default(uuid())
  createdAt               DateTime      @default(now())
  updatedAt               DateTime?     @updatedAt()
  type                    AccountType   @default(PUBLIC)
  name                    String?
  description             String?
  slackDomain             String?
  discordDomain           String?
  discordServerId         String?
  channels                channels[]
  slackTeamId             String?
  communityInviteUrl      String?
  redirectDomain          String?
  communityUrl            String?
  syncStatus              String        @default("NOT_STARTED")
  brandColor              String?
  homeUrl                 String?
  docsUrl                 String?
  logoUrl                 String?
  logoSquareUrl           String?
  faviconUrl              String?
  premium                 Boolean       @default(false)
  featurePreview          Boolean       @default(false)
  googleAnalyticsId       String?
  googleSiteVerification  String?
  anonymizeUsers          Boolean       @default(false)
  anonymize               AnonymizeType @default(NONE)
  newChannelsConfig       String        @default("NOT_HIDDEN")
  redirectDomainPropagate Boolean?
  searchSettings          String?

  auths                 auths[]
  users                 users9[]
  slackAuthorizations   slackAuthorizations[]
  discordAuthorizations discordAuthorizations[]
  invites               invites[]
  chat                  ChatType                @default(MEMBERS)
  integration           AccountIntegration      @default(NONE)
  apiKeys               apiKeys[]
  notifications         notifications[]
  integrationMatrix     integrationMatrix[]
  accountTag            accountTag[]
  embeddings            embeddings[]

  @@unique([redirectDomain])
  @@unique([slackDomain])
}

enum AccountType {
  PUBLIC
  PRIVATE
}

enum AccountIntegration {
  NONE
  SLACK
  DISCORD
}

model accountTag {
  account   accounts3 @relation(fields: [accountId], references: [id], onDelete: Cascade)
  accountId String
  tag       String

  @@unique([accountId, tag])
}

enum ChatType {
  NONE
  MANAGERS
  MEMBERS
}

model auths {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  email         String
  emailVerified DateTime?
  password      String
  salt          String
  token         String?

  account    accounts3?   @relation(fields: [accountId], references: [id])
  accountId  String?
  users      users9[]
  session    session[]
  readStatus readStatus[]

  notifications        notifications[] @relation("user")
  notificationsAuthor  notifications[] @relation("author")
  notificationsByEmail Boolean         @default(true)

  @@unique([email])
}

model memberships {
  user    users9   @relation(fields: [usersId], references: [id], onDelete: Cascade)
  channel channels @relation(fields: [channelsId], references: [id], onDelete: Cascade)

  usersId    String
  channelsId String
  archived   Boolean?

  @@unique([usersId, channelsId])
  @@index([usersId])
  @@index([channelsId])
}

model users9 {
  id              String     @id @default(uuid())
  messages        messages[]
  externalUserId  String?
  displayName     String?
  profileImageUrl String?
  isBot           Boolean
  isAdmin         Boolean
  mentions        mentions[]
  anonymousAlias  String?
  searchSettings  String?

  account    accounts3 @relation(fields: [accountsId], references: [id])
  accountsId String

  auth                       auths?                @relation(fields: [authsId], references: [id])
  authsId                    String?
  memberships                memberships[]
  invites                    invites[]
  role                       Roles                 @default(MEMBER)
  channelsIntegrationCreated channelsIntegration[] @relation("createdBy")
  channelsIntegrationUpdated channelsIntegration[] @relation("updatedBy")

  userThreadStatus  userThreadStatus[]
  channelsCreatedBy channels[]
  userStarredThread userStarredThread[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt()

  @@unique([externalUserId, accountsId])
  @@index([authsId])
}

enum Roles {
  OWNER
  ADMIN
  MEMBER
}

model mentions {
  messages   messages? @relation(fields: [messagesId], references: [id], onDelete: Cascade)
  messagesId String
  users      users9?   @relation(fields: [usersId], references: [id])
  usersId    String

  @@id([messagesId, usersId])
  @@index([messagesId])
  @@index([usersId])
}

model messageAttachments {
  id          String?   @default(uuid())
  messages    messages? @relation(fields: [messagesId], references: [id], onDelete: Cascade)
  messagesId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  //We need to change this to generate it's own id
  externalId  String
  name        String
  sourceUrl   String
  title       String?
  mimetype    String?
  internalUrl String?
  permalink   String?

  @@id([messagesId, externalId])
  @@index([messagesId])
}

model messageReactions {
  messages   messages? @relation(fields: [messagesId], references: [id], onDelete: Cascade)
  //We need to generate our own id here
  messagesId String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  name       String
  count      Int?
  users      Json?

  @@id([messagesId, name])
  @@index([messagesId])
}

model slackAuthorizations {
  id              String    @id @default(uuid())
  createdAt       DateTime  @default(now())
  accessToken     String
  botUserId       String
  scope           String
  userScope       String?
  authedUserId    String?
  userAccessToken String?
  joinChannel     Boolean   @default(true)
  syncFrom        DateTime?

  account    accounts3? @relation(fields: [accountsId], references: [id])
  accountsId String?
}

model discordAuthorizations {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  accessToken  String
  scope        String
  refreshToken String?
  expiresAt    DateTime?
  customBot    Boolean   @default(false)
  syncFrom     DateTime?

  account accounts3? @relation(fields: [accountsId], references: [id])

  accountsId String?
}

model integrationMatrix {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
  matrixUrl   String
  matrixToken String?
  enabled     Boolean    @default(true)
  account     accounts3? @relation(fields: [accountsId], references: [id], onDelete: Cascade)
  accountsId  String?
}

model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         auths    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model invites {
  id         String     @id @default(uuid())
  email      String
  accountsId String
  status     String     @default("PENDING")
  accounts   accounts3? @relation(fields: [accountsId], references: [id])

  createdById String
  createdBy   users9? @relation(fields: [createdById], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Roles    @default(MEMBER)

  @@unique([email, accountsId])
}

model readStatus {
  authId     String
  auth       auths    @relation(fields: [authId], references: [id], onDelete: Cascade)
  channelId  String
  channel    channels @relation(fields: [channelId], references: [id], onDelete: Cascade)
  lastReadAt BigInt
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([authId, channelId])
}

model userThreadStatus {
  userId    String
  user      users9    @relation(fields: [userId], references: [id], onDelete: Cascade)
  threadId  String
  thread    threads   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  muted     Boolean
  read      Boolean
  reminder  Boolean   @default(false)
  remindAt  DateTime?

  @@id([userId, threadId])
  @@index([threadId])
}

model userStarredThread {
  userId   String
  user     users9  @relation(fields: [userId], references: [id], onDelete: Cascade)
  threadId String
  thread   threads @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@id([userId, threadId])
}

enum notificationType {
  MENTION
  THREAD
  CHANNEL
  AT_CHANNEL
  BANG_CHANNEL
}

model notifications {
  id               String           @id @default(uuid())
  authId           String
  communityId      String
  notificationType notificationType
  channelId        String
  threadId         String?
  messageId        String?
  authorId         String

  auth      auths     @relation("user", fields: [authId], references: [id], onDelete: Cascade)
  community accounts3 @relation(fields: [communityId], references: [id], onDelete: Cascade)
  channel   channels  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  thread    threads?  @relation(fields: [threadId], references: [id], onDelete: Cascade)
  message   messages? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  author    auths     @relation("author", fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model apiKeys {
  id        String    @id @default(uuid())
  accountId String
  account   accounts3 @relation(fields: [accountId], references: [id])
  name      String
  hash      String
  scope     Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([hash])
  @@index([accountId])
}

model embeddings {
  accountId  String
  account    accounts3      @relation(fields: [accountId], references: [id], onDelete: Cascade)
  threadId   String
  thread     threads        @relation(fields: [threadId], references: [id], onDelete: Cascade)
  type       EmbeddingsType
  value      String
  confidence Int?

  embedding String

  @@id([threadId, type])
  @@index([accountId])
}

enum EmbeddingsType {
  QUESTION
  ANSWER
  SUMMARY
}

model Access {
  alias         String?
  createdAt     DateTime @default(now())
  granteeUserId String?
  id            String   @id @default(uuid())
  updatedAt     DateTime @updatedAt
  userId        String
  GranteeUser   User10?  @relation("accessGet", fields: [granteeUserId], references: [id])
  User          User10   @relation("accessGive", fields: [userId], references: [id])
}

model Account3 {
  accountType AccountType?
  balance     Float            @default(0)
  balances    AccountBalance[]
  comment     String?
  createdAt   DateTime         @default(now())
  currency    String?
  id          String           @default(uuid())
  isDefault   Boolean          @default(false)
  isExcluded  Boolean          @default(false)
  name        String?
  platformId  String?
  updatedAt   DateTime         @updatedAt
  userId      String
  Platform    Platform?        @relation(fields: [platformId], references: [id])
  User        User10           @relation(fields: [userId], references: [id])
  Order       Order[]

  @@id([id, userId])
}

model AccountBalance {
  accountId String
  createdAt DateTime @default(now())
  date      DateTime @default(now())
  id        String   @id @default(uuid())
  updatedAt DateTime @updatedAt
  userId    String
  value     Float
  Account   Account3 @relation(fields: [accountId, userId], onDelete: Cascade, references: [id, userId])
}

model Analytics {
  activityCount Int      @default(0)
  country       String?
  updatedAt     DateTime @updatedAt
  userId        String   @id
  User          User10   @relation(fields: [userId], references: [id])
}

model AuthDevice {
  createdAt           DateTime @default(now())
  credentialId        Bytes
  credentialPublicKey Bytes
  counter             Int
  id                  String   @id @default(uuid())
  updatedAt           DateTime @updatedAt
  userId              String
  User                User10   @relation(fields: [userId], references: [id])
}

model MarketData {
  createdAt   DateTime        @default(now())
  dataSource  DataSource
  date        DateTime
  id          String          @id @default(uuid())
  marketPrice Float
  state       MarketDataState @default(CLOSE)
  symbol      String

  @@unique([dataSource, date, symbol])
  @@index([symbol])
}

model Order {
  accountId       String?
  accountUserId   String?
  comment         String?
  createdAt       DateTime      @default(now())
  date            DateTime
  fee             Float
  id              String        @id @default(uuid())
  isDraft         Boolean       @default(false)
  quantity        Float
  symbolProfileId String
  type            Type
  unitPrice       Float
  updatedAt       DateTime      @updatedAt
  userId          String
  Account         Account3?     @relation(fields: [accountId, accountUserId], references: [id, userId])
  SymbolProfile   SymbolProfile @relation(fields: [symbolProfileId], references: [id])
  User            User10        @relation(fields: [userId], references: [id])
  tags            Tags[]
}

model Platform {
  id      String     @id @default(uuid())
  name    String?
  url     String     @unique
  Account Account3[]
}

model Property {
  key   String @id
  value String
}

model Settings {
  settings  Json?
  updatedAt DateTime @updatedAt
  userId    String   @id
  User      User10   @relation(fields: [userId], references: [id])
}

model SymbolProfile {
  assetClass             AssetClass?
  assetSubClass          AssetSubClass?
  comment                String?
  countries              Json?
  createdAt              DateTime                @default(now())
  currency               String
  dataSource             DataSource
  id                     String                  @id @default(uuid())
  isin                   String?
  name                   String?
  updatedAt              DateTime                @updatedAt
  scraperConfiguration   Json?
  sectors                Json?
  symbol                 String
  symbolMapping          Json?
  url                    String?
  Order                  Order[]
  SymbolProfileOverrides SymbolProfileOverrides?

  @@unique([dataSource, symbol])
}

model SymbolProfileOverrides {
  assetClass      AssetClass?
  assetSubClass   AssetSubClass?
  countries       Json?          @default("[]")
  name            String?
  sectors         Json?          @default("[]")
  url             String?
  symbolProfileId String         @id
  updatedAt       DateTime       @updatedAt
  SymbolProfile   SymbolProfile  @relation(fields: [symbolProfileId], references: [id])
}

model Subscription4 {
  createdAt DateTime @default(now())
  expiresAt DateTime
  id        String   @id @default(uuid())
  price     Float?
  updatedAt DateTime @updatedAt
  userId    String
  User      User10   @relation(fields: [userId], references: [id])
}

model Tags {
  id     String  @id @default(uuid())
  name   String  @unique
  orders Order[]
}

model User10 {
  accessToken   String?
  authChallenge String?
  createdAt     DateTime        @default(now())
  id            String          @id @default(uuid())
  provider      Provider        @default(ANONYMOUS)
  role          Role6           @default(USER)
  thirdPartyId  String?
  updatedAt     DateTime        @updatedAt
  Access        Access[]        @relation("accessGet")
  AccessGive    Access[]        @relation("accessGive")
  Account       Account3[]
  Analytics     Analytics?
  AuthDevice    AuthDevice[]
  Order         Order[]
  Settings      Settings?
  Subscription  Subscription4[]
}

enum AccountType2 {
  CASH
  SECURITIES
}

enum AssetClass {
  CASH
  COMMODITY
  EQUITY
  FIXED_INCOME
  REAL_ESTATE
}

enum AssetSubClass {
  BOND
  COMMODITY
  CRYPTOCURRENCY
  ETF
  MUTUALFUND
  PRECIOUS_METAL
  PRIVATE_EQUITY
  STOCK
}

enum DataSource {
  ALPHA_VANTAGE
  COINGECKO
  EOD_HISTORICAL_DATA
  FINANCIAL_MODELING_PREP
  GOOGLE_SHEETS
  MANUAL
  RAPID_API
  YAHOO
}

enum MarketDataState {
  CLOSE
  INTRADAY
}

enum Provider {
  ANONYMOUS
  GOOGLE
  INTERNET_IDENTITY
}

enum Role6 {
  ADMIN
  DEMO
  USER
}

enum Type {
  BUY
  DIVIDEND
  FEE
  INTEREST
  ITEM
  LIABILITY
  SELL
}

enum ViewMode {
  DEFAULT
  ZEN
}

model User11 {
  id        String    @id @unique @map("user_id") @db.Uuid
  username  String    @unique @db.VarChar(255)
  password  String    @db.VarChar(60)
  role      String    @map("role") @db.VarChar(50)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  website  Website[]
  teamUser TeamUser[]
  report   Report[]

  @@map("user11")
}

model Session3 {
  id           String    @id @unique @map("session_id") @db.Uuid
  websiteId    String    @map("website_id") @db.Uuid
  hostname     String?   @db.VarChar(100)
  browser      String?   @db.VarChar(20)
  os           String?   @db.VarChar(20)
  device       String?   @db.VarChar(20)
  screen       String?   @db.VarChar(11)
  language     String?   @db.VarChar(35)
  country      String?   @db.Char(2)
  subdivision1 String?   @db.VarChar(20)
  subdivision2 String?   @db.VarChar(50)
  city         String?   @db.VarChar(50)
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)

  websiteEvent WebsiteEvent[]
  sessionData  SessionData[]

  @@index([createdAt])
  @@index([websiteId])
  @@index([websiteId, createdAt])
  @@index([websiteId, createdAt, hostname])
  @@index([websiteId, createdAt, browser])
  @@index([websiteId, createdAt, os])
  @@index([websiteId, createdAt, device])
  @@index([websiteId, createdAt, screen])
  @@index([websiteId, createdAt, language])
  @@index([websiteId, createdAt, country])
  @@index([websiteId, createdAt, subdivision1])
  @@index([websiteId, createdAt, city])
  @@map("session3")
}

model Website {
  id        String    @id @unique @map("website_id") @db.Uuid
  name      String    @db.VarChar(100)
  domain    String?   @db.VarChar(500)
  shareId   String?   @unique @map("share_id") @db.VarChar(50)
  resetAt   DateTime? @map("reset_at") @db.Timestamptz(6)
  userId    String?   @map("user_id") @db.Uuid
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz(6)

  user        User11?       @relation(fields: [userId], references: [id])
  teamWebsite TeamWebsite[]
  eventData   EventData[]
  report      Report[]
  sessionData SessionData[]

  @@index([userId])
  @@index([createdAt])
  @@index([shareId])
  @@map("website")
}

model WebsiteEvent {
  id             String    @id() @map("event_id") @db.Uuid
  websiteId      String    @map("website_id") @db.Uuid
  sessionId      String    @map("session_id") @db.Uuid
  createdAt      DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  urlPath        String    @map("url_path") @db.VarChar(500)
  urlQuery       String?   @map("url_query") @db.VarChar(500)
  referrerPath   String?   @map("referrer_path") @db.VarChar(500)
  referrerQuery  String?   @map("referrer_query") @db.VarChar(500)
  referrerDomain String?   @map("referrer_domain") @db.VarChar(500)
  pageTitle      String?   @map("page_title") @db.VarChar(500)
  eventType      Int       @default(1) @map("event_type") @db.Integer
  eventName      String?   @map("event_name") @db.VarChar(50)

  eventData EventData[]
  session   Session3    @relation(fields: [sessionId], references: [id])

  @@index([createdAt])
  @@index([sessionId])
  @@index([websiteId])
  @@index([websiteId, createdAt])
  @@index([websiteId, createdAt, urlPath])
  @@index([websiteId, createdAt, urlQuery])
  @@index([websiteId, createdAt, referrerDomain])
  @@index([websiteId, createdAt, pageTitle])
  @@index([websiteId, createdAt, eventName])
  @@index([websiteId, sessionId, createdAt])
  @@map("website_event")
}

model EventData {
  id             String    @id() @map("event_data_id") @db.Uuid
  websiteId      String    @map("website_id") @db.Uuid
  websiteEventId String    @map("website_event_id") @db.Uuid
  eventKey       String    @map("event_key") @db.VarChar(500)
  stringValue    String?   @map("string_value") @db.VarChar(500)
  numberValue    Decimal?  @map("number_value") @db.Decimal(19, 4)
  dateValue      DateTime? @map("date_value") @db.Timestamptz(6)
  dataType       Int       @map("data_type") @db.Integer
  createdAt      DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)

  website      Website      @relation(fields: [websiteId], references: [id])
  websiteEvent WebsiteEvent @relation(fields: [websiteEventId], references: [id])

  @@index([createdAt])
  @@index([websiteId])
  @@index([websiteEventId])
  @@index([websiteId, createdAt])
  @@index([websiteId, createdAt, eventKey])
  @@map("event_data")
}

model SessionData {
  id          String    @id() @map("session_data_id") @db.Uuid
  websiteId   String    @map("website_id") @db.Uuid
  sessionId   String    @map("session_id") @db.Uuid
  sessionKey  String    @map("session_key") @db.VarChar(500)
  stringValue String?   @map("string_value") @db.VarChar(500)
  numberValue Decimal?  @map("number_value") @db.Decimal(19, 4)
  dateValue   DateTime? @map("date_value") @db.Timestamptz(6)
  dataType    Int       @map("data_type") @db.Integer
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  deletedAt   DateTime? @default(now()) @map("deleted_at") @db.Timestamptz(6)

  website Website  @relation(fields: [websiteId], references: [id])
  session Session3 @relation(fields: [sessionId], references: [id])

  @@index([createdAt])
  @@index([websiteId])
  @@index([sessionId])
  @@map("session_data")
}

model Team2 {
  id         String    @id() @unique() @map("team_id") @db.Uuid
  name       String    @db.VarChar(50)
  accessCode String?   @unique @map("access_code") @db.VarChar(50)
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  teamUser    TeamUser[]
  teamWebsite TeamWebsite[]

  @@index([accessCode])
  @@map("team")
}

model TeamUser {
  id        String    @id() @unique() @map("team_user_id") @db.Uuid
  teamId    String    @map("team_id") @db.Uuid
  userId    String    @map("user_id") @db.Uuid
  role      String    @map("role") @db.VarChar(50)
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  team Team2  @relation(fields: [teamId], references: [id])
  user User11 @relation(fields: [userId], references: [id])

  @@index([teamId])
  @@index([userId])
  @@map("team_user")
}

model TeamWebsite {
  id        String    @id() @unique() @map("team_website_id") @db.Uuid
  teamId    String    @map("team_id") @db.Uuid
  websiteId String    @map("website_id") @db.Uuid
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)

  team    Team2   @relation(fields: [teamId], references: [id])
  website Website @relation(fields: [websiteId], references: [id])

  @@index([teamId])
  @@index([websiteId])
  @@map("team_website")
}

model Report {
  id          String    @id() @unique() @map("report_id") @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  websiteId   String    @map("website_id") @db.Uuid
  type        String    @map("type") @db.VarChar(200)
  name        String    @map("name") @db.VarChar(200)
  description String    @map("description") @db.VarChar(500)
  parameters  String    @map("parameters") @db.VarChar(6000)
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)

  user    User11  @relation(fields: [userId], references: [id])
  website Website @relation(fields: [websiteId], references: [id])

  @@index([userId])
  @@index([websiteId])
  @@index([type])
  @@index([name])
  @@map("report")
}

model Team3 {
  id    String   @id @default(uuid())
  users User12[]
}

enum UploadStatus {
  UPLOADING
  UPLOADED
}

model File {
  name              String       @id
  format            String
  size              Int
  description       String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @default(now()) @updatedAt
  meta              String       @default("{}")
  status            UploadStatus @default(UPLOADING)
  isDeleted         Boolean      @default(false)
  uploaderProject   Project2?    @relation(fields: [uploaderProjectId], references: [id])
  uploaderProjectId String?
  assets            Asset[]
}

model Asset {
  id        String @default(uuid()) // not unique!
  projectId String
  file      File   @relation(fields: [name], references: [name])
  name      String

  @@id([id, projectId])
}

model User12 {
  id        String     @id @default(uuid())
  email     String?    @unique
  provider  String?
  image     String?
  username  String?
  createdAt DateTime   @default(now())
  team      Team3?     @relation(fields: [teamId], references: [id])
  teamId    String?
  projects  Project2[]
}

model Project2 {
  id                  String                 @id @default(uuid())
  createdAt           DateTime               @default(now())
  title               String
  domain              String                 @unique
  user                User12?                @relation(fields: [userId], references: [id])
  userId              String?
  build               Build2[]
  isDeleted           Boolean                @default(false)
  files               File[]
  projectDomain       ProjectDomain[]
  latestBuild         LatestBuildPerProject?
  ProjectSubscription ProjectSubscription[]
  SharedProject       SharedProject[]

  @@unique([id, isDeleted])
  @@unique([domain, isDeleted])
  @@unique([id, domain])
}

enum PublishStatus {
  PENDING
  PUBLISHED
  FAILED
}

model Build2 {
  id        String   @unique @default(uuid())
  version   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  pages     String

  project   Project2 @relation(fields: [projectId], references: [id])
  projectId String

  breakpoints           String @default("[]")
  styles                String @default("[]")
  styleSources          String @default("[]")
  styleSourceSelections String @default("[]")
  props                 String @default("[]")
  dataSources           String @default("[]")
  instances             String @default("[]")

  deployment    String?
  publishStatus PublishStatus @default(PENDING)

  @@id([id, projectId])
}

enum AuthorizationRelation {
  viewers
  editors
  builders
  administrators
}

model AuthorizationToken {
  token     String                @default(uuid())
  // No relation to Project, as the Authorization system is not tied to a project
  projectId String
  name      String                @default("")
  relation  AuthorizationRelation @default(viewers)
  createdAt DateTime              @default(now())

  @@id([token, projectId])
}

enum DomainStatus {
  INITIALIZING
  ACTIVE
  ERROR
  PENDING
}

// Domains  + last known status and last known txtRecord
// In the future we can update this table using queue, n8n or temporal workflows.
// As of now updates are done during UI interactions
model Domain3 {
  id        String   @id @default(uuid())
  domain    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  ProjectDomain ProjectDomain[]
  // Last known txtRecord of the domain (to check domain ownership)
  txtRecord     String?
  // create, init, pending, active, error
  status        DomainStatus    @default(INITIALIZING)
  // In case of status="error", this will contain the error message
  error         String?

  projectWithDomain ProjectWithDomain[]
}

model ProjectDomain {
  projectId String
  project   Project2 @relation(fields: [projectId], references: [id])
  domainId  String
  domain    Domain3  @relation(fields: [domainId], references: [id])
  createdAt DateTime @default(now())
  // Generated txt record to check domain ownership
  txtRecord String   @unique @default(uuid())

  // CNAME record to point to the domain
  cname String

  @@id([projectId, domainId])
  @@index([domainId])
}

view ProjectWithDomain {
  projectId String

  domainId  String
  domain    Domain3 @relation(fields: [domainId], references: [id])
  txtRecord String

  createdAt DateTime

  // CNAME record to point to the domain
  cname String

  verified Boolean
  // To count statistics per user
  userId   String?

  // We can deploy on per domain basis, here for each project domain we have latest build
  latestBuid LatestBuildPerProjectDomain?

  @@id([projectId, domainId])
}

view LatestBuildPerProjectDomain {
  domainId          String
  buildId           String
  projectId         String
  projectWithDomain ProjectWithDomain @relation(fields: [projectId, domainId], references: [projectId, domainId])

  isLatestBuild Boolean
  publishStatus PublishStatus
  updatedAt     DateTime

  @@id([projectId, domainId])
}

view LatestBuildPerProject {
  buildId String

  projectId String
  domain    String
  project   Project2 @relation(fields: [projectId, domain], references: [id, domain])

  isLatestBuild Boolean
  publishStatus PublishStatus
  updatedAt     DateTime

  @@id([projectId, domain])
}

// Dashboard
view DashboardProject {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  title       String
  domain      String
  userId      String?
  isDeleted   Boolean  @default(false)
  isPublished Boolean
}

model Workspace {
  id                     String                   @id() @default(uuid()) @db.Uuid
  name                   String
  domain                 String?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  Segment                Segment[]
  Journey                Journey[]
  UserProperty           UserProperty[]
  EmailProvider          EmailProvider[]
  DefaultEmailProvider   DefaultEmailProvider?
  EmailTemplate          EmailTemplate[]
  SegmentIOConfiguration SegmentIOConfiguration?
  CurrentUserEventsTable CurrentUserEventsTable?
  UserPropertyAssignment UserPropertyAssignment[]
  SegmentAssignment      SegmentAssignment[]
  Broadcast              Broadcast[]
  SubscriptionGroup      SubscriptionGroup[]
  WorkspaceMemberRole    WorkspaceMemberRole[]
  Secret                 Secrets[]
  WriteKey               WriteKey[]
  MessageTemplate        MessageTemplate[]
  OauthToken             OauthToken[]
  Integration            Integrations[]
  DefaultSmsProvider     DefaultSmsProvider?
  SmsProvider            SmsProvider[]

  @@unique([name])
}

enum DBResourceType {
  Declarative // For Declarative Configurable Resources
  Internal // For Internal Dynamic Resources
}

model Segment {
  id                  String              @id() @default(uuid()) @db.Uuid
  workspace           Workspace           @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId         String              @db.Uuid
  resourceType        DBResourceType      @default(Declarative)
  name                String
  definition          Json
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  subscriptionGroupId String?             @db.Uuid
  subscriptionGroup   SubscriptionGroup?  @relation(fields: [subscriptionGroupId], references: [id], onDelete: SetNull)
  SegmentAssignment   SegmentAssignment[]
  Broadcast           Broadcast[]

  @@unique([workspaceId, name])
  @@index([resourceType])
}

enum JourneyStatus {
  NotStarted
  Running
  Paused
}

model Journey {
  id               String             @id() @default(uuid()) @db.Uuid
  workspace        Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId      String             @db.Uuid
  name             String
  status           JourneyStatus      @default(NotStarted)
  definition       Json
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  UserJourneyEvent UserJourneyEvent[]

  @@unique([workspaceId, name])
}

enum DBCompletionStatus {
  NotStarted
  InProgress
  Successful
  Failed
}

model Broadcast {
  id          String             @id() @default(uuid()) @db.Uuid
  workspace   Workspace          @relation(fields: [workspaceId], references: [id])
  workspaceId String             @db.Uuid
  segment     Segment?           @relation(fields: [segmentId], references: [id], onDelete: SetNull)
  segmentId   String?            @db.Uuid
  name        String
  status      DBCompletionStatus @default(NotStarted)
  triggeredAt DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  @@unique([workspaceId, name])
}

model UserProperty {
  id                     String                   @id() @default(uuid()) @db.Uuid
  workspace              Workspace                @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId            String                   @db.Uuid
  name                   String
  resourceType           DBResourceType           @default(Declarative)
  definition             Json
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  UserPropertyAssignment UserPropertyAssignment[]

  @@unique([workspaceId, name])
}

model SegmentAssignment {
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @db.Uuid
  userId      String
  segment     Segment   @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  segmentId   String    @db.Uuid
  inSegment   Boolean

  @@unique([workspaceId, userId, segmentId])
}

model UserPropertyAssignment {
  workspace      Workspace    @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId    String       @db.Uuid
  userId         String
  userProperty   UserProperty @relation(fields: [userPropertyId], references: [id], onDelete: Cascade)
  userPropertyId String       @db.Uuid
  value          String

  @@unique([workspaceId, userPropertyId, userId])
  @@index([userId])
}

// TODO consolidate with generic MessageTemplate
model EmailTemplate {
  id          String    @id() @default(uuid()) @db.Uuid
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @db.Uuid
  name        String
  from        String
  subject     String
  body        String
  replyTo     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model MessageTemplate {
  id          String    @id() @default(uuid()) @db.Uuid
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @db.Uuid
  name        String
  definition  Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, name])
}

model DefaultEmailProvider {
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @db.Uuid

  emailProvider   EmailProvider @relation(fields: [emailProviderId], references: [id], onDelete: Cascade)
  emailProviderId String        @db.Uuid
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@unique([workspaceId])
}

model DefaultSmsProvider {
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @db.Uuid

  smsProvider   SmsProvider @relation(fields: [smsProviderId], references: [id], onDelete: Cascade)
  smsProviderId String      @db.Uuid
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([workspaceId])
}

model CurrentUserEventsTable {
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @db.Uuid
  version     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId])
}

model EmailProvider {
  id                   String                 @id() @default(uuid()) @db.Uuid
  workspace            Workspace              @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId          String                 @db.Uuid
  type                 String
  apiKey               String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  DefaultEmailProvider DefaultEmailProvider[]

  @@unique([workspaceId, type])
}

model SmsProvider {
  id                 String               @id() @default(uuid()) @db.Uuid
  workspace          Workspace            @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId        String               @db.Uuid
  secretId           String               @db.Uuid
  secret             Secrets              @relation(fields: [secretId], references: [id], onDelete: Cascade)
  type               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  DefaultSmsProvider DefaultSmsProvider[]

  @@unique([workspaceId, type])
}

model SegmentIOConfiguration {
  id           String    @id() @default(uuid()) @db.Uuid
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String    @db.Uuid
  sharedSecret String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([workspaceId])
}

// TODO add workspace id
model UserJourneyEvent {
  id               String   @id() @default(uuid()) @db.Uuid
  userId           String
  nodeId           String?
  journeyId        String?  @db.Uuid()
  journey          Journey? @relation(fields: [journeyId], references: [id], onDelete: SetNull)
  type             String
  journeyStartedAt DateTime
  createdAt        DateTime @default(now())

  @@unique([journeyId, userId, type, journeyStartedAt, nodeId])
}

enum DBSubscriptionGroupType {
  OptIn
  OptOut
}

enum DBChannelType {
  Email
  MobilePush
  Sms
}

model SubscriptionGroup {
  id          String                  @id() @default(uuid()) @db.Uuid
  workspace   Workspace               @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String                  @db.Uuid
  name        String
  channel     DBChannelType
  type        DBSubscriptionGroupType
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  Segment     Segment[]

  @@unique([workspaceId, name])
  @@index([workspaceId])
}

model WorkspaceMember {
  id            String  @id() @default(uuid()) @db.Uuid
  email         String? @unique
  emailVerified Boolean @default(false)
  image         String?
  name          String?
  nickname      String?

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  WorkspaceMemberRole   WorkspaceMemberRole[]
  WorkspaceMembeAccount WorkspaceMembeAccount[]
}

model WorkspaceMembeAccount {
  id String @id() @default(uuid()) @db.Uuid

  workspaceMember   WorkspaceMember @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade)
  workspaceMemberId String          @db.Uuid

  provider          String
  providerAccountId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

enum DBRoleType {
  Admin
  WorkspaceManager
  Author
  Viewer
}

model WorkspaceMemberRole {
  workspace         Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId       String          @db.Uuid
  workspaceMember   WorkspaceMember @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade)
  workspaceMemberId String          @db.Uuid
  role              DBRoleType      @default(Viewer)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@unique([workspaceId, workspaceMemberId])
}

model Secrets {
  id          String        @id() @default(uuid()) @db.Uuid
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String        @db.Uuid
  name        String
  value       String?
  configValue Json?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  WriteKey    WriteKey[]
  SmsProvider SmsProvider[]

  @@unique([workspaceId, name])
}

model WriteKey {
  id          String    @id() @default(uuid()) @db.Uuid
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @db.Uuid
  secret      Secrets   @relation(fields: [secretId], references: [id], onDelete: Cascade)
  secretId    String    @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, secretId])
}

model OauthToken {
  id           String    @id() @default(uuid()) @db.Uuid
  workspace    Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  String    @db.Uuid
  name         String
  refreshToken String
  accessToken  String
  expiresIn    Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([workspaceId, name])
}

model Integrations {
  id          String    @id() @default(uuid()) @db.Uuid
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @db.Uuid
  name        String
  definition  Json
  enabled     Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([workspaceId, name])
}

model Team4 {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @unique @db.VarChar(70)
  slug      String   @unique @db.VarChar(16)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  createdBy String   @db.Uuid
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  updatedBy String?  @db.Uuid

  registries               Registry[]
  projects                 Project3[]
  nodes                    Node[]
  users                    UsersOnTeams[]
  invitations              UserInvitation[]
  auditLog                 AuditLog[]
  notifications            Notification[]
  storages                 Storage[]
  configBundles            ConfigBundle[]
  NotificationEventOnTeam  NotificationEventOnTeam[]
  NotificationEventOnTeams NotificationEventOnTeams[]
}

model Token {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  name      String    @db.VarChar(70)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt DateTime? @db.Timestamptz(6)
  nonce     String    @db.Uuid

  @@unique([userId, name, nonce])
}

enum UserInvitationStatusEnum {
  pending
  expired
  declined
}

model UserInvitation {
  userId    String                   @db.Uuid
  teamId    String                   @db.Uuid
  email     String
  status    UserInvitationStatusEnum @default(pending)
  createdAt DateTime                 @default(now()) @db.Timestamptz(6)
  team      Team4                    @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
  @@unique([userId, teamId, email])
}

model UsersOnTeams {
  userId String       @db.Uuid
  role   UserRoleEnum
  teamId String       @db.Uuid
  team   Team4        @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
}

model Node {
  id             String        @id @default(uuid()) @db.Uuid
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  createdBy      String        @db.Uuid
  updatedAt      DateTime      @updatedAt @db.Timestamptz(6)
  updatedBy      String?       @db.Uuid
  name           String        @db.VarChar(70)
  type           NodeTypeEnum? @default(docker)
  description    String?
  icon           String?
  address        String?
  connectedAt    DateTime?     @db.Timestamptz(6)
  disconnectedAt DateTime?     @db.Timestamptz(6)
  team           Team4         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId         String        @db.Uuid

  deployments Deployments[]
  events      NodeEvent[]
  token       NodeToken?

  @@unique([name, teamId])
}

model NodeToken {
  nodeId    String @id @unique @db.Uuid
  nonce     String
  createdBy String @db.Uuid

  node Node @relation(fields: [nodeId], references: [id], onDelete: Cascade)
}

model Registry {
  id              String                 @id @default(uuid()) @db.Uuid
  createdAt       DateTime               @default(now()) @db.Timestamptz(6)
  createdBy       String                 @db.Uuid
  updatedAt       DateTime               @updatedAt @db.Timestamptz(6)
  updatedBy       String?                @db.Uuid
  name            String                 @db.VarChar(70)
  description     String?
  icon            String?
  url             String
  user            String?
  token           String?
  type            RegistryTypeEnum
  namespace       RegistryNamespaceEnum?
  imageNamePrefix String?
  apiUrl          String?

  images Image[]
  team   Team4   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String  @db.Uuid

  @@unique([name, teamId])
}

model Project3 {
  id          String          @id @default(uuid()) @db.Uuid
  createdAt   DateTime        @default(now()) @db.Timestamptz(6)
  createdBy   String          @db.Uuid
  updatedAt   DateTime        @updatedAt @db.Timestamptz(6)
  updatedBy   String?         @db.Uuid
  name        String          @db.VarChar(70)
  description String?
  type        ProjectTypeEnum

  versions Version[]
  team     Team4     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String    @db.Uuid

  @@unique([name, teamId])
}

model Version {
  id        String          @id @default(uuid()) @db.Uuid
  createdAt DateTime        @default(now()) @db.Timestamptz(6)
  createdBy String          @db.Uuid
  updatedAt DateTime        @updatedAt @db.Timestamptz(6)
  updatedBy String?         @db.Uuid
  name      String          @db.VarChar(70)
  changelog String?
  default   Boolean         @default(false)
  type      VersionTypeEnum @default(incremental)
  projectId String          @db.Uuid

  project     Project3                  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  images      Image[]
  deployments Deployments[]
  parent      VersionsOnParentVersion?  @relation("child")
  children    VersionsOnParentVersion[] @relation("parent")

  @@unique([projectId, name])
}

model VersionsOnParentVersion {
  versionId       String @unique @db.Uuid
  parentVersionId String @unique @db.Uuid

  child  Version @relation(name: "child", fields: [versionId], references: [id], onDelete: Cascade)
  parent Version @relation(name: "parent", fields: [parentVersionId], references: [id], onDelete: Cascade)

  @@id([versionId, parentVersionId])
}

model Image {
  id         String           @id @default(uuid()) @db.Uuid
  name       String
  tag        String?
  order      Int
  versionId  String           @db.Uuid
  registryId String           @db.Uuid
  config     ContainerConfig?
  instances  Instance[]
  createdAt  DateTime         @default(now()) @db.Timestamptz(6)
  createdBy  String           @db.Uuid
  updatedAt  DateTime         @updatedAt @db.Timestamptz(6)
  updatedBy  String?          @db.Uuid

  registry Registry @relation(fields: [registryId], references: [id], onDelete: Cascade)
  version  Version  @relation(fields: [versionId], references: [id], onDelete: Cascade)
}

enum NetworkMode {
  none
  host
  bridge
}

enum DeploymentStrategy {
  recreate
  rolling
}

enum RestartPolicy {
  always
  unlessStopped
  no
  onFailure
}

enum ExposeStrategy {
  none
  expose
  exposeWithTls
}

model ContainerConfig {
  id String @id @default(uuid()) @db.Uuid

  //Common
  name            String
  environment     Json?
  secrets         Json?
  capabilities    Json?
  expose          ExposeStrategy
  routing         Json?
  configContainer Json?
  user            Int            @default(-1)
  tty             Boolean
  ports           Json?
  portRanges      Json?
  volumes         Json?
  commands        Json?
  args            Json?
  initContainers  Json?
  storageSet      Boolean?
  storageId       String?        @db.Uuid
  storageConfig   Json?

  //Dagent
  logConfig     Json?
  restartPolicy RestartPolicy
  networkMode   NetworkMode
  networks      Json?
  dockerLabels  Json?

  //Crane
  deploymentStrategy DeploymentStrategy
  healthCheckConfig  Json?
  resourceConfig     Json?
  proxyHeaders       Boolean
  useLoadBalancer    Boolean
  extraLBAnnotations Json?
  customHeaders      Json?
  annotations        Json?
  labels             Json?
  metrics            Json?

  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId String @unique @db.Uuid

  storage Storage? @relation(fields: [storageId], references: [id], onDelete: Cascade)
}

model Deployments {
  id          String               @id @default(uuid()) @db.Uuid
  createdAt   DateTime             @default(now()) @db.Timestamptz(6)
  createdBy   String               @db.Uuid
  updatedAt   DateTime             @updatedAt @db.Timestamptz(6)
  updatedBy   String?              @db.Uuid
  note        String?
  prefix      String?
  status      DeploymentStatusEnum
  environment Json?
  versionId   String               @db.Uuid
  nodeId      String               @db.Uuid
  tries       Int                  @default(0)
  protected   Boolean              @default(false)

  version Version @relation(fields: [versionId], references: [id], onDelete: Cascade)
  node    Node    @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  instances     Instance[]
  events        DeploymentEvent[]
  tokens        DeploymentToken[]
  configBundles ConfigBundleOnDeployments[]
}

model DeploymentToken {
  id           String    @id @default(uuid()) @db.Uuid
  deploymentId String    @db.Uuid
  createdBy    String    @db.Uuid
  createdAt    DateTime  @default(now()) @db.Timestamptz(6)
  name         String
  expiresAt    DateTime? @db.Timestamptz(6)
  nonce        String    @db.Uuid

  deployment Deployments @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
  AuditLog   AuditLog[]

  @@unique([deploymentId])
  @@unique([deploymentId, nonce])
}

model Instance {
  id           String   @id @default(uuid()) @db.Uuid
  updatedAt    DateTime @updatedAt @db.Timestamptz(6)
  deploymentId String   @db.Uuid
  imageId      String   @db.Uuid

  deployment Deployments              @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
  image      Image                    @relation(fields: [imageId], references: [id], onDelete: Cascade)
  config     InstanceContainerConfig?
}

model InstanceContainerConfig {
  id         String @id @default(uuid()) @db.Uuid
  instanceId String @unique @db.Uuid

  //Common
  name            String?
  environment     Json?
  secrets         Json?
  capabilities    Json?
  expose          ExposeStrategy?
  routing         Json?
  configContainer Json?
  user            Int?
  tty             Boolean?
  ports           Json?
  portRanges      Json?
  volumes         Json?
  commands        Json?
  args            Json?
  initContainers  Json?
  storageSet      Boolean?
  storageId       String?         @unique @db.Uuid
  storageConfig   Json?

  //Dagent
  logConfig     Json?
  restartPolicy RestartPolicy?
  networkMode   NetworkMode?
  networks      Json?
  dockerLabels  Json?

  //Crane
  deploymentStrategy DeploymentStrategy?
  healthCheckConfig  Json?
  resourceConfig     Json?
  proxyHeaders       Boolean?
  useLoadBalancer    Boolean?
  extraLBAnnotations Json?
  customHeaders      Json?
  annotations        Json?
  labels             Json?
  metrics            Json?

  instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  storage  Storage? @relation(fields: [storageId], references: [id], onDelete: Cascade)
}

model DeploymentEvent {
  id           String                  @id @default(uuid()) @db.Uuid
  createdAt    DateTime                @default(now()) @db.Timestamptz(6)
  type         DeploymentEventTypeEnum
  value        Json
  deploymentId String                  @db.Uuid
  tryCount     Int                     @default(0)

  deployment Deployments @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
}

enum AuditLogContextEnum {
  http
  ws
  rpc
}

enum AuditLogRequestMethodEnum {
  get
  post
  put
  patch
  delete
}

enum AuditLogActorTypeEnum {
  user
  deploymentToken
}

model AuditLog {
  id                String                     @id @default(uuid()) @db.Uuid
  createdAt         DateTime                   @default(now()) @db.Timestamptz(6)
  actorType         AuditLogActorTypeEnum
  userId            String?                    @db.Uuid
  deploymentTokenId String?                    @db.Uuid
  teamId            String                     @db.Uuid
  context           AuditLogContextEnum
  method            AuditLogRequestMethodEnum?
  event             String
  data              Json?

  team            Team4            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  deploymentToken DeploymentToken? @relation(fields: [deploymentTokenId], references: [id], onDelete: SetNull) // is it ok on SetNull
}

enum UserRoleEnum {
  owner
  admin
  user
}

model Notification {
  id        String               @id @default(uuid()) @db.Uuid
  createdAt DateTime             @default(now()) @db.Timestamptz(6)
  createdBy String               @db.Uuid
  updatedAt DateTime             @updatedAt @db.Timestamptz(6)
  updatedBy String?              @db.Uuid
  name      String               @db.VarChar(70)
  url       String
  type      NotificationTypeEnum
  active    Boolean              @default(false)
  teamId    String               @db.Uuid

  team Team4 @relation(fields: [teamId], references: [id], onDelete: Cascade)

  events                          NotificationEvent[]
  NotificationEventOnNotification NotificationEventOnNotification[]

  @@unique([name, teamId])
}

model NotificationEvent {
  id             String                    @id @default(uuid()) @db.Uuid
  event          NotificationEventTypeEnum
  notificationId String                    @db.Uuid

  notification                    Notification                      @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  NotificationEventOnNotification NotificationEventOnNotification[]
  NotificationEventOnTeam         NotificationEventOnTeam[]
  NotificationEventOnTeams        NotificationEventOnTeams[]

  @@unique([event, notificationId])
}

model NodeEvent {
  id        String            @id @default(uuid()) @db.Uuid
  nodeId    String            @db.Uuid
  createdAt DateTime          @default(now()) @db.Timestamptz(6)
  event     NodeEventTypeEnum
  data      Json?

  node Node @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@map("NodeEvent")
}

enum ProjectTypeEnum {
  versionless
  versioned
}

enum VersionTypeEnum {
  incremental
  rolling
}

enum DeploymentStatusEnum {
  preparing
  inProgress
  successful
  failed
  obsolete
  downgraded
}

enum DeploymentEventTypeEnum {
  log
  deploymentStatus
  containerState
}

enum RegistryTypeEnum {
  v2
  hub
  gitlab
  github
  google
  unchecked
}

enum RegistryNamespaceEnum {
  organization
  user
  group
  project
}

enum NodeTypeEnum {
  docker
  k8s
}

enum NotificationTypeEnum {
  discord
  slack
  teams
}

enum NotificationEventTypeEnum {
  deploymentCreated
  versionCreated
  nodeAdded
  userInvited
}

enum NodeEventTypeEnum {
  installed
  connected
  left
  kicked
  update
  updateCompleted
  containerCommand
  tokenReplaced
}

model Storage {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  createdBy   String   @db.Uuid
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  updatedBy   String?  @db.Uuid
  name        String   @db.VarChar(70)
  description String?
  icon        String?
  url         String
  accessKey   String?
  secretKey   String?

  team   Team4  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String @db.Uuid

  containerConfigs       ContainerConfig[]
  instanceConfigs        InstanceContainerConfig[]
  StorageConfigOnStorage StorageConfigOnStorage[]
  ConfigBundleOnStorage  ConfigBundleOnStorage[]

  @@unique([name, teamId])
}

model ConfigBundle {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  description String?
  data        Json
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  createdBy   String   @db.Uuid
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  updatedBy   String?  @db.Uuid

  team   Team4  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String @db.Uuid

  deployments           ConfigBundleOnDeployments[]
  ConfigBundleOnStorage ConfigBundleOnStorage[]

  @@unique([name, teamId])
}

model ConfigBundleOnDeployments {
  deployment   Deployments @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
  deploymentId String      @db.Uuid

  configBundle   ConfigBundle @relation(fields: [configBundleId], references: [id], onDelete: Cascade)
  configBundleId String       @db.Uuid

  @@id([deploymentId, configBundleId])
}

model StorageConfig {
  id                     String                   @id @default(uuid()) @db.Uuid
  name                   String
  description            String?
  data                   Json
  createdAt              DateTime                 @default(now()) @db.Timestamptz(6)
  createdBy              String                   @db.Uuid
  updatedAt              DateTime                 @updatedAt @db.Timestamptz(6)
  updatedBy              String?                  @db.Uuid
  StorageConfigOnStorage StorageConfigOnStorage[]
}

model StorageConfigOnStorage {
  storage   Storage @relation(fields: [storageId], references: [id], onDelete: Cascade)
  storageId String  @db.Uuid

  storageConfig   StorageConfig @relation(fields: [storageConfigId], references: [id], onDelete: Cascade)
  storageConfigId String        @db.Uuid

  @@id([storageId, storageConfigId])
}

model ConfigBundleOnStorage {
  storage   Storage @relation(fields: [storageId], references: [id], onDelete: Cascade)
  storageId String  @db.Uuid

  configBundle   ConfigBundle @relation(fields: [configBundleId], references: [id], onDelete: Cascade)
  configBundleId String       @db.Uuid

  @@id([storageId, configBundleId])
}

model NotificationEventOnNotification {
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  notificationId String       @db.Uuid

  notificationEvent   NotificationEvent @relation(fields: [notificationEventId], references: [id], onDelete: Cascade)
  notificationEventId String            @db.Uuid

  @@id([notificationId, notificationEventId])
}

model NotificationEventOnTeam {
  team   Team4  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String @db.Uuid

  notificationEvent   NotificationEvent @relation(fields: [notificationEventId], references: [id], onDelete: Cascade)
  notificationEventId String            @db.Uuid

  @@id([teamId, notificationEventId])
}

model NotificationEventOnTeams {
  team   Team4  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String @db.Uuid

  notificationEvent   NotificationEvent @relation(fields: [notificationEventId], references: [id], onDelete: Cascade)
  notificationEventId String            @db.Uuid

  @@id([teamId, notificationEventId])
}

model ProjectSubscription {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  projectId String   @db.Uuid
  userId    String   @db.Uuid

  project Project2 @relation(fields: [projectId], references: [id], onDelete: Cascade)
  //user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model SharedProject {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  projectId String   @db.Uuid
  userId    String   @db.Uuid

  project Project2 @relation(fields: [projectId], references: [id], onDelete: Cascade)
  //user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model account {
  id      Int    @id @default(autoincrement())
  balance Int
  email   String @unique
}

model api_keys {
  allowed_ips   String[]
  created_at    DateTime
  created_by_id Int?
  hidden        Boolean  @default(false)
  id            Int      @id
  key           String
  updated_at    DateTime
  user_id       Int?     @unique

  @@index([key], name: "index_api_keys_on_key")
}

model application_requests {
  count    Int      @default(0)
  date     DateTime
  id       Int      @id
  req_type Int

  @@unique([date, req_type], name: "index_application_requests_on_date_and_req_type")
}

model ar_internal_metadata {
  created_at DateTime
  key        String   @id
  updated_at DateTime
  value      String?
}

model badge_groupings {
  created_at  DateTime
  description String?
  id          Int      @id
  name        String
  position    Int
  updated_at  DateTime
}

model badges {
  allow_title       Boolean  @default(false)
  auto_revoke       Boolean  @default(true)
  badge_grouping_id Int      @default(5)
  badge_type_id     Int
  created_at        DateTime
  description       String?
  enabled           Boolean  @default(true)
  grant_count       Int      @default(0)
  icon              String?  @default("fa-certificate::character varying")
  id                Int      @id
  image             String?
  listable          Boolean? @default(true)
  long_description  String?
  multiple_grant    Boolean  @default(false)
  name              String   @unique
  query             String?
  show_posts        Boolean  @default(false)
  system            Boolean  @default(false)
  target_posts      Boolean? @default(false)
  trigger           Int?
  updated_at        DateTime

  @@index([badge_type_id], name: "index_badges_on_badge_type_id")
}

model badge_types {
  created_at DateTime
  id         Int      @id
  name       String   @unique
  updated_at DateTime
}

model categories {
  allow_badges                      Boolean  @default(true)
  all_topics_wiki                   Boolean  @default(false)
  auto_close_based_on_last_post     Boolean? @default(false)
  auto_close_hours                  Float?
  color                             String   @default("AB9364::character varying")
  contains_messages                 Boolean?
  created_at                        DateTime
  default_top_period                String?  @default("all::character varying")
  default_view                      String?
  description                       String?
  email_in                          String?  @unique
  email_in_allow_strangers          Boolean? @default(false)
  id                                Int      @id
  latest_post_id                    Int?
  latest_topic_id                   Int?
  mailinglist_mirror                Boolean  @default(false)
  minimum_required_tags             Int?     @default(0)
  name                              String   @unique
  name_lower                        String
  navigate_to_first_post_after_read Boolean  @default(false)
  num_featured_topics               Int?     @default(3)
  parent_category_id                Int?
  position                          Int?
  post_count                        Int      @default(0)
  posts_day                         Int?     @default(0)
  posts_month                       Int?     @default(0)
  posts_week                        Int?     @default(0)
  posts_year                        Int?     @default(0)
  read_restricted                   Boolean  @default(false)
  show_subcategory_list             Boolean? @default(false)
  slug                              String
  sort_ascending                    Boolean?
  sort_order                        String?
  subcategory_list_style            String?  @default("rows_with_featured_topics::character varying")
  suppress_from_latest              Boolean? @default(false)
  text_color                        String   @default("FFFFFF::character varying")
  topic_count                       Int      @default(0)
  topic_featured_link_allowed       Boolean? @default(true)
  topic_id                          Int?
  topics_day                        Int?     @default(0)
  topics_month                      Int?     @default(0)
  topics_week                       Int?     @default(0)
  topics_year                       Int?     @default(0)
  topic_template                    String?
  updated_at                        DateTime
  uploaded_background_id            Int?
  uploaded_logo_id                  Int?
  user_id                           Int

  @@index([topic_count], name: "index_categories_on_topic_count")
}

model categories_web_hooks {
  category_id Int
  web_hook_id Int

  @@unique([web_hook_id, category_id], name: "index_categories_web_hooks_on_web_hook_id_and_category_id")
}

model category_custom_fields {
  category_id Int
  created_at  DateTime
  id          Int      @id
  name        String
  updated_at  DateTime
  value       String?

  @@index([category_id, name], name: "index_category_custom_fields_on_category_id_and_name")
}

model category_featured_topics {
  category_id Int
  created_at  DateTime
  id          Int      @id
  rank        Int      @default(0)
  topic_id    Int
  updated_at  DateTime

  @@unique([category_id, topic_id], name: "cat_featured_threads")
  @@index([category_id, rank], name: "index_category_featured_topics_on_category_id_and_rank")
}

model category_groups {
  category_id     Int
  created_at      DateTime
  group_id        Int
  id              Int      @id
  permission_type Int?     @default(1)
  updated_at      DateTime
}

model category_search_data {
  category_id Int     @id
  locale      String?
  raw_data    String?
  search_data String?
  version     Int?    @default(0)

  @@index([search_data], name: "idx_search_category")
}

model category_tag_groups {
  category_id  Int
  created_at   DateTime?
  id           Int       @id
  tag_group_id Int
  updated_at   DateTime?

  @@unique([category_id, tag_group_id], name: "idx_category_tag_groups_ix1")
}

model category_tags {
  category_id Int
  created_at  DateTime?
  id          Int       @id
  tag_id      Int
  updated_at  DateTime?

  @@unique([category_id, tag_id], name: "idx_category_tags_ix1")
  @@unique([tag_id, category_id], name: "idx_category_tags_ix2")
}

model category_tag_stats {
  category_id Int
  id          Int @id
  tag_id      Int
  topic_count Int @default(0)

  @@unique([category_id, tag_id], name: "index_category_tag_stats_on_category_id_and_tag_id")
  @@index([category_id], name: "index_category_tag_stats_on_category_id")
  @@index([category_id, topic_count], name: "index_category_tag_stats_on_category_id_and_topic_count")
  @@index([tag_id], name: "index_category_tag_stats_on_tag_id")
}

model category_users {
  category_id        Int
  id                 Int @id
  notification_level Int
  user_id            Int

  @@unique([user_id, category_id, notification_level], name: "idx_category_users_u1")
  @@unique([notification_level, user_id, category_id], name: "idx_category_users_u2")
}

model child_themes {
  child_theme_id  Int?
  created_at      DateTime?
  id              Int       @id
  parent_theme_id Int?
  updated_at      DateTime?

  @@unique([child_theme_id, parent_theme_id], name: "index_child_themes_on_child_theme_id_and_parent_theme_id")
  @@unique([parent_theme_id, child_theme_id], name: "index_child_themes_on_parent_theme_id_and_child_theme_id")
}

model color_scheme_colors {
  color_scheme_id Int
  created_at      DateTime
  hex             String
  id              Int      @id
  name            String
  updated_at      DateTime

  @@index([color_scheme_id], name: "index_color_scheme_colors_on_color_scheme_id")
}

model color_schemes {
  base_scheme_id String?
  created_at     DateTime
  id             Int      @id
  name           String
  theme_id       Int?
  updated_at     DateTime
  version        Int      @default(1)
  via_wizard     Boolean  @default(false)
}

model custom_emojis {
  created_at DateTime
  id         Int      @id
  name       String   @unique
  updated_at DateTime
  upload_id  Int
}

model developers {
  id      Int @id
  user_id Int
}

model directory_items {
  created_at     DateTime?
  days_visited   Int       @default(0)
  id             Int       @id
  likes_given    Int
  likes_received Int
  period_type    Int
  post_count     Int
  posts_read     Int       @default(0)
  topic_count    Int
  topics_entered Int
  updated_at     DateTime?
  user_id        Int

  @@unique([user_id, period_type], name: "index_directory_items_on_period_type_and_user_id")
  @@index([days_visited], name: "index_directory_items_on_days_visited")
  @@index([likes_given], name: "index_directory_items_on_likes_given")
  @@index([likes_received], name: "index_directory_items_on_likes_received")
  @@index([post_count], name: "index_directory_items_on_post_count")
  @@index([posts_read], name: "index_directory_items_on_posts_read")
  @@index([topic_count], name: "index_directory_items_on_topic_count")
  @@index([topics_entered], name: "index_directory_items_on_topics_entered")
}

model drafts {
  created_at DateTime
  data       String
  draft_key  String
  id         Int      @id
  revisions  Int      @default(1)
  sequence   Int      @default(0)
  updated_at DateTime
  user_id    Int

  @@index([user_id, draft_key], name: "index_drafts_on_user_id_and_draft_key")
}

model draft_sequences {
  draft_key String
  id        Int    @id
  sequence  Int
  user_id   Int

  @@unique([user_id, draft_key], name: "index_draft_sequences_on_user_id_and_draft_key")
}

model email_change_requests {
  change_state       Int
  created_at         DateTime
  id                 Int      @id
  new_email          String
  new_email_token_id Int?
  old_email          String
  old_email_token_id Int?
  updated_at         DateTime
  user_id            Int

  @@index([user_id], name: "index_email_change_requests_on_user_id")
}

model email_logs {
  bounced    Boolean  @default(false)
  bounce_key String?
  created_at DateTime
  email_type String
  id         Int      @id
  message_id String?
  post_id    Int?
  to_address String
  updated_at DateTime
  user_id    Int?

  @@index([bounced], name: "index_email_logs_on_bounced")
  @@index([created_at], name: "index_email_logs_on_created_at")
  @@index([message_id], name: "index_email_logs_on_message_id")
  @@index([post_id], name: "index_email_logs_on_post_id")
  @@index([user_id], name: "index_email_logs_on_user_id")
}

model email_tokens {
  confirmed  Boolean  @default(false)
  created_at DateTime
  email      String
  expired    Boolean  @default(false)
  id         Int      @id
  token      String   @unique
  updated_at DateTime
  user_id    Int

  @@index([user_id], name: "index_email_tokens_on_user_id")
}

model embeddable_hosts {
  category_id    Int
  class_name     String?
  created_at     DateTime?
  host           String
  id             Int       @id
  path_whitelist String?
  updated_at     DateTime?
}

model facebook_user_infos {
  about_me         String?
  avatar_url       String?
  created_at       DateTime
  email            String?
  facebook_user_id Int      @unique
  first_name       String?
  gender           String?
  id               Int      @id
  last_name        String?
  link             String?
  location         String?
  name             String?
  updated_at       DateTime
  user_id          Int      @unique
  username         String?
  website          String?
}

model github_user_infos {
  created_at     DateTime
  github_user_id Int      @unique
  id             Int      @id
  screen_name    String
  updated_at     DateTime
  user_id        Int      @unique
}

model given_daily_likes {
  given_date    DateTime
  likes_given   Int
  limit_reached Boolean  @default(false)
  user_id       Int

  @@unique([user_id, given_date], name: "index_given_daily_likes_on_user_id_and_given_date")
  @@index([limit_reached, user_id], name: "index_given_daily_likes_on_limit_reached_and_user_id")
}

model google_user_infos {
  created_at     DateTime
  email          String?
  first_name     String?
  gender         String?
  google_user_id String   @unique
  id             Int      @id
  last_name      String?
  link           String?
  name           String?
  picture        String?
  profile_link   String?
  updated_at     DateTime
  user_id        Int      @unique
}

model group_archived_messages {
  created_at DateTime?
  group_id   Int
  id         Int       @id
  topic_id   Int
  updated_at DateTime?

  @@unique([group_id, topic_id], name: "index_group_archived_messages_on_group_id_and_topic_id")
}

model group_custom_fields {
  created_at DateTime
  group_id   Int
  id         Int      @id
  name       String
  updated_at DateTime
  value      String?

  @@index([group_id, name], name: "index_group_custom_fields_on_group_id_and_name")
}

model group_histories {
  acting_user_id Int
  action         Int
  created_at     DateTime
  group_id       Int
  id             Int      @id
  new_value      String?
  prev_value     String?
  subject        String?
  target_user_id Int?
  updated_at     DateTime

  @@index([acting_user_id], name: "index_group_histories_on_acting_user_id")
  @@index([action], name: "index_group_histories_on_action")
  @@index([group_id], name: "index_group_histories_on_group_id")
  @@index([target_user_id], name: "index_group_histories_on_target_user_id")
}

model group_mentions {
  created_at DateTime?
  group_id   Int?
  id         Int       @id
  post_id    Int?
  updated_at DateTime?

  @@unique([group_id, post_id], name: "index_group_mentions_on_group_id_and_post_id")
  @@unique([post_id, group_id], name: "index_group_mentions_on_post_id_and_group_id")
}

model groups {
  allow_membership_requests          Boolean  @default(false)
  automatic                          Boolean  @default(false)
  automatic_membership_email_domains String?
  automatic_membership_retroactive   Boolean? @default(false)
  bio_cooked                         String?
  bio_raw                            String?
  created_at                         DateTime
  default_notification_level         Int      @default(3)
  flair_bg_color                     String?
  flair_color                        String?
  flair_url                          String?
  full_name                          String?
  grant_trust_level                  Int?
  has_messages                       Boolean  @default(false)
  id                                 Int      @id
  incoming_email                     String?  @unique
  membership_request_template        String?
  mentionable_level                  Int?     @default(0)
  messageable_level                  Int?     @default(0)
  name                               String   @unique
  primary_group                      Boolean  @default(false)
  public_admission                   Boolean  @default(false)
  public_exit                        Boolean  @default(false)
  title                              String?
  updated_at                         DateTime
  user_count                         Int      @default(0)
  visibility_level                   Int      @default(0)
}

model groups_web_hooks {
  group_id    Int
  web_hook_id Int

  @@unique([web_hook_id, group_id], name: "index_groups_web_hooks_on_web_hook_id_and_group_id")
}

model group_users {
  created_at         DateTime
  group_id           Int
  id                 Int      @id
  notification_level Int      @default(2)
  owner              Boolean  @default(false)
  updated_at         DateTime
  user_id            Int

  @@unique([group_id, user_id], name: "index_group_users_on_group_id_and_user_id")
  @@unique([user_id, group_id], name: "index_group_users_on_user_id_and_group_id")
}

model incoming_domains {
  https Boolean @default(false)
  id    Int     @id
  name  String
  port  Int

  @@unique([name, https, port], name: "index_incoming_domains_on_name_and_https_and_port")
}

model incoming_emails {
  cc_addresses      String?
  created_at        DateTime
  error             String?
  from_address      String?
  id                Int      @id
  is_auto_generated Boolean? @default(false)
  is_bounce         Boolean  @default(false)
  message_id        String?
  post_id           Int?
  raw               String?
  rejection_message String?
  subject           String?
  to_addresses      String?
  topic_id          Int?
  updated_at        DateTime
  user_id           Int?

  @@index([created_at], name: "index_incoming_emails_on_created_at")
  @@index([error], name: "index_incoming_emails_on_error")
  @@index([message_id], name: "index_incoming_emails_on_message_id")
  @@index([post_id], name: "index_incoming_emails_on_post_id")
}

model incoming_links {
  created_at          DateTime
  current_user_id     Int?
  id                  Int      @id
  incoming_referer_id Int?
  ip_address          String?
  post_id             Int
  user_id             Int?

  @@index([created_at, user_id], name: "index_incoming_links_on_created_at_and_user_id")
  @@index([post_id], name: "index_incoming_links_on_post_id")
}

model incoming_referers {
  id                 Int    @id
  incoming_domain_id Int
  path               String

  @@unique([path, incoming_domain_id], name: "index_incoming_referers_on_path_and_incoming_domain_id")
}

model instagram_user_infos {
  created_at        DateTime
  id                Int      @id
  instagram_user_id Int?
  screen_name       String?
  updated_at        DateTime
  user_id           Int?
}

model invited_groups {
  created_at DateTime
  group_id   Int?
  id         Int      @id
  invite_id  Int?
  updated_at DateTime
}

model invites2 {
  created_at     DateTime
  custom_message String?
  deleted_at     DateTime?
  deleted_by_id  Int?
  email          String?
  id             Int       @id
  invalidated_at DateTime?
  invited_by_id  Int
  invite_key     String    @unique
  moderator      Boolean   @default(false)
  redeemed_at    DateTime?
  updated_at     DateTime
  user_id        Int?

  @@index([email, invited_by_id], name: "index_invites_on_email_and_invited_by_id")
}

model javascript_caches {
  content        String
  created_at     DateTime
  digest         String?
  id             Int      @id
  theme_field_id Int
  updated_at     DateTime

  @@index([digest], name: "index_javascript_caches_on_digest")
  @@index([theme_field_id], name: "index_javascript_caches_on_theme_field_id")
}

model message_bus {
  context    String?
  created_at DateTime
  data       String?
  id         Int      @id
  name       String?

  @@index([created_at], name: "index_message_bus_on_created_at")
}

model muted_users {
  created_at    DateTime?
  id            Int       @id
  muted_user_id Int
  updated_at    DateTime?
  user_id       Int

  @@unique([muted_user_id, user_id], name: "index_muted_users_on_muted_user_id_and_user_id")
  @@unique([user_id, muted_user_id], name: "index_muted_users_on_user_id_and_muted_user_id")
}

model notifications2 {
  created_at        DateTime
  data              String
  id                Int      @id
  notification_type Int
  post_action_id    Int?
  post_number       Int?
  read              Boolean  @default(false)
  topic_id          Int?
  updated_at        DateTime
  user_id           Int

  @@unique([user_id, id], name: "index_notifications_on_user_id_and_id")
  @@index([notification_type, user_id], name: "idx_notifications_speedup_unread_count")
  @@index([post_action_id], name: "index_notifications_on_post_action_id")
  @@index([user_id, created_at], name: "index_notifications_on_user_id_and_created_at")
  @@index([user_id, post_number, topic_id], name: "index_notifications_on_user_id_and_topic_id_and_post_number")
}

model oauth2_user_infos {
  created_at DateTime
  email      String?
  id         Int      @id
  name       String?
  provider   String
  uid        String
  updated_at DateTime
  user_id    Int

  @@unique([uid, provider], name: "index_oauth2_user_infos_on_uid_and_provider")
}

model onceoff_logs {
  created_at DateTime
  id         Int      @id
  job_name   String?
  updated_at DateTime

  @@index([job_name], name: "index_onceoff_logs_on_job_name")
}

model optimized_images {
  extension String
  filesize  Int?
  height    Int
  id        Int    @id
  sha1      String
  upload_id Int
  url       String
  width     Int

  @@unique([upload_id, width, height], name: "index_optimized_images_on_upload_id_and_width_and_height")
  @@index([upload_id], name: "index_optimized_images_on_upload_id")
}

model permalinks {
  category_id  Int?
  created_at   DateTime?
  external_url String?
  id           Int       @id
  post_id      Int?
  topic_id     Int?
  updated_at   DateTime?
  url          String    @unique
}

model plugin_store_rows {
  id          Int     @id
  key         String
  plugin_name String
  type_name   String
  value       String?

  @@unique([plugin_name, key], name: "index_plugin_store_rows_on_plugin_name_and_key")
}

model post_actions {
  agreed_at           DateTime?
  agreed_by_id        Int?
  created_at          DateTime
  deferred_at         DateTime?
  deferred_by_id      Int?
  deleted_at          DateTime?
  deleted_by_id       Int?
  disagreed_at        DateTime?
  disagreed_by_id     Int?
  id                  Int       @id
  post_action_type_id Int
  post_id             Int
  related_post_id     Int?
  staff_took_action   Boolean   @default(false)
  targets_topic       Boolean   @default(false)
  updated_at          DateTime
  user_id             Int

  @@unique([targets_topic, user_id, post_action_type_id, post_id], name: "idx_unique_actions")
  @@unique([post_id, targets_topic, user_id], name: "idx_unique_flags")
  @@index([post_id], name: "index_post_actions_on_post_id")
  @@index([post_action_type_id, user_id], name: "index_post_actions_on_user_id_and_post_action_type_id")
}

model post_action_types {
  created_at DateTime
  icon       String?
  id         Int      @id
  is_flag    Boolean  @default(false)
  name_key   String
  position   Int      @default(0)
  updated_at DateTime
}

model post_custom_fields {
  created_at DateTime
  id         Int      @id
  name       String
  post_id    Int
  updated_at DateTime
  value      String?

  @@index([post_id], name: "idx_post_custom_fields_akismet")
  @@index([name], name: "index_post_custom_fields_on_name_and_value")
  @@index([post_id, name], name: "index_post_custom_fields_on_post_id_and_name")
}

model post_details {
  created_at DateTime
  extra      String?
  id         Int      @id
  key        String?
  post_id    Int?
  updated_at DateTime
  value      String?

  @@unique([post_id, key], name: "index_post_details_on_post_id_and_key")
}

model post_replies {
  id         Int      @id @default(autoincrement())
  created_at DateTime
  post_id    Int?
  reply_id   Int?
  updated_at DateTime

  @@unique([post_id, reply_id], name: "index_post_replies_on_post_id_and_reply_id")
}

model post_reply_keys {
  created_at DateTime
  id         Int      @id
  post_id    Int
  reply_key  String   @unique
  updated_at DateTime
  user_id    Int

  @@unique([user_id, post_id], name: "index_post_reply_keys_on_user_id_and_post_id")
}

model post_revisions {
  created_at    DateTime
  hidden        Boolean  @default(false)
  id            Int      @id
  modifications String?
  number        Int?
  post_id       Int?
  updated_at    DateTime
  user_id       Int?

  @@index([post_id], name: "index_post_revisions_on_post_id")
  @@index([post_id, number], name: "index_post_revisions_on_post_id_and_number")
}

model posts {
  action_code             String?
  avg_time                Int?
  baked_at                DateTime?
  baked_version           Int?
  bookmark_count          Int       @default(0)
  cooked                  String
  cook_method             Int       @default(1)
  created_at              DateTime
  deleted_at              DateTime?
  deleted_by_id           Int?
  edit_reason             String?
  hidden                  Boolean   @default(false)
  hidden_at               DateTime?
  hidden_reason_id        Int?
  id                      Int       @id
  illegal_count           Int       @default(0)
  image_url               String?
  inappropriate_count     Int       @default(0)
  incoming_link_count     Int       @default(0)
  last_editor_id          Int?
  last_version_at         DateTime
  like_count              Int       @default(0)
  like_score              Int       @default(0)
  locked_by_id            Int?
  notify_moderators_count Int       @default(0)
  notify_user_count       Int       @default(0)
  off_topic_count         Int       @default(0)
  percent_rank            Float?    @default(1)
  post_number             Int
  post_type               Int       @default(1)
  public_version          Int       @default(1)
  quote_count             Int       @default(0)
  raw                     String
  raw_email               String?
  reads                   Int       @default(0)
  reply_count             Int       @default(0)
  reply_quoted            Boolean   @default(false)
  reply_to_post_number    Int?
  reply_to_user_id        Int?
  score                   Float?
  self_edits              Int       @default(0)
  sort_order              Int?
  spam_count              Int       @default(0)
  topic_id                Int
  updated_at              DateTime
  user_deleted            Boolean   @default(false)
  user_id                 Int?
  version                 Int       @default(1)
  via_email               Boolean   @default(false)
  wiki                    Boolean   @default(false)
  word_count              Int?

  @@unique([topic_id, post_number], name: "index_posts_on_topic_id_and_post_number")
  @@index([topic_id, created_at], name: "idx_posts_created_at_topic_id")
  @@index([post_number, topic_id], name: "idx_posts_deleted_posts")
  @@index([user_id], name: "idx_posts_user_id_deleted_at")
  @@index([reply_to_post_number], name: "index_posts_on_reply_to_post_number")
  @@index([percent_rank, topic_id], name: "index_posts_on_topic_id_and_percent_rank")
  @@index([sort_order, topic_id], name: "index_posts_on_topic_id_and_sort_order")
  @@index([created_at, user_id], name: "index_posts_on_user_id_and_created_at")
}

model post_search_data {
  locale      String?
  post_id     Int     @id
  raw_data    String?
  search_data String?
  version     Int?    @default(0)

  @@index([search_data], name: "idx_search_post")
}

model post_stats {
  composer_open_duration_msecs Int?
  created_at                   DateTime?
  drafts_saved                 Int?
  id                           Int       @id
  post_id                      Int?
  typing_duration_msecs        Int?
  updated_at                   DateTime?

  @@index([post_id], name: "index_post_stats_on_post_id")
}

model post_timings {
  msecs       Int
  post_number Int
  topic_id    Int
  user_id     Int

  @@unique([topic_id, post_number, user_id], name: "post_timings_unique")
  @@index([user_id], name: "index_post_timings_on_user_id")
  @@index([topic_id, post_number], name: "post_timings_summary")
}

model post_uploads {
  id        Int @id
  post_id   Int
  upload_id Int

  @@unique([post_id, upload_id], name: "idx_unique_post_uploads")
  @@index([post_id], name: "index_post_uploads_on_post_id")
  @@index([upload_id], name: "index_post_uploads_on_upload_id")
}

model push_subscriptions {
  created_at DateTime
  data       String
  id         Int      @id
  updated_at DateTime
  user_id    Int
}

model queued_posts {
  approved_at    DateTime?
  approved_by_id Int?
  created_at     DateTime?
  id             Int       @id
  post_options   String
  queue          String
  raw            String
  rejected_at    DateTime?
  rejected_by_id Int?
  state          Int
  topic_id       Int?
  updated_at     DateTime?
  user_id        Int

  @@index([created_at, queue, state], name: "by_queue_status")
  @@index([state, created_at, topic_id, queue], name: "by_queue_status_topic")
}

model quoted_posts {
  created_at     DateTime
  id             Int      @id
  post_id        Int
  quoted_post_id Int
  updated_at     DateTime

  @@unique([post_id, quoted_post_id], name: "index_quoted_posts_on_post_id_and_quoted_post_id")
  @@unique([quoted_post_id, post_id], name: "index_quoted_posts_on_quoted_post_id_and_post_id")
}

model remote_themes {
  about_url         String?
  branch            String?
  commits_behind    Int?
  created_at        DateTime?
  id                Int       @id
  last_error_text   String?
  license_url       String?
  local_version     String?
  private_key       String?
  remote_updated_at DateTime?
  remote_url        String
  remote_version    String?
  updated_at        DateTime?
}

model scheduler_stats {
  duration_ms       Int?
  error             String?
  hostname          String
  id                Int      @id
  live_slots_finish Int?
  live_slots_start  Int?
  name              String
  pid               Int
  started_at        DateTime
  success           Boolean?
}

model schema_migration_details {
  created_at    DateTime
  direction     String?
  duration      Int?
  git_version   String?
  hostname      String?
  id            Int      @id
  name          String?
  rails_version String?
  version       String

  @@index([version], name: "index_schema_migration_details_on_version")
}

model schema_migrations {
  version String @unique
}

model screened_emails {
  action_type   Int
  created_at    DateTime
  email         String    @unique
  id            Int       @id
  ip_address    String?
  last_match_at DateTime?
  match_count   Int       @default(0)
  updated_at    DateTime

  @@index([last_match_at], name: "index_screened_emails_on_last_match_at")
}

model screened_ip_addresses {
  action_type   Int
  created_at    DateTime
  id            Int       @id
  ip_address    String    @unique
  last_match_at DateTime?
  match_count   Int       @default(0)
  updated_at    DateTime

  @@index([last_match_at], name: "index_screened_ip_addresses_on_last_match_at")
}

model screened_urls {
  action_type   Int
  created_at    DateTime
  domain        String
  id            Int       @id
  ip_address    String?
  last_match_at DateTime?
  match_count   Int       @default(0)
  updated_at    DateTime
  url           String    @unique

  @@index([last_match_at], name: "index_screened_urls_on_last_match_at")
}

model search_logs {
  created_at         DateTime
  id                 Int      @id
  ip_address         String?
  search_result_id   Int?
  search_result_type Int?
  search_type        Int
  term               String
  user_id            Int?
}

model shared_drafts {
  category_id Int
  created_at  DateTime
  id          Int      @id
  topic_id    Int      @unique
  updated_at  DateTime

  @@index([category_id], name: "index_shared_drafts_on_category_id")
}

model single_sign_on_records {
  created_at                      DateTime
  external_avatar_url             String?
  external_card_background_url    String?
  external_email                  String?
  external_id                     String   @unique
  external_name                   String?
  external_profile_background_url String?
  external_username               String?
  id                              Int      @id
  last_payload                    String
  updated_at                      DateTime
  user_id                         Int
}

model site_settings {
  created_at DateTime
  data_type  Int
  id         Int      @id
  name       String
  updated_at DateTime
  value      String?
}

model skipped_email_logs {
  created_at    DateTime
  custom_reason String?
  email_type    String
  id            Int      @id
  post_id       Int?
  reason_type   Int
  to_address    String
  updated_at    DateTime
  user_id       Int?

  @@index([created_at], name: "index_skipped_email_logs_on_created_at")
  @@index([post_id], name: "index_skipped_email_logs_on_post_id")
  @@index([reason_type], name: "index_skipped_email_logs_on_reason_type")
  @@index([user_id], name: "index_skipped_email_logs_on_user_id")
}

model stylesheet_cache {
  content    String
  created_at DateTime?
  digest     String
  id         Int       @id
  source_map String?
  target     String
  theme_id   Int
  updated_at DateTime?

  @@unique([target, digest], name: "index_stylesheet_cache_on_target_and_digest")
}

model tag_group_memberships {
  created_at   DateTime?
  id           Int       @id
  tag_group_id Int
  tag_id       Int
  updated_at   DateTime?

  @@unique([tag_group_id, tag_id], name: "index_tag_group_memberships_on_tag_group_id_and_tag_id")
}

model tag_group_permissions {
  created_at      DateTime
  group_id        Int
  id              Int      @id
  permission_type Int      @default(1)
  tag_group_id    Int
  updated_at      DateTime

  @@index([group_id], name: "index_tag_group_permissions_on_group_id")
  @@index([tag_group_id], name: "index_tag_group_permissions_on_tag_group_id")
}

model tag_groups {
  created_at    DateTime?
  id            Int       @id
  name          String
  one_per_topic Boolean?  @default(false)
  parent_tag_id Int?
  updated_at    DateTime?
}

model tags {
  created_at     DateTime?
  id             Int       @id
  name           String    @unique
  pm_topic_count Int       @default(0)
  topic_count    Int       @default(0)
  updated_at     DateTime?
}

model tag_search_data {
  locale      String?
  raw_data    String?
  search_data String?
  tag_id      Int     @id
  version     Int?    @default(0)

  @@index([search_data], name: "idx_search_tag")
}

model tag_users {
  created_at         DateTime?
  id                 Int       @id
  notification_level Int
  tag_id             Int
  updated_at         DateTime?
  user_id            Int

  @@unique([tag_id, user_id, notification_level], name: "idx_tag_users_ix1")
  @@unique([notification_level, user_id, tag_id], name: "idx_tag_users_ix2")
}

model theme_fields {
  compiler_version Int       @default(0)
  created_at       DateTime?
  error            String?
  id               Int       @id
  name             String
  target_id        Int
  theme_id         Int
  type_id          Int       @default(0)
  updated_at       DateTime?
  upload_id        Int?
  value            String
  value_baked      String?

  @@unique([theme_id, target_id, type_id, name], name: "theme_field_unique_index")
}

model themes {
  color_scheme_id  Int?
  compiler_version Int      @default(0)
  component        Boolean  @default(false)
  created_at       DateTime
  hidden           Boolean  @default(false)
  id               Int      @id
  name             String
  remote_theme_id  Int?     @unique
  updated_at       DateTime
  user_id          Int
  user_selectable  Boolean  @default(false)
}

model theme_settings {
  created_at DateTime
  data_type  Int
  id         Int      @id
  name       String
  theme_id   Int
  updated_at DateTime
  value      String?
}

model topic_allowed_groups {
  group_id Int
  id       Int @id
  topic_id Int

  @@unique([group_id, topic_id], name: "index_topic_allowed_groups_on_group_id_and_topic_id")
  @@unique([topic_id, group_id], name: "index_topic_allowed_groups_on_topic_id_and_group_id")
}

model topic_allowed_users {
  created_at DateTime
  id         Int      @id
  topic_id   Int
  updated_at DateTime
  user_id    Int

  @@unique([topic_id, user_id], name: "index_topic_allowed_users_on_topic_id_and_user_id")
  @@unique([user_id, topic_id], name: "index_topic_allowed_users_on_user_id_and_topic_id")
}

model topic_custom_fields {
  created_at DateTime
  id         Int      @id
  name       String
  topic_id   Int
  updated_at DateTime
  value      String?

  @@index([topic_id, name], name: "index_topic_custom_fields_on_topic_id_and_name")
  @@index([value, name], name: "topic_custom_fields_value_key_idx")
}

model topic_embeds {
  content_sha1  String?
  created_at    DateTime
  deleted_at    DateTime?
  deleted_by_id Int?
  embed_url     String    @unique
  id            Int       @id
  post_id       Int
  topic_id      Int
  updated_at    DateTime
}

model topic_invites {
  created_at DateTime
  id         Int      @id
  invite_id  Int
  topic_id   Int
  updated_at DateTime

  @@unique([topic_id, invite_id], name: "index_topic_invites_on_topic_id_and_invite_id")
  @@index([invite_id], name: "index_topic_invites_on_invite_id")
}

model topic_link_clicks {
  created_at    DateTime
  id            Int      @id
  ip_address    String?
  topic_link_id Int
  updated_at    DateTime
  user_id       Int?

  @@index([topic_link_id], name: "by_link")
}

model topic_links {
  clicks        Int       @default(0)
  crawled_at    DateTime?
  created_at    DateTime
  domain        String
  extension     String?
  id            Int       @id
  internal      Boolean   @default(false)
  link_post_id  Int?
  link_topic_id Int?
  post_id       Int?
  quote         Boolean   @default(false)
  reflection    Boolean?  @default(false)
  title         String?
  topic_id      Int
  updated_at    DateTime
  url           String
  user_id       Int

  @@unique([topic_id, post_id, url], name: "unique_post_links")
  @@index([extension], name: "index_topic_links_on_extension")
  @@index([reflection, link_post_id], name: "index_topic_links_on_link_post_id_and_reflection")
  @@index([post_id], name: "index_topic_links_on_post_id")
  @@index([topic_id], name: "index_topic_links_on_topic_id")
}

model topics {
  archetype                 String    @default("regular::character varying")
  archived                  Boolean   @default(false)
  avg_time                  Int?
  bumped_at                 DateTime
  category_id               Int?
  closed                    Boolean   @default(false)
  created_at                DateTime
  deleted_at                DateTime?
  deleted_by_id             Int?
  excerpt                   String?
  fancy_title               String?
  featured_link             String?
  featured_user1_id         Int?
  featured_user2_id         Int?
  featured_user3_id         Int?
  featured_user4_id         Int?
  has_summary               Boolean   @default(false)
  highest_post_number       Int       @default(0)
  highest_staff_post_number Int       @default(0)
  id                        Int       @id
  image_url                 String?
  incoming_link_count       Int       @default(0)
  last_posted_at            DateTime?
  last_post_user_id         Int
  like_count                Int       @default(0)
  moderator_posts_count     Int       @default(0)
  notify_moderators_count   Int       @default(0)
  participant_count         Int?      @default(1)
  percent_rank              Float     @default(1)
  pinned_at                 DateTime?
  pinned_globally           Boolean   @default(false)
  pinned_until              DateTime?
  posts_count               Int       @default(0)
  reply_count               Int       @default(0)
  score                     Float?
  slug                      String?
  spam_count                Int       @default(0)
  subtype                   String?
  title                     String
  updated_at                DateTime
  user_id                   Int?
  views                     Int       @default(0)
  visible                   Boolean   @default(true)
  word_count                Int?

  @@index([id, deleted_at, visible, archetype, category_id], name: "idx_topics_front_page")
  @@index([user_id], name: "idx_topics_user_id_deleted_at")
  @@index([slug], name: "idxtopicslug")
  @@index([bumped_at], name: "index_topics_on_bumped_at")
  @@index([visible, created_at], name: "index_topics_on_created_at_and_visible")
  @@index([deleted_at, id], name: "index_topics_on_id_and_deleted_at")
  @@index([pinned_at], name: "index_topics_on_pinned_at")
  @@index([pinned_globally], name: "index_topics_on_pinned_globally")
}

model topic_search_data {
  locale      String
  raw_data    String?
  search_data String?
  topic_id    Int     @id
  version     Int?    @default(0)

  @@index([search_data], name: "idx_search_topic")
}

model topic_tags {
  created_at DateTime?
  id         Int       @id
  tag_id     Int
  topic_id   Int
  updated_at DateTime?

  @@unique([topic_id, tag_id], name: "index_topic_tags_on_topic_id_and_tag_id")
}

model topic_timers {
  based_on_last_post Boolean   @default(false)
  category_id        Int?
  created_at         DateTime?
  deleted_at         DateTime?
  deleted_by_id      Int?
  execute_at         DateTime
  id                 Int       @id
  public_type        Boolean?  @default(true)
  status_type        Int
  topic_id           Int       @unique
  updated_at         DateTime?
  user_id            Int

  @@index([user_id], name: "index_topic_timers_on_user_id")
}

model topic_users {
  bookmarked               Boolean?  @default(false)
  cleared_pinned_at        DateTime?
  first_visited_at         DateTime?
  highest_seen_post_number Int?
  id                       Int       @id
  last_emailed_post_number Int?
  last_read_post_number    Int?
  last_visited_at          DateTime?
  liked                    Boolean?  @default(false)
  notification_level       Int       @default(1)
  notifications_changed_at DateTime?
  notifications_reason_id  Int?
  posted                   Boolean   @default(false)
  topic_id                 Int
  total_msecs_viewed       Int       @default(0)
  user_id                  Int

  @@unique([topic_id, user_id], name: "index_topic_users_on_topic_id_and_user_id")
  @@unique([user_id, topic_id], name: "index_topic_users_on_user_id_and_topic_id")
}

model topic_views {
  ip_address String?
  topic_id   Int      @unique
  user_id    Int?
  viewed_at  DateTime

  @@unique([topic_id, ip_address, user_id], name: "uniq_ip_or_user_id_topic_views")
  @@index([topic_id, viewed_at], name: "index_topic_views_on_topic_id_and_viewed_at")
  @@index([viewed_at, user_id], name: "index_topic_views_on_user_id_and_viewed_at")
  @@index([viewed_at, topic_id], name: "index_topic_views_on_viewed_at_and_topic_id")
}

model top_topics {
  all_score                Float? @default(0)
  daily_likes_count        Int    @default(0)
  daily_op_likes_count     Int    @default(0)
  daily_posts_count        Int    @default(0)
  daily_score              Float? @default(0)
  daily_views_count        Int    @default(0)
  id                       Int    @id
  monthly_likes_count      Int    @default(0)
  monthly_op_likes_count   Int    @default(0)
  monthly_posts_count      Int    @default(0)
  monthly_score            Float? @default(0)
  monthly_views_count      Int    @default(0)
  quarterly_likes_count    Int    @default(0)
  quarterly_op_likes_count Int    @default(0)
  quarterly_posts_count    Int    @default(0)
  quarterly_score          Float? @default(0)
  quarterly_views_count    Int    @default(0)
  topic_id                 Int?   @unique
  weekly_likes_count       Int    @default(0)
  weekly_op_likes_count    Int    @default(0)
  weekly_posts_count       Int    @default(0)
  weekly_score             Float? @default(0)
  weekly_views_count       Int    @default(0)
  yearly_likes_count       Int    @default(0)
  yearly_op_likes_count    Int    @default(0)
  yearly_posts_count       Int    @default(0)
  yearly_score             Float? @default(0)
  yearly_views_count       Int    @default(0)

  @@index([all_score], name: "index_top_topics_on_all_score")
  @@index([daily_likes_count], name: "index_top_topics_on_daily_likes_count")
  @@index([daily_op_likes_count], name: "index_top_topics_on_daily_op_likes_count")
  @@index([daily_posts_count], name: "index_top_topics_on_daily_posts_count")
  @@index([daily_score], name: "index_top_topics_on_daily_score")
  @@index([daily_views_count], name: "index_top_topics_on_daily_views_count")
  @@index([monthly_likes_count], name: "index_top_topics_on_monthly_likes_count")
  @@index([monthly_op_likes_count], name: "index_top_topics_on_monthly_op_likes_count")
  @@index([monthly_posts_count], name: "index_top_topics_on_monthly_posts_count")
  @@index([monthly_score], name: "index_top_topics_on_monthly_score")
  @@index([monthly_views_count], name: "index_top_topics_on_monthly_views_count")
  @@index([quarterly_likes_count], name: "index_top_topics_on_quarterly_likes_count")
  @@index([quarterly_op_likes_count], name: "index_top_topics_on_quarterly_op_likes_count")
  @@index([quarterly_posts_count], name: "index_top_topics_on_quarterly_posts_count")
  @@index([quarterly_views_count], name: "index_top_topics_on_quarterly_views_count")
  @@index([weekly_likes_count], name: "index_top_topics_on_weekly_likes_count")
  @@index([weekly_op_likes_count], name: "index_top_topics_on_weekly_op_likes_count")
  @@index([weekly_posts_count], name: "index_top_topics_on_weekly_posts_count")
  @@index([weekly_score], name: "index_top_topics_on_weekly_score")
  @@index([weekly_views_count], name: "index_top_topics_on_weekly_views_count")
  @@index([yearly_likes_count], name: "index_top_topics_on_yearly_likes_count")
  @@index([yearly_op_likes_count], name: "index_top_topics_on_yearly_op_likes_count")
  @@index([yearly_posts_count], name: "index_top_topics_on_yearly_posts_count")
  @@index([yearly_score], name: "index_top_topics_on_yearly_score")
  @@index([yearly_views_count], name: "index_top_topics_on_yearly_views_count")
}

model translation_overrides {
  compiled_js     String?
  created_at      DateTime
  id              Int      @id
  locale          String
  translation_key String
  updated_at      DateTime
  value           String

  @@unique([locale, translation_key], name: "index_translation_overrides_on_locale_and_translation_key")
}

model twitter_user_infos {
  created_at      DateTime
  email           String?
  id              Int      @id
  screen_name     String
  twitter_user_id Int      @unique
  updated_at      DateTime
  user_id         Int      @unique
}

model unsubscribe_keys {
  created_at           DateTime?
  key                  String    @id
  post_id              Int?
  topic_id             Int?
  unsubscribe_key_type String?
  updated_at           DateTime?
  user_id              Int

  @@index([created_at], name: "index_unsubscribe_keys_on_created_at")
}

model uploads {
  created_at        DateTime
  extension         String?
  filesize          Int
  height            Int?
  id                Int      @id
  origin            String?
  original_filename String
  retain_hours      Int?
  sha1              String?  @unique
  thumbnail_height  Int?
  thumbnail_width   Int?
  updated_at        DateTime
  url               String
  user_id           Int
  width             Int?

  @@index([id, url], name: "index_uploads_on_id_and_url")
  @@index([url], name: "index_uploads_on_url")
  @@index([user_id], name: "index_uploads_on_user_id")
}

model user_actions {
  acting_user_id  Int?
  action_type     Int
  created_at      DateTime
  id              Int      @id
  queued_post_id  Int?
  target_post_id  Int?
  target_topic_id Int?
  target_user_id  Int?
  updated_at      DateTime
  user_id         Int

  @@unique([acting_user_id, action_type, user_id, target_topic_id, target_post_id], name: "idx_unique_rows")
  @@index([created_at, action_type, user_id], name: "idx_user_actions_speed_up_user_all")
  @@index([acting_user_id], name: "index_user_actions_on_acting_user_id")
  @@index([target_post_id], name: "index_user_actions_on_target_post_id")
  @@index([action_type, user_id], name: "index_user_actions_on_user_id_and_action_type")
}

model user_api_keys {
  application_name String
  client_id        String    @unique
  created_at       DateTime?
  id               Int       @id
  key              String    @unique
  last_used_at     DateTime
  push_url         String?
  revoked_at       DateTime?
  scopes           String[]
  updated_at       DateTime?
  user_id          Int

  @@index([user_id], name: "index_user_api_keys_on_user_id")
}

model user_archived_messages {
  created_at DateTime?
  id         Int       @id
  topic_id   Int
  updated_at DateTime?
  user_id    Int

  @@unique([user_id, topic_id], name: "index_user_archived_messages_on_user_id_and_topic_id")
}

model user_auth_token_logs {
  action             String
  auth_token         String?
  client_ip          String?
  created_at         DateTime?
  id                 Int       @id
  path               String?
  user_agent         String?
  user_auth_token_id Int?
  user_id            Int?
}

model user_auth_tokens {
  auth_token      String    @unique
  auth_token_seen Boolean   @default(false)
  client_ip       String?
  created_at      DateTime?
  id              Int       @id
  prev_auth_token String    @unique
  rotated_at      DateTime
  seen_at         DateTime?
  updated_at      DateTime?
  user_agent      String?
  user_id         Int
}

model user_avatars {
  created_at                     DateTime
  custom_upload_id               Int?
  gravatar_upload_id             Int?
  id                             Int       @id
  last_gravatar_download_attempt DateTime?
  updated_at                     DateTime
  user_id                        Int

  @@index([custom_upload_id], name: "index_user_avatars_on_custom_upload_id")
  @@index([gravatar_upload_id], name: "index_user_avatars_on_gravatar_upload_id")
  @@index([user_id], name: "index_user_avatars_on_user_id")
}

model user_badges {
  badge_id        Int
  granted_at      DateTime
  granted_by_id   Int
  id              Int      @id
  notification_id Int?
  post_id         Int?
  seq             Int      @default(0)
  user_id         Int

  @@unique([user_id, badge_id, post_id], name: "index_user_badges_on_badge_id_and_user_id_and_post_id")
  @@unique([seq, badge_id, user_id], name: "index_user_badges_on_badge_id_and_user_id_and_seq")
  @@index([user_id, badge_id], name: "index_user_badges_on_badge_id_and_user_id")
  @@index([user_id], name: "index_user_badges_on_user_id")
}

model user_custom_fields {
  created_at DateTime
  id         Int      @id
  name       String
  updated_at DateTime
  user_id    Int
  value      String?

  @@index([user_id, name], name: "index_user_custom_fields_on_user_id_and_name")
}

model user_emails {
  created_at DateTime?
  email      String
  id         Int       @id
  primary    Boolean   @default(false)
  updated_at DateTime?
  user_id    Int

  @@unique([user_id, primary], name: "index_user_emails_on_user_id_and_primary")
  @@index([user_id], name: "index_user_emails_on_user_id")
}

model user_exports {
  created_at DateTime?
  file_name  String
  id         Int       @id
  updated_at DateTime?
  upload_id  Int?
  user_id    Int
}

model user_field_options {
  created_at    DateTime?
  id            Int       @id
  updated_at    DateTime?
  user_field_id Int
  value         String
}

model user_fields {
  created_at        DateTime?
  description       String
  editable          Boolean   @default(false)
  external_name     String?
  external_type     String?
  field_type        String
  id                Int       @id
  name              String
  position          Int?      @default(0)
  required          Boolean   @default(true)
  show_on_profile   Boolean   @default(false)
  show_on_user_card Boolean   @default(false)
  updated_at        DateTime?
}

model user_histories {
  acting_user_id Int?
  action         Int
  admin_only     Boolean? @default(false)
  category_id    Int?
  context        String?
  created_at     DateTime
  custom_type    String?
  details        String?
  email          String?
  id             Int      @id
  ip_address     String?
  new_value      String?
  post_id        Int?
  previous_value String?
  subject        String?
  target_user_id Int?
  topic_id       Int?
  updated_at     DateTime

  @@index([action, acting_user_id, id], name: "index_user_histories_on_acting_user_id_and_action_and_id")
  @@index([id, action], name: "index_user_histories_on_action_and_id")
  @@index([category_id], name: "index_user_histories_on_category_id")
  @@index([subject, id], name: "index_user_histories_on_subject_and_id")
  @@index([id, target_user_id], name: "index_user_histories_on_target_user_id_and_id")
}

model user_open_ids {
  active     Boolean
  created_at DateTime
  email      String
  id         Int      @id
  updated_at DateTime
  url        String
  user_id    Int

  @@index([url], name: "index_user_open_ids_on_url")
}

model user_options {
  allow_private_messages           Boolean   @default(true)
  automatically_unpin_topics       Boolean   @default(true)
  auto_track_topics_after_msecs    Int?
  digest_after_minutes             Int?
  disable_jump_reply               Boolean   @default(false)
  dynamic_favicon                  Boolean   @default(false)
  email_always                     Boolean   @default(false)
  email_digests                    Boolean?
  email_direct                     Boolean   @default(true)
  email_in_reply_to                Boolean   @default(true)
  email_previous_replies           Int       @default(2)
  email_private_messages           Boolean   @default(true)
  enable_quoting                   Boolean   @default(true)
  external_links_in_new_tab        Boolean   @default(false)
  hide_profile_and_presence        Boolean   @default(false)
  homepage_id                      Int?
  include_tl0_in_digests           Boolean?  @default(false)
  last_redirected_to_top_at        DateTime?
  like_notification_frequency      Int       @default(1)
  mailing_list_mode                Boolean   @default(false)
  mailing_list_mode_frequency      Int       @default(1)
  new_topic_duration_minutes       Int?
  notification_level_when_replying Int?
  theme_ids                        Int[]
  theme_key_seq                    Int       @default(0)
  user_id                          Int       @unique
}

model user_profiles {
  badge_granted_title  Boolean? @default(false)
  bio_cooked           String?
  bio_cooked_version   Int?
  bio_raw              String?
  card_background      String?
  dismissed_banner_key Int?
  location             String?
  profile_background   String?
  user_id              Int      @id
  views                Int      @default(0)
  website              String?

  @@index([bio_cooked_version], name: "index_user_profiles_on_bio_cooked_version")
  @@index([card_background], name: "index_user_profiles_on_card_background")
  @@index([profile_background], name: "index_user_profiles_on_profile_background")
}

model user_profile_views {
  id              Int      @id
  ip_address      String?
  user_id         Int?
  user_profile_id Int
  viewed_at       DateTime

  @@unique([viewed_at, user_profile_id, user_id, ip_address], name: "unique_profile_view_user_or_ip")
  @@index([user_id], name: "index_user_profile_views_on_user_id")
  @@index([user_profile_id], name: "index_user_profile_views_on_user_profile_id")
}

model users {
  active                    Boolean   @default(false)
  admin                     Boolean   @default(false)
  approved                  Boolean   @default(false)
  approved_at               DateTime?
  approved_by_id            Int?
  created_at                DateTime
  date_of_birth             DateTime?
  first_seen_at             DateTime?
  flag_level                Int       @default(0)
  group_locked_trust_level  Int?
  id                        Int       @id
  ip_address                String?
  last_emailed_at           DateTime?
  last_posted_at            DateTime?
  last_seen_at              DateTime?
  locale                    String?
  manual_locked_trust_level Int?
  moderator                 Boolean?  @default(false)
  name                      String?
  password_hash             String?
  previous_visit_at         DateTime?
  primary_group_id          Int?
  registration_ip_address   String?
  salt                      String?
  seen_notification_id      Int       @default(0)
  silenced_till             DateTime?
  staged                    Boolean   @default(false)
  suspended_at              DateTime?
  suspended_till            DateTime?
  title                     String?
  trust_level               Int
  updated_at                DateTime
  uploaded_avatar_id        Int?
  username                  String    @unique
  username_lower            String    @unique
  views                     Int       @default(0)

  @@index([id], name: "idx_users_admin")
  @@index([id], name: "idx_users_moderator")
  @@index([last_posted_at], name: "index_users_on_last_posted_at")
  @@index([last_seen_at], name: "index_users_on_last_seen_at")
  @@index([uploaded_avatar_id], name: "index_users_on_uploaded_avatar_id")
}

model user_search_data {
  locale      String?
  raw_data    String?
  search_data String?
  user_id     Int     @id
  version     Int?    @default(0)

  @@index([search_data], name: "idx_search_user")
}

model user_second_factors {
  created_at DateTime
  data       String
  enabled    Boolean   @default(false)
  id         Int       @id
  last_used  DateTime?
  method     Int
  updated_at DateTime
  user_id    Int

  @@index([user_id], name: "index_user_second_factors_on_user_id")
}

model user_stats {
  bounce_score             Float     @default(0)
  days_visited             Int       @default(0)
  first_post_created_at    DateTime?
  likes_given              Int       @default(0)
  likes_received           Int       @default(0)
  new_since                DateTime
  post_count               Int       @default(0)
  posts_read_count         Int       @default(0)
  read_faq                 DateTime?
  reset_bounce_score_after DateTime?
  time_read                Int       @default(0)
  topic_count              Int       @default(0)
  topic_reply_count        Int       @default(0)
  topics_entered           Int       @default(0)
  user_id                  Int       @id
}

model user_uploads {
  created_at DateTime
  id         Int      @id
  upload_id  Int
  user_id    Int

  @@unique([upload_id, user_id], name: "index_user_uploads_on_upload_id_and_user_id")
}

model user_visits {
  id         Int      @id
  mobile     Boolean? @default(false)
  posts_read Int?     @default(0)
  time_read  Int      @default(0)
  user_id    Int
  visited_at DateTime

  @@unique([user_id, visited_at], name: "index_user_visits_on_user_id_and_visited_at")
  @@index([visited_at, time_read, user_id], name: "index_user_visits_on_user_id_and_visited_at_and_time_read")
  @@index([mobile, visited_at], name: "index_user_visits_on_visited_at_and_mobile")
}

model user_warnings {
  created_at    DateTime?
  created_by_id Int
  id            Int       @id
  topic_id      Int       @unique
  updated_at    DateTime?
  user_id       Int

  @@index([user_id], name: "index_user_warnings_on_user_id")
}

model watched_words {
  action     Int
  created_at DateTime?
  id         Int       @id
  updated_at DateTime?
  word       String

  @@unique([action, word], name: "index_watched_words_on_action_and_word")
}

model web_crawler_requests {
  count      Int      @default(0)
  date       DateTime
  id         Int      @id
  user_agent String

  @@unique([date, user_agent], name: "index_web_crawler_requests_on_date_and_user_agent")
}

model web_hook_events {
  created_at       DateTime?
  duration         Int?      @default(0)
  headers          String?
  id               Int       @id
  payload          String?
  response_body    String?
  response_headers String?
  status           Int?      @default(0)
  updated_at       DateTime?
  web_hook_id      Int

  @@index([web_hook_id], name: "index_web_hook_events_on_web_hook_id")
}

model web_hook_event_types {
  id   Int    @id
  name String
}

model web_hook_event_types_hooks {
  web_hook_event_type_id Int
  web_hook_id            Int

  @@unique([web_hook_event_type_id, web_hook_id], name: "idx_web_hook_event_types_hooks_on_ids")
}

model web_hooks {
  active               Boolean   @default(false)
  content_type         Int       @default(1)
  created_at           DateTime?
  id                   Int       @id
  last_delivery_status Int       @default(1)
  payload_url          String
  secret               String?   @default("::character varying")
  status               Int       @default(1)
  updated_at           DateTime?
  verify_certificate   Boolean   @default(true)
  wildcard_web_hook    Boolean   @default(false)
}

// Robot model
model Robot {
  id             Int              @id @default(autoincrement())
  name           String
  model          String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Tasks1         Tasks1[]
  Sensor         Sensor[]
  MaintenanceLog MaintenanceLog[]
  AutomationLog  AutomationLog[]
}

// Task model
model Tasks1 {
  id             Int              @id @default(autoincrement())
  title          String
  description    String
  dueDate        DateTime?
  robot          Robot            @relation(fields: [robotId], references: [id])
  robotId        Int
  user           User13           @relation(fields: [userId], references: [id])
  userId         Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  TaskAssignment TaskAssignment[]
}

// Sensor model
model Sensor {
  id         Int          @id @default(autoincrement())
  name       String
  type       String
  robot      Robot        @relation(fields: [robotId], references: [id])
  robotId    Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  SensorData SensorData[]
}

// MaintenanceLog model
model MaintenanceLog {
  id          Int      @id @default(autoincrement())
  description String
  robot       Robot    @relation(fields: [robotId], references: [id])
  robotId     Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User13      User13?  @relation(fields: [user13Id], references: [id])
  user13Id    Int?
}

// User model
model User13 {
  id             Int              @id @default(autoincrement())
  username       String
  email          String           @unique
  tasks          Tasks1[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  MaintenanceLog MaintenanceLog[]
  TaskAssignment TaskAssignment[]
  AutomationLog  AutomationLog[]
}

// AutomationScript model
model AutomationScript {
  id        Int      @id @default(autoincrement())
  name      String
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// TaskAssignment model
model TaskAssignment {
  id         Int      @id @default(autoincrement())
  task       Tasks1   @relation(fields: [tasks1Id], references: [id])
  assignedTo User13   @relation(fields: [user13Id], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tasks1Id   Int
  user13Id   Int
}

// SensorData model
model SensorData {
  id        Int      @id @default(autoincrement())
  value     Float
  sensor    Sensor   @relation(fields: [sensorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sensorId  Int
}

// AutomationLog model
model AutomationLog {
  id        Int      @id @default(autoincrement())
  message   String
  timestamp DateTime
  robot     Robot?    @relation(fields: [robotId], references: [id])
  user      User13?   @relation(fields: [user13Id], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  robotId   Int
  user13Id  Int

  @@map("automation_log")
}

model Users1 {
  id    String @id @default(cuid())
  email String @unique

  authenticationMethod      AuthenticationMethod
  authenticationProfile     Json?
  authenticationExtraParams Json?
  authIdentifier            String?              @unique

  displayName String?
  name        String?
  avatarUrl   String?

  admin             Boolean @default(false)
  isOnCloudWaitlist Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  featureCloud           Boolean @default(false)
  isOnHostedRepoWaitlist Boolean @default(false)

  marketingEmails       Boolean @default(true)
  confirmedBasicDetails Boolean @default(false)

  orgMemberships OrgMember[]
  sentInvites    OrgMemberInvite[]
  apiVotes       ApiIntegrationVote[]

  invitationCode   InvitationCode? @relation(fields: [invitationCodeId], references: [id])
  invitationCodeId String?
}

// @deprecated This model is no longer used as the Cloud is out of private beta
// Leaving it here for now for historical reasons
model InvitationCode {
  id   String @id @default(cuid())
  code String @unique

  users Users1[]

  createdAt DateTime @default(now())
}

enum AuthenticationMethod {
  GITHUB
  MAGIC_LINK
}

model Organization {
  id    String @id @default(cuid())
  slug  String @unique
  title String

  maximumExecutionTimePerRunInMs Int @default(900000) // 15 minutes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  environments RuntimeEnvironment[]
  connections  IntegrationConnection[]
  endpoints    Endpoint[]
  jobs         Job[]
  jobVersions  JobVersion[]
  events       EventRecord[]
  jobRuns      JobRun[]

  projects         Projects[]
  members          OrgMember[]
  invites          OrgMemberInvite[]
  externalAccounts ExternalAccount[]
  integrations     Integration1[]
  sources          TriggerSource[]
}

model ExternalAccount {
  id         String @id @default(cuid())
  identifier String
  metadata   Json?

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  connections        IntegrationConnection[]
  events             EventRecord[]
  runs               JobRun[]
  schedules          ScheduleSource[]
  triggerSources     TriggerSource[]
  missingConnections MissingConnection[]

  @@unique([environmentId, identifier])
}

// This is a "global" table that store all the integration methods for all the integrations across all orgs
model IntegrationAuthMethod {
  id  String @id @default(cuid())
  key String

  name        String
  description String
  type        String

  client Json?
  config Json?
  scopes Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  integrations Integration1[]

  definition   IntegrationDefinition @relation(fields: [definitionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  definitionId String

  help Json?

  @@unique([definitionId, key])
}

model IntegrationDefinition {
  id           String  @id
  name         String
  instructions String?
  description  String?
  icon         String?
  packageName  String  @default("")

  authMethods IntegrationAuthMethod[]
  Integration Integration1[]
}

model Integration1 {
  id String @id @default(cuid())

  slug String

  title       String?
  description String?

  setupStatus IntegrationSetupStatus @default(COMPLETE)
  authSource  IntegrationAuthSource  @default(HOSTED)

  definition   IntegrationDefinition @relation(fields: [definitionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  definitionId String

  authMethod   IntegrationAuthMethod? @relation(fields: [authMethodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authMethodId String?

  connectionType ConnectionType @default(DEVELOPER)

  scopes String[]

  customClientReference   SecretReference? @relation(fields: [customClientReferenceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customClientReferenceId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  attempts           ConnectionAttempt[]
  connections        IntegrationConnection[]
  jobIntegrations    JobIntegration[]
  sources            TriggerSource[]
  missingConnections MissingConnection[]
  RunConnection      RunConnection[]

  @@unique([organizationId, slug])
}

enum IntegrationAuthSource {
  HOSTED
  LOCAL
  RESOLVER
}

enum IntegrationSetupStatus {
  MISSING_FIELDS
  COMPLETE
}

model IntegrationConnection {
  id String @id @default(cuid())

  connectionType ConnectionType @default(DEVELOPER)

  expiresAt DateTime?
  metadata  Json
  scopes    String[]

  dataReference   SecretReference @relation(fields: [dataReferenceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dataReferenceId String

  integration   Integration1 @relation(fields: [integrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  integrationId String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  externalAccount   ExternalAccount? @relation(fields: [externalAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  externalAccountId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  runConnections RunConnection[]
}

enum ConnectionType {
  EXTERNAL
  DEVELOPER
}

model ConnectionAttempt {
  id String @id @default(cuid())

  securityCode String?

  redirectTo String @default("/")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  integration   Integration1 @relation(fields: [integrationId], references: [id])
  integrationId String
}

model OrgMember {
  id String @id @default(cuid())

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  user   Users1   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  role OrgMemberRole @default(MEMBER)

  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  environments RuntimeEnvironment[]

  @@unique([organizationId, userId])
}

enum OrgMemberRole {
  ADMIN
  MEMBER
}

model OrgMemberInvite {
  id    String        @id @default(cuid())
  token String        @unique @default(cuid())
  email String
  role  OrgMemberRole @default(MEMBER)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  inviter   Users1   @relation(fields: [inviterId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  inviterId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([organizationId, email])
}

model RuntimeEnvironment {
  id       String @id @default(cuid())
  slug     String
  apiKey   String @unique
  pkApiKey String @unique

  type RuntimeEnvironmentType @default(DEVELOPMENT)

  autoEnableInternalSources Boolean @default(true)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  //when the org member is deleted, it will keep the environment but set it to null
  orgMember   OrgMember? @relation(fields: [orgMemberId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  orgMemberId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  endpoints         Endpoint[]
  jobVersions       JobVersion[]
  events            EventRecord[]
  jobRuns           JobRun[]
  requestDeliveries HttpSourceRequestDelivery[]
  jobAliases        JobAlias[]
  JobQueue          JobQueue[]
  sources           TriggerSource[]
  eventDispatchers  EventDispatcher[]
  scheduleSources   ScheduleSource[]
  ExternalAccount   ExternalAccount[]

  @@unique([projectId, slug, orgMemberId])
}

enum RuntimeEnvironmentType {
  PRODUCTION
  STAGING
  DEVELOPMENT
  PREVIEW
}

model Projects {
  id   String @id @default(cuid())
  slug String @unique
  name String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  environments RuntimeEnvironment[]
  endpoints    Endpoint[]
  jobs         Job[]
  jobVersion   JobVersion[]
  events       EventRecord[]
  runs         JobRun[]
  sources      TriggerSource[]
}

model Endpoint {
  id   String @id @default(cuid())
  slug String
  url  String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  indexingHookIdentifier String?
  version                String  @default("unknown")

  jobVersions           JobVersion[]
  jobRuns               JobRun[]
  httpRequestDeliveries HttpSourceRequestDelivery[]
  dynamictriggers       DynamicTrigger[]
  sources               TriggerSource[]
  indexings             EndpointIndex[]

  @@unique([environmentId, slug])
}

model EndpointIndex {
  id String @id @default(cuid())

  endpoint   Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endpointId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  source     EndpointIndexSource @default(MANUAL)
  sourceData Json?
  reason     String?
  status     EndpointIndexStatus @default(PENDING)

  data  Json?
  stats Json?
  error Json?
}

enum EndpointIndexSource {
  MANUAL
  API
  INTERNAL
  HOOK
}

enum EndpointIndexStatus {
  PENDING
  STARTED
  SUCCESS
  FAILURE
}

model Job {
  id       String  @id @default(cuid())
  slug     String
  title    String
  internal Boolean @default(false)

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  versions        JobVersion[]
  runs            JobRun[]
  integrations    JobIntegration[]
  aliases         JobAlias[]
  dynamicTriggers DynamicTrigger[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  deletedAt DateTime?

  @@unique([projectId, slug])
}

model JobVersion {
  id                 String @id @default(cuid())
  version            String
  eventSpecification Json

  properties Json?

  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId String

  endpoint   Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endpointId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  queue   JobQueue @relation(fields: [queueId], references: [id])
  queueId String

  startPosition  JobStartPosition @default(INITIAL)
  preprocessRuns Boolean          @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  runs            JobRun[]
  integrations    JobIntegration[]
  aliases         JobAlias[]
  examples        EventExample[]
  dynamicTriggers DynamicTrigger[]
  triggerSources  TriggerSource[]

  status JobVersionStatus @default(ACTIVE)

  @@unique([jobId, version, environmentId])
}

enum JobVersionStatus {
  ACTIVE
  DISABLED
}

model EventExample {
  id String @id @default(cuid())

  slug String
  name String
  icon String?

  payload Json?

  jobVersion   JobVersion @relation(fields: [jobVersionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobVersionId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([slug, jobVersionId])
}

model JobQueue {
  id   String @id @default(cuid())
  name String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobCount Int @default(0)
  maxJobs  Int @default(100)

  runs       JobRun[]
  jobVersion JobVersion[]

  @@unique([environmentId, name])
}

model JobAlias {
  id    String @id @default(cuid())
  name  String @default("latest")
  value String

  version   JobVersion @relation(fields: [versionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  versionId String

  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  @@unique([jobId, environmentId, name])
}

model JobIntegration {
  id  String @id @default(cuid())
  key String

  version   JobVersion @relation(fields: [versionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  versionId String

  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId String

  integration   Integration1 @relation(fields: [integrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  integrationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([versionId, key])
}

model RunConnection {
  id  String @id @default(cuid())
  key String

  authSource IntegrationAuthSource @default(HOSTED)

  run   JobRun @relation(fields: [runId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  runId String

  connection   IntegrationConnection? @relation(fields: [connectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  connectionId String?

  integration   Integration1 @relation(fields: [integrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  integrationId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks Task2[]

  @@unique([runId, key])
}

model DynamicTrigger {
  id   String             @id @default(cuid())
  type DynamicTriggerType @default(EVENT)
  slug String

  endpoint   Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endpointId String

  jobs            Job[]
  sources         TriggerSource[]
  scheduleSources ScheduleSource[]
  registrations   DynamicTriggerRegistration[]

  sourceRegistrationJob   JobVersion? @relation(fields: [sourceRegistrationJobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sourceRegistrationJobId String?

  @@unique([endpointId, slug, type])
}

enum DynamicTriggerType {
  EVENT
  SCHEDULE
}

model EventDispatcher {
  id            String   @id @default(cuid())
  event         String[]
  source        String
  payloadFilter Json?
  contextFilter Json?
  manual        Boolean  @default(false)

  dispatchableId String
  dispatchable   Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enabled Boolean @default(true)

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  registrations   DynamicTriggerRegistration[]
  scheduleSources ScheduleSource[]

  @@unique([dispatchableId, environmentId])
}

enum JobStartPosition {
  INITIAL
  LATEST
}

model EventRecord {
  id            String   @id @default(cuid())
  eventId       String
  name          String
  timestamp     DateTime @default(now())
  payload       Json
  context       Json?
  sourceContext Json?

  source String @default("trigger.dev")

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  externalAccount   ExternalAccount? @relation(fields: [externalAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  externalAccountId String?

  deliverAt   DateTime  @default(now())
  deliveredAt DateTime?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  cancelledAt DateTime?

  isTest Boolean  @default(false)
  runs   JobRun[]

  @@unique([eventId, environmentId])
}

model JobRun {
  id       String  @id @default(cuid())
  number   Int
  internal Boolean @default(false)

  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  jobId String

  version   JobVersion @relation(fields: [versionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  versionId String

  event   EventRecord @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  endpoint   Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endpointId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  queue   JobQueue @relation(fields: [queueId], references: [id])
  queueId String

  externalAccount   ExternalAccount? @relation(fields: [externalAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  externalAccountId String?

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  queuedAt    DateTime?
  startedAt   DateTime?
  completedAt DateTime?

  properties Json?

  status JobRunStatus @default(PENDING)
  output Json?

  timedOutAt     DateTime?
  timedOutReason String?

  executionCount    Int @default(0)
  executionDuration Int @default(0)

  isTest     Boolean @default(false)
  preprocess Boolean @default(false)

  yieldedExecutions String[]

  tasks              Task2[]
  runConnections     RunConnection[]
  missingConnections MissingConnection[]
  executions         JobRunExecution[]
  statuses           JobRunStatusRecord[]
}

enum JobRunStatus {
  PENDING
  QUEUED
  WAITING_ON_CONNECTIONS
  PREPROCESSING
  STARTED
  SUCCESS
  FAILURE
  TIMED_OUT
  ABORTED
  CANCELED
  UNRESOLVED_AUTH
  INVALID_PAYLOAD
}

model JobRunExecution {
  id String @id @default(cuid())

  run   JobRun @relation(fields: [runId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  runId String

  retryCount     Int @default(0)
  retryLimit     Int @default(0)
  retryDelayInMs Int @default(0)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  startedAt   DateTime?
  completedAt DateTime?

  error String?

  reason JobRunExecutionReason @default(EXECUTE_JOB)
  status JobRunExecutionStatus @default(PENDING)

  resumeTask   Task2?   @relation(fields: [resumeTaskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  resumeTaskId String?

  graphileJobId String?

  isRetry Boolean @default(false)
}

enum JobRunExecutionReason {
  PREPROCESS
  EXECUTE_JOB
}

enum JobRunExecutionStatus {
  PENDING
  STARTED
  SUCCESS
  FAILURE
}

model Task2 {
  id             String  @id
  idempotencyKey String
  displayKey     String?
  name           String
  icon           String?

  status     TaskStatus1 @default(PENDING)
  delayUntil DateTime?
  noop       Boolean    @default(false)

  description      String?
  properties       Json?
  outputProperties Json?
  params           Json?
  output           Json?
  error            String?
  redact           Json?
  style            Json?
  operation        String?
  callbackUrl      String?

  startedAt   DateTime?
  completedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  run   JobRun @relation(fields: [runId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  runId String

  parent   Task2?   @relation("TaskParent", fields: [parentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  parentId String?

  runConnection   RunConnection? @relation(fields: [runConnectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  runConnectionId String?

  children   Task2[]            @relation("TaskParent")
  executions JobRunExecution[]
  attempts   TaskAttempt[]

  @@unique([runId, idempotencyKey])
}

enum TaskStatus1 {
  PENDING
  WAITING
  RUNNING
  COMPLETED
  ERRORED
  CANCELED
}

model TaskAttempt {
  id String @id @default(cuid())

  number Int

  task   Task2   @relation(fields: [taskId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  taskId String

  status TaskAttemptStatus @default(PENDING)

  error String?

  runAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([taskId, number])
}

enum TaskAttemptStatus {
  PENDING
  STARTED
  COMPLETED
  ERRORED
}

model JobRunStatusRecord {
  id  String @id @default(cuid())
  key String

  run   JobRun @relation(fields: [runId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  runId String

  label String
  state String?
  data  Json?

  history Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([runId, key])
}

model SecretReference {
  id       String              @id @default(cuid())
  key      String              @unique
  provider SecretStoreProvider @default(DATABASE)

  connections    IntegrationConnection[]
  integrations   Integration1[]
  triggerSources TriggerSource[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SecretStoreProvider {
  DATABASE
  AWS_PARAM_STORE
}

model SecretStore {
  key     String @unique
  value   Json
  version String @default("1")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TriggerSource {
  id String @id @default(cuid())

  key    String
  params Json?

  channel     TriggerChannel @default(HTTP)
  channelData Json?

  version String @default("1")

  options TriggerSourceOption[]

  metadata Json?

  secretReference   SecretReference @relation(fields: [secretReferenceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  secretReferenceId String

  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  organizationId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  endpoint   Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endpointId String

  project   Projects @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String

  integration   Integration1 @relation(fields: [integrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  integrationId String

  dynamicTrigger   DynamicTrigger? @relation(fields: [dynamicTriggerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dynamicTriggerId String?

  externalAccount   ExternalAccount? @relation(fields: [externalAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  externalAccountId String?

  sourceRegistrationJob   JobVersion? @relation(fields: [sourceRegistrationJobId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sourceRegistrationJobId String?

  dynamicSourceId       String?
  dynamicSourceMetadata Json?

  active      Boolean @default(false)
  interactive Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  httpDeliveries HttpSourceRequestDelivery[]
  registrations  DynamicTriggerRegistration[]

  @@unique([key, environmentId])
}

enum TriggerChannel {
  HTTP
  SQS
  SMTP
}

model TriggerSourceOption {
  id    String @id @default(cuid())
  name  String
  value String

  source   TriggerSource @relation(fields: [sourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sourceId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  registered Boolean @default(false)

  @@unique([name, value, sourceId])
}

model DynamicTriggerRegistration {
  id String @id @default(cuid())

  key String

  dynamicTrigger   DynamicTrigger @relation(fields: [dynamicTriggerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dynamicTriggerId String

  eventDispatcher   EventDispatcher @relation(fields: [eventDispatcherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventDispatcherId String

  source   TriggerSource @relation(fields: [sourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sourceId String

  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([key, dynamicTriggerId])
}

model HttpSourceRequestDelivery {
  id      String @id @default(cuid())
  url     String
  method  String
  headers Json
  body    Bytes?

  source   TriggerSource @relation(fields: [sourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sourceId String

  endpoint   Endpoint @relation(fields: [endpointId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  endpointId String

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deliveredAt DateTime?
}

model ScheduleSource {
  id String @id @default(cuid())

  key      String
  schedule Json

  environment   RuntimeEnvironment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  environmentId String

  dispatcher   EventDispatcher @relation(fields: [dispatcherId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dispatcherId String

  lastEventTimestamp DateTime?
  nextEventTimestamp DateTime?

  workerJobId String?

  active Boolean @default(false)

  metadata Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dynamicTrigger   DynamicTrigger? @relation(fields: [dynamicTriggerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  dynamicTriggerId String?

  externalAccount   ExternalAccount? @relation(fields: [externalAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  externalAccountId String?

  @@unique([key, environmentId])
}

model MissingConnection {
  id String @id @default(cuid())

  resolved Boolean @default(false)

  runs JobRun[]

  integration   Integration1 @relation(fields: [integrationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  integrationId String

  connectionType ConnectionType @default(DEVELOPER)

  externalAccount   ExternalAccount? @relation(fields: [externalAccountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  externalAccountId String?

  accountIdentifier String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([integrationId, connectionType, externalAccountId])
  @@unique([integrationId, connectionType, accountIdentifier])
}

model ApiIntegrationVote {
  id String @id @default(cuid())

  apiIdentifier String

  user   Users1   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([apiIdentifier, userId])
}

model DataMigration {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}

model DataMigration1 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration2 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration3 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration4 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration5 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration6 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration7 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration8 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration9 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration10 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration11 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration12 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration13 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration14 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration15 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration16 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration17 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration18 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration19 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration20 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration21 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration22 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration23 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration24 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration25 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration26 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration27 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration28 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration29 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration30 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration31 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration32 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration33 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration34 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration35 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration36 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration37 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration38 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration39 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration40 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration41 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration42 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration43 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration44 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration45 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration46 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration47 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration48 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration49 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration50 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration51 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration52 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration53 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration54 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration55 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration56 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration57 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration58 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration59 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration60 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration61 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration62 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration63 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration64 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration65 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration66 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration67 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration68 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration69 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration70 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration71 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration72 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration73 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration74 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration75 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration76 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration77 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration78 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration79 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration80 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration81 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration82 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration83 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration84 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration85 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration86 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration87 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration88 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration89 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration90 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration91 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration92 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration93 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration94 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration95 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration96 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration97 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration98 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration99 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration100 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}

model DataMigration400 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration401 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration402 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration403 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration404 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration405 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration406 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration407 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration408 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration409 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration410 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration411 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration412 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration413 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration414 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration415 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration416 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration417 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration418 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration419 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration420 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration421 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration422 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration423 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration424 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration425 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration426 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration427 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration428 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration429 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration430 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration431 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration432 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration433 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration434 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration435 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration436 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration437 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration438 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration439 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration440 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration441 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration442 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration443 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration444 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration445 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration446 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration447 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration448 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration449 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration450 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration451 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration452 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration453 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration454 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration455 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration456 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration457 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration458 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration459 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration460 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration461 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration462 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration463 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration464 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration465 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration466 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration467 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration468 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration469 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration470 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration471 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration472 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration473 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration474 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration475 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration476 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration477 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration478 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration479 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration480 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration481 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration482 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration483 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration484 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration485 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration486 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration487 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration488 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration489 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration490 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration491 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration492 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration493 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration494 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration495 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration496 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration497 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration498 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration499 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    

model DataMigration500 {
  id   String @id @default(cuid())
  name String @unique

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completedAt DateTime?
}
    